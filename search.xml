<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>article title</title>
      <link href="/2020/04/01/ctf-misc/"/>
      <url>/2020/04/01/ctf-misc/</url>
      
        <content type="html"><![CDATA[<p>本部分包含Misc的简介和encode的介绍，收集总结自CTF-wiki、维基百科，题目主要来源于Jarvis OJ，如有补充和意见请发送邮件至<a href="mailto:1316565360@qq.com" target="_blank" rel="noopener">1316565360@qq.com</a></p><h1 id="Misc简介"><a href="#Misc简介" class="headerlink" title="Misc简介"></a>Misc简介</h1><p>Misc 是英文 Miscellaneous 的前四个字母，杂项、混合体、大杂烩的意思。<br>Misc 在国外的比赛中其实又被具体划分为各个小块，有</p><ul><li>Recon</li><li>Forensic</li><li>Stego</li><li>Misc</li><li>……</li></ul><p>在国内的比赛中，被统一划分入 Misc 领域，有时 Crypto（尤其是古典密码）也被划入其中。</p><p>在 Misc 这一章节中，将从以下几个方面介绍这一块的知识：</p><ul><li><p>Recon（信息搜集）</p><p>主要介绍一些获取信息的渠道和一些利用百度、谷歌等搜索引擎的技巧</p></li><li><p>Encode（编码转换）</p><p>主要介绍在 CTF 比赛中一些常见的编码形式以及转换的技巧和常见方式</p></li><li><p>Forensic &amp;&amp; Stego（数字取证 &amp;&amp; 隐写分析）</p><p>隐写取证是 Misc 中最为重要的一块，包括文件分析、隐写、内存镜像分析和流量抓包分析等等，涉及巧妙的编码、隐藏数据、层层嵌套的文件中的文件，灵活利用搜索引擎获取所需要的信息等等。</p></li></ul><h1 id="Recon（信息搜集）"><a href="#Recon（信息搜集）" class="headerlink" title="Recon（信息搜集）"></a>Recon（信息搜集）</h1><h2 id="渠道"><a href="#渠道" class="headerlink" title="渠道"></a>渠道</h2><ul><li>公开渠道</li><li>目标 Web 网页、地理位置、相关组织</li><li>组织结构和人员、个人资料、电话、电子邮件</li><li>网络配置、安全防护机制的策略和技术细节</li><li>通过搜索引擎查找特定安全漏洞或私密信息的方法</li><li><a href="https://www.exploit-db.com/google-hacking-database/" target="_blank" rel="noopener">Google Hacking Database</a></li><li>科学上网</li></ul><h2 id="地图和街景搜索"><a href="#地图和街景搜索" class="headerlink" title="地图和街景搜索"></a>地图和街景搜索</h2><ul><li>国外：Google Map、Google Earth、Google Street View</li><li>国内：百度地图、卫星地图、街景</li><li>从网络世界到物理世界：IP2Location</li><li>whois 数据库</li><li>GeoIP</li><li>IP2Location</li><li>纯真数据库（QQ IP 查询）</li></ul><h1 id="Commonly-Used-Coding-in-the-Communication-Field"><a href="#Commonly-Used-Coding-in-the-Communication-Field" class="headerlink" title="Commonly Used Coding in the Communication Field"></a>Commonly Used Coding in the Communication Field</h1><h2 id="电话拨号编码"><a href="#电话拨号编码" class="headerlink" title="电话拨号编码"></a>电话拨号编码</h2><p>1-9 分别使用 1-9 个脉冲，0 则表示使用 10 个脉冲。</p><h2 id="Morse-编码"><a href="#Morse-编码" class="headerlink" title="Morse 编码"></a>Morse 编码</h2><p>参见 <a href="https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81" target="_blank" rel="noopener">摩尔斯编码 -维基百科</a>，对应表如下</p><p><img src="https://s1.ax1x.com/2020/04/01/GlfSoV.png" alt="摩尔斯电码"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>只有 <code>.</code> 和 <code>-</code>；</li><li>最多 6 位；</li><li>也可以使用 <code>01</code> 串表示。</li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx" target="_blank" rel="noopener">摩尔斯编码在线转换</a></li></ul><h2 id="敲击码"><a href="#敲击码" class="headerlink" title="敲击码"></a>敲击码</h2><p>敲击码（Tap code）是一种以非常简单的方式对文本信息进行编码的方法。因该编码对信息通过使用一系列的点击声音来编码而命名，敲击码是基于 5 ×5 方格波利比奥斯方阵来实现的，不同点是是用 K 字母被整合到 C 中。</p><table><thead><tr><th>Tap Code</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>B</td><td>C/K</td><td>D</td><td>E</td></tr><tr><td>2</td><td>F</td><td>G</td><td>H</td><td>I</td><td>J</td></tr><tr><td>3</td><td>L</td><td>M</td><td>N</td><td>O</td><td>P</td></tr><tr><td>4</td><td>Q</td><td>R</td><td>S</td><td>T</td><td>U</td></tr><tr><td>5</td><td>V</td><td>W</td><td>X</td><td>Y</td><td>Z</td></tr></tbody></table><p><img src="https://s1.ax1x.com/2020/04/01/GlfPWF.jpg" alt></p><h2 id="曼彻斯特编码"><a href="#曼彻斯特编码" class="headerlink" title="曼彻斯特编码"></a>曼彻斯特编码</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">曼彻斯特编码 - 维基百科</a></li></ul><blockquote><p>在电信与数据存储中, 曼彻斯特编码（Manchester coding），又称自同步码、相位编码（phase encoding，PE），能够用信号的变化来保持发送设备和接收设备之间的同步。它用电压的变化来分辨0和1，从高电平到低电平的跳变代表1，而从低电平到高电平的跳变代表0(as per G.E.Tomas编码方式)。从高电平到低电平的跳变代表0，而从低电平到高电平的跳变代表1(as per IEEE 802.3编码方式)，下方有所展示。信号的保持不会超过一个比特位的时间间隔。即使是0或1的序列，信号也将在每个时间间隔的中间发生跳变。这种跳变将允许接收设备的时钟与发送设备的时钟保持一致。</p></blockquote><div align="center"><img src="https://s1.ax1x.com/2020/04/01/Gl7png.png"></div><p><img src="https://s1.ax1x.com/2020/04/01/Gl7KHJ.png" alt></p><h2 id="格雷编码"><a href="#格雷编码" class="headerlink" title="格雷编码"></a>格雷编码</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E6%A0%BC%E9%9B%B7%E7%A0%81" target="_blank" rel="noopener">格雷码 - 维基百科</a><blockquote><p>格雷码（Gray code）是由贝尔实验室的Frank Gray在1940年提出，用于在PCM（脉冲编码调变）方法传送讯号时防止出错，并于1953年三月十七日取得美国专利。格雷码是一个数列集合，相邻两数间只有一个位元改变，为无权数码，且格雷码的顺序不是唯一的。传统的二进制系统例如数字3的表示法为011，要切换为邻近的数字4，也就是100时，装置中的三个位元都得要转换，因此于未完全转换的过程时装置会经历短暂的，010,001,101,110,111等其中数种状态，也就是代表着2、1、5、6、7，因此此种数字编码方法于邻近数字转换时有比较大的误差可能范围。葛雷码的发明即是用来将误差之可能性缩减至最小，编码的方式定义为每个邻近数字都只相差一个位元，因此也称为最小差异码，可以使装置做数字步进时只更动最少的位元数以提高稳定性。</p></blockquote></li></ul><p>数字0～7的编码比较如下：</p><table><thead><tr><th>十进制</th><th>格雷码</th><th>二进制</th></tr></thead><tbody><tr><td>0</td><td>000</td><td>000</td></tr><tr><td>1</td><td>001</td><td>001</td></tr><tr><td>2</td><td>011</td><td>010</td></tr><tr><td>3</td><td>010</td><td>011</td></tr><tr><td>4</td><td>110</td><td>100</td></tr><tr><td>5</td><td>111</td><td>101</td></tr><tr><td>6</td><td>101</td><td>110</td></tr><tr><td>7</td><td>100</td><td>111</td></tr></tbody></table><h2 id="字母表编码"><a href="#字母表编码" class="headerlink" title="字母表编码"></a>字母表编码</h2><ul><li>A-Z/a-z 对应 1-26 或者 0-25</li></ul><h2 id="ASCII-编码"><a href="#ASCII-编码" class="headerlink" title="ASCII 编码"></a>ASCII 编码</h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>我们一般使用的 ascii 编码的时候采用的都是可见字符，而且主要是如下字符</p><ul><li>0-9, 49-57</li><li>A-Z, 65-90</li><li>a-z, 97-122</li></ul><h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><h4 id="二进制编码"><a href="#二进制编码" class="headerlink" title="二进制编码"></a>二进制编码</h4><p>将 ascii 码对应的数字换成二进制表示形式。</p><ul><li>只有 0 和 1</li><li>不大于 8 位，一般 7 位也可以，因为可见字符到 127。</li><li>其实是另一种 ascii 编码。</li></ul><h4 id="十六进制编码"><a href="#十六进制编码" class="headerlink" title="十六进制编码"></a>十六进制编码</h4><p>将 ascii 码对应的数字换成十六进制表示形式。</p><ul><li>A-Z–&gt;41-5 A</li><li>a-z–&gt;61-7 A</li></ul><h3 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h3><ul><li>jpk, ascii to number, number to ascii</li><li><a href="http://www.ab126.com/goju/1711.html" target="_blank" rel="noopener">http://www.ab126.com/goju/1711.html</a></li></ul><h2 id="Base-编码"><a href="#Base-编码" class="headerlink" title="Base 编码"></a>Base 编码</h2><p>base xx 中的 xx 表示的是采用多少个字符进行编码，比如说 base64 就是采用以下 64 个字符编码，由于 2 的 6 次方等于 64，所以每 6 个比特为一个单元，对应某个可打印字符。3个字节就有 24 个比特，对应于 4 个 Base64 单元，即 3 个字节需要用 4 个可打印字符来表示。它可用来作为电子邮件的传输编码。在 Base64 中的可打印字符包括字母 A-Z、a-z、数字 0-9，这样共有 62 个字符，此外两个可打印符号在不同的系统中而不同。</p><p><img src="https://s1.ax1x.com/2020/04/01/GlWxZq.png" alt="base64"></p><p>具体介绍参见 <a href="https://zh.wikipedia.org/wiki/Base64" target="_blank" rel="noopener">Base64 - 维基百科</a>。</p><p><strong>编码 man</strong></p><p><img src="https://s1.ax1x.com/2020/04/01/GlWzd0.png" alt="base64 编码 MAN"></p><p>如果要编码的字节数不能被 3 整除，最后会多出 1 个或 2 个字节，那么可以使用下面的方法进行处理：先使用 0 值在末尾补足，使其能够被 3 整除，然后再进行 base64 的编码。在编码后的 base64 文本后加上一个或两个 <code>=</code> 号，代表补足的字节数。也就是说，当最后剩余一个八位字节（一个 byte）时，最后一个 6 位的 base64 字节块有四位是 0 值，最后附加上两个等号；如果最后剩余两个八位字节（2 个 byte）时，最后一个 6 位的 base 字节块有两位是 0 值，最后附加一个等号。参考下表：</p><p><img src="https://s1.ax1x.com/2020/04/01/GlWOMj.png" alt="base64 补 0"></p><p>由于解码时补位的 0 并不参与运算，可以在该处隐藏信息。</p><p>与 base64 类似，base32 使用 32 个可见字符进行编码，2 的 5 次方为 32，所以每 5 bit 为 1 个分组。5 字节为 40 bit，对应于 8 个 base32 分组，即 5 个字节用 8 个 base32 中字符来表示。但如果不足 5 个字节，则会先对第一个不足 5 bit 的分组用 0 补足了 5 bit ，对后面剩余分组全部使用 “=” 填充，直到补满 5 个字节。由此可知，base32 最多只有 6 个等号出现。例如：</p><p><img src="https://s1.ax1x.com/2020/04/01/GlWXss.png" alt="base32"></p><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul><li>base64 结尾可能会有 <code>=</code> 号，但最多有 2 个</li><li>base32 结尾可能会有 <code>=</code> 号，但最多有 6 个</li><li>根据 base 的不同，字符集会有所限制</li><li><strong>有可能需要自己加等号</strong></li><li><strong>=也就是 3D</strong></li><li>更多内容请参见 <a href="https://tools.ietf.org/html/rfc4648" target="_blank" rel="noopener">base rfc</a></li></ul><h3 id="工具-2"><a href="#工具-2" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="http://www1.tc711.com/tool/BASE64.htm" target="_blank" rel="noopener">http://www1.tc711.com/tool/BASE64.htm</a></li><li>python 库函数</li><li><a href="https://github.com/cjcslhp/wheels/tree/master/b64stego" target="_blank" rel="noopener">读取隐写信息脚本</a></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>题目描述参见 文章末尾的附注</p><p>使用脚本读取隐写信息。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">deStego</span><span class="token punctuation">(</span>stegoFile<span class="token punctuation">)</span><span class="token punctuation">:</span>    b64table <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>stegoFile<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> stegoText<span class="token punctuation">:</span>        message <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> stegoText<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                text <span class="token operator">=</span> line<span class="token punctuation">[</span>line<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                message <span class="token operator">+=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span> bin<span class="token punctuation">(</span> <span class="token number">0</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'='</span> <span class="token keyword">else</span> b64table<span class="token punctuation">.</span>find<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> text<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token keyword">if</span> text<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token number">2</span> <span class="token keyword">else</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>              <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">pass</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>message<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>deStego<span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出:</p><pre><code>     flag{BASE64_i5_amaz1ng}</code></pre><h2 id="霍夫曼编码"><a href="#霍夫曼编码" class="headerlink" title="霍夫曼编码"></a>霍夫曼编码</h2><blockquote><p>在计算机数据处理中，霍夫曼编码使用变长编码表对源符号（如文件中的一个字母）进行编码，其中变长编码表是通过一种评估来源符号出现几率的方法得到的，出现几率高的字母使用较短的编码，反之出现几率低的则使用较长的编码，这便使编码之后的字符串的平均长度、期望值降低，从而达到无损压缩数据的目的。<br>例如，在英文中，e的出现几率最高，而z的出现概率则最低。当利用霍夫曼编码对一篇英文进行压缩时，e极有可能用一个比特来表示，而z则可能花去25个比特（不是26）。用普通的表示方法时，每个英文字母均占用一个字节，即8个比特。二者相比，e使用了一般编码的1/8的长度，z则使用了3倍多。倘若我们能实现对于英文中各个字母出现概率的较准确的估算，就可以大幅度提高无损压缩的比例。</p></blockquote><p>具体信息参见 <a href="https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">霍夫曼编码</a>。</p><h2 id="XXencoding"><a href="#XXencoding" class="headerlink" title="XXencoding"></a>XXencoding</h2><p>XXencode 将输入文本以每三个字节为单位进行编码。如果最后剩下的资料少于三个字节，不够的部份用零补齐。这三个字节共有 24 个 Bit，以 6bit 为单位分为 4 个组，每个组以十进制来表示所出现的数值只会落在 0 到 63 之间。以所对应值的位置字符代替。</p><pre class="line-numbers language-text"><code class="language-text">           1         2         3         4         5         6 0123456789012345678901234567890123456789012345678901234567890123 |         |         |         |         |         |         | +-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>具体信息参见<a href="https://en.wikipedia.org/wiki/Xxencoding" target="_blank" rel="noopener">维基百科</a></p><h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><ul><li>只有数字，大小写字母</li><li>+号，-号。</li></ul><h3 id="工具-3"><a href="#工具-3" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="http://web.chacuo.net/charsetxxencode" target="_blank" rel="noopener">http://web.chacuo.net/charsetxxencode</a></li></ul><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h2 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h2><p>参见<a href="https://zh.wikipedia.org/wiki/%E7%99%BE%E5%88%86%E5%8F%B7%E7%BC%96%E7%A0%81" target="_blank" rel="noopener"> URL 编码 - 维基百科</a>。</p><h3 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h3><ul><li>大量的百分号</li></ul><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><h2 id="Unicode-编码"><a href="#Unicode-编码" class="headerlink" title="Unicode 编码"></a>Unicode 编码</h2><p>参见<a href="https://zh.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener"> Unicode - 维基百科</a>。</p><p>注意，它有四种表现形式。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>源文本： <code>The</code></p><p>&amp;#x [Hex]:  <code>&amp;#x0054;&amp;#x0068;&amp;#x0065;</code></p><p>&amp;# [Decimal]:  <code>&amp;#00084;&amp;#00104;&amp;#00101;</code></p><p>\U [Hex]:  <code>\U0054\U0068\U0065</code></p><p>\U+ [Hex]:  <code>\U+0054\U+0068\U+0065</code></p><h1 id="Commonly-Used-Encodings-in-the-Real-World"><a href="#Commonly-Used-Encodings-in-the-Real-World" class="headerlink" title="Commonly Used Encodings in the Real World"></a>Commonly Used Encodings in the Real World</h1><h2 id="条形码"><a href="#条形码" class="headerlink" title="条形码"></a>条形码</h2><p>宽度不等的多个黑条和空白，按照一定的编码规则排列，用以表达一组信息的图形标识符</p><ul><li>国际标准</li><li>EAN-13 商品标准，13 位数字</li><li>Code-39：39 字符</li><li>Code-128：128 字符</li><li><a href="https://online-barcode-reader.inliteresearch.com/" target="_blank" rel="noopener">条形码在线识别</a><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2></li><li>用某种特定几何图形按一定规律在平面分步的黑白相间的图形记录数据符号信息</li><li>堆叠式 / 行排式二维码：Code 16 k、Code 49、PDF417</li><li>矩阵式二维码：QR CODE<br><img src="https://i.loli.net/2020/04/01/fNwuam7EKgq5TVX.png" alt="qr1.jpg"><br><img src="https://i.loli.net/2020/04/01/vWSJjCcVDiFNaum.png" alt="qr2.jpg"></li></ul><h1 id="更多资料推荐"><a href="#更多资料推荐" class="headerlink" title="更多资料推荐"></a>更多资料推荐</h1><ul><li><a href="http://blog.neargle.com/SecNewsBak/drops/CTF%E4%B8%AD%E9%82%A3%E4%BA%9B%E8%84%91%E6%B4%9E%E5%A4%A7%E5%BC%80%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E5%8A%A0%E5%AF%86%20.html" target="_blank" rel="noopener">CTF中那些脑洞大开的编码和加密</a></li></ul><h1 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h1><ul><li>请选手观察以下密文并转换成flag形式  <pre><code>..-. .-.. .- --. ..... ..--- ..--- ----- .---- ---.. -.. -.... -.... ..... ...-- ---.. --... -.. .---- -.. .- ----. ...-- .---- ---.. .---- ..--- -... --... --... --... -.... ...-- ....- .---- -----  </code></pre>flag形式为32位大写md5<br>题目来源：CFF2016</li></ul><ul><li>德军的密码<br>已知将一个flag以一种加密形式为使用密钥进行加密，使用密钥WELCOMETOCFF加密后密文，请分析出flag。Flag为12位大写字母（题目来源：CFF2016）<pre><code>000000000000000000000000000000000000000000000000000101110000110001000000101000000001  </code></pre></li></ul><hr><ul><li>Throwback<br>题目描述如下<pre><code>Anyo!e!howouldsacrificepo!icyforexecu!!onspeedthink!securityisacomm!ditytop!urintoasy!tem!</code></pre></li></ul><hr><ul><li>base64?<br>题目描述如下：<pre><code>GUYDIMZVGQ2DMN3CGRQTONJXGM3TINLGG42DGMZXGM3TINLGGY4DGNBXGYZTGNLGGY3DGNBWMU3WI===</code></pre></li></ul><hr><ul><li>熟悉的声音  </li></ul><p>两种不同的元素，如果是声音的话，听起来是不是很熟悉呢</p><pre><code>XYYY YXXX XYXX XXY XYY X XYY YX YYXX  </code></pre><hr><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ul><li>摩斯电码：<br>利用在线转换得到结果为 : <pre><code>FLAG522018D665387D1DA931812B77763410  </code></pre>恰好FLAG后面的字符串为某32位大写MD5  </li></ul><hr><ul><li>德军的密码：  </li></ul><p>因为WELCOMETOCFF转化为二进制和上述密文长度相同，猜测是异或，然后将异或结果从二进制转化为ASCII码得到flag：</p><pre><code>WELCOMECISRG  </code></pre><hr><ul><li>Throwback:</li></ul><p>第一直觉应该是我们去补全这些叹号对应的内容，从而得到 flag，但是补全后并不行，那么我们可以把源字符串按照 <code>!</code> 分割，然后字符串长度 1 对应字母a，长度 2 对应字母 b，以此类推</p><pre class="line-numbers language-shell"><code class="language-shell">ori = 'Anyo!e!howouldsacrificepo!icyforexecu!!onspeedthink!securityisacomm!ditytop!urintoasy!tem!'sp = ori.split('!')print repr(''.join(chr(97 + len(s) - 1) for s in sp))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>进而可以得到，这里同时需要假设 0 个字符为空格。因为这正好使得原文可读。</p><pre class="line-numbers language-shell"><code class="language-shell">dark logic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><ul><li>Base64?  </li></ul><p>由题目提示，且Base64一般都有小写的，而这个却都是大写，Base64和Base32加密中，遇到位数不足都会使用等于号代替，所以可能是Base32。<br>打开在线Base32解密的网站，进行解密.得到一串十六进制的数字，这时候你可以选择使用在线将hex转为字符串，即可得出</p><pre><code>PCTF{Just_t3st_h4v3_f4n}</code></pre><hr><ul><li>熟悉的声音  </li></ul><p>仔细观察发现就X和Y和空格三种字符。应该是摩斯密码了。把X替换成.   Y替换成-   得到JBLUWEWNZ，然后凯撒移位。<br>JBLUWEWNZ  移位后发现熟悉的字符  PHRACKCTF</p><hr><h1 id="附注"><a href="#附注" class="headerlink" title="附注"></a>附注</h1><p>下面为题目所需数据</p><pre><code>QmFzZTY0IGlzIGEgZ3JvdXAgb2Ygc2ltaWxhciBiaW5hcnktdG8tdGV4dCBlbmNvZGluZyBzY2hlbWVzIHRoYXQgcmVwcmVzZW50IGJpbmFyeSBkYXRhIGluIGFuIEFTQ0lJIHN0cmluZyBmb3JtYXQgYnkgdHJhbnNsYXRpbmcgaXQgaW50byBhIHJhZGl4LTY0IHJlcHJlc2VudGF0aW9uLiBUaGUgdGVybSBCYXNlNjQgb3JpZ2luYXRlcyBmcm9tIGEgc3BlY2lmaWMgTUlNRSBjb250ZW50IHRyYW5zZmVyIGVuY29kaW5nLgpUaGUgcGFydGljdWxhciBzZXQgb2YgNjQgY2hhcmFjdGVycyBjaG9zZW4gdG8gcmVwcmVzZW50IHRoZSA2NCBwbGFjZS12YWx1ZXMgZm9yIHRoZSBiYXNlIHZhcmllcyBiZXR3ZWVuIGltcGxlbWVudGF0aW9ucy4gVGhlIGdlbmVyYWwgc3RyYXRlZ3kgaXMgdG8gY2hvb3NlIDY0IGNoYXJhY3RlcnMgdGhhdCBhcmUgYm90aCBtZW1iZXJzIG9mIGEgc3Vic2V0IGNvbW1vbiB0byBtb3N0IGVuY29kaW5ncw==IGFuZCBhbHNvIHByaW50YWJsZS4gVGhpcyBjb21iaW5hdGlvbiBsZWF2ZXMgdGhlIGRhdGEgdW5saWtlbHkgdG8gYmUgbW9kaWZpZWQgaW4gdHJhbnNpdCB0aHJvdWdoIGluZm9ybWF0aW9uIHN5c3RlbXM=IHN1Y2ggYXMgZW1haWw=IHRoYXQgd2VyZSB0cmFkaXRpb25hbGx5IG5vdCA4LWJpdCBjbGVhbi5bMV0gRm9yIGV4YW1wbGU=IGGoQ3o=IGFuZCAwqEM5IGZvciB0aGUgZmlyc3QgNjIgdmFsdWVzLiBPdGhlciB2YXJpYXRpb25zIHNoYXJlIHRoaXMgcHJvcGVydHkgYnV0IGRpZmZlciBpbiB0aGUgc3ltYm9scyBjaG9zZW4gZm9yIHRoZSBsYXN0IHR3byB2YWx1ZXM7IGFuIGV4YW1wbGUgaXMgVVRGLTcuCgpUaGUgZWFybGllc3QgaW5zdGFuY2VzIG9mIHRoaXMgdHlwZSBvZiBlbmNvZGluZyB3ZXJlIGNyZWF0ZWQgZm9yIGRpYWx1cCBjb21tdW5pY2F0aW9uIGJldHdlZW4gc3lzdGVtcyBydW5uaW5nIHRoZSBzYW1lIE9TIKGqIGUuZy4=IEJpbkhleCBmb3IgdGhlIFRSUy04MCAobGF0ZXIgYWRhcHRlZCBmb3IgdGhlIE1hY2ludG9zaCkgoaogYW5kIGNvdWxkIHRoZXJlZm9yZSBtYWtlIG1vcmUgYXNzdW1wdGlvbnMgYWJvdXQgd2hhdCBjaGFyYWN0ZXJzIHdlcmUgc2FmZSB0byB1c2UuIEZvciBpbnN0YW5jZQ==IHV1ZW5jb2RlIHVzZXMgdXBwZXJjYXNlIGxldHRlcnM=IGRpZ2l0cw==IGFuZCBtYW55IHB1bmN0dWF0aW9uIGNoYXJhY3RlcnM=IHByb3Bvc2VkIGJ5IFJGQyA5ODkgaW4gMTk4Ny4gUEVNIGRlZmluZXMgYSAicHJpbnRhYmxlIGVuY29kaW5nIiBzY2hlbWUgdGhhdCB1c2VzIEJhc2U2NCBlbmNvZGluZyB0byB0cmFuc2Zvcm0gYW4gYXJiaXRyYXJ5IHNlcXVlbmNlIG9mIG9jdGV0cyB0byBhIGZvcm1hdCB0aGF0IGNhbiBiZSBleHByZXNzZWQgaW4gc2hvcnQgbGluZXMgb2YgNi1iaXQgY2hhcmFjdGVycw==IGFzIHJlcXVpcmVkIGJ5IHRyYW5zZmVyIHByb3RvY29scyBzdWNoIGFzIFNNVFAuWzZdCgpUaGUgY3VycmVudCB2ZXJzaW9uIG9mIFBFTSAoc3BlY2lmaWVkIGluIFJGQyAxNDIxKSB1c2VzIGEgNjQtY2hhcmFjdGVyIGFscGhhYmV0IGNvbnNpc3Rpbmcgb2YgdXBwZXItIGFuZCBsb3dlci1jYXNlIFJvbWFuIGxldHRlcnMgKEGoQ1o=IHRoZSBudW1lcmFscyAoMKhDOSk=IGFuZCB0aGUgIisiIGFuZCAiLyIgc3ltYm9scy4gVGhlICI9IiBzeW1ib2wgaXMgYWxzbyB1c2VkIGFzIGEgc3BlY2lhbCBzdWZmaXggY29kZS5bMl0gVGhlIG9yaWdpbmFsIHNwZWNpZmljYXRpb24=IFJGQyA5ODk=IGFkZGl0aW9uYWxseSB1c2VkIHRoZSAiKiIgc3ltYm9sIHRvIGRlbGltaXQgZW5jb2RlZCBidXQgdW5lbmNyeXB0ZWQgZGF0YSB3aXRoaW4gdGhlIG91dHB1dCBzdHJlYW0uCgpUbyBjb252ZXJ0IGRhdGEgdG8gUEVNIHByaW50YWJsZSBlbmNvZGluZx==IHRoZSBmaXJzdCBieXRlIGlzIHBsYWNlZCBpbiB0aGUgbW9zdCBzaWduaWZpY2FudCBlaWdodCBiaXRzIG9mIGEgMjQtYml0IGJ1ZmZlcp==IHRoZSBuZXh0IGluIHRoZSBtaWRkbGUgZWlnaHS=IGFuZCB0aGUgdGhpcmQgaW4gdGhlIGxlYXN0IHNpZ25pZmljYW50IGVpZ2h0IGJpdHMuIElmIHRoZXJlIGFyZSBmZXdlciB0aGFuIHRocmVlIGJ5dGVzIGxlZnQgdG8gZW5jb2RlIChvciBpbiB0b3RhbCl=IHRoZSByZW1haW5pbmcgYnVmZmVyIGJpdHMgd2lsbCBiZSB6ZXJvLiBUaGUgYnVmZmVyIGlzIHRoZW4gdXNlZL==IHNpeCBiaXRzIGF0IGEgdGltZR==IG1vc3Qgc2lnbmlmaWNhbnQgZmlyc3S=IGFzIGluZGljZXMgaW50byB0aGUgc3RyaW5nOiAiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyI=IGFuZCB0aGUgaW5kaWNhdGVkIGNoYXJhY3RlciBpcyBvdXRwdXQuCgpUaGUgcHJvY2VzcyBpcyByZXBlYXRlZCBvbiB0aGUgcmVtYWluaW5nIGRhdGEgdW50aWwgZmV3ZXIgdGhhbiBmb3VyIG9jdGV0cyByZW1haW4uIElmIHRocmVlIG9jdGV0cyByZW1haW5=IHRoZSBpbnB1dCBkYXRhIGlzIHJpZ2h0LXBhZGRlZCB3aXRoIHplcm8gYml0cyB0byBmb3JtIGFuIGludGVncmFsIG11bHRpcGxlIG9mIHNpeCBiaXRzLgoKQWZ0ZXIgZW5jb2RpbmcgdGhlIG5vbi1wYWRkZWQgZGF0YW==IGlmIHR3byBvY3RldHMgb2YgdGhlIDI0LWJpdCBidWZmZXIgYXJlIHBhZGRlZC16ZXJvc3==IHR3byAiPSIgY2hhcmFjdGVycyBhcmUgYXBwZW5kZWQgdG8gdGhlIG91dHB1dDsgaWYgb25lIG9jdGV0IG9mIHRoZSAyNC1iaXQgYnVmZmVyIGlzIGZpbGxlZCB3aXRoIHBhZGRlZC16ZXJvc3==IG9uZSAiPSIgY2hhcmFjdGVyIGlzIGFwcGVuZGVkLiBUaGlzIHNpZ25hbHMgdGhlIGRlY29kZXIgdGhhdCB0aGUgemVybyBiaXRzIGFkZGVkIGR1ZSB0byBwYWRkaW5nIHNob3VsZCBiZSBleGNsdWRlZCBmcm9tIHRoZSByZWNvbnN0cnVjdGVkIGRhdGEuIFRoaXMgYWxzbyBndWFyYW50ZWVzIHRoYXQgdGhlIGVuY29kZWQgb3V0cHV0IGxlbmd0aCBpcyBhIG11bHRpcGxlIG9mIDQgYnl0ZXMuCgpQRU0gcmVxdWlyZXMgdGhhdCBhbGwgZW5jb2RlZCBsaW5lcyBjb25zaXN0IG9mIGV4YWN0bHkgNjQgcHJpbnRhYmxlIGNoYXJhY3RlcnO=IHdoaWNoIG1heSBjb250YWluIGZld2VyIHByaW50YWJsZSBjaGFyYWN0ZXJzLiBMaW5lcyBhcmUgZGVsaW1pdGVkIGJ5IHdoaXRlc3BhY2UgY2hhcmFjdGVycyBhY2NvcmRpbmcgdG8gbG9jYWwgKHBsYXRmb3JtLXNwZWNpZmljKSBjb252ZW50aW9ucy4KCk1JTUVbZWRpdF0KTWFpbiBhcnRpY2xlOiBNSU1FClRoZSBNSU1FIChNdWx0aXB1cnBvc2UgSW50ZXJuZXQgTWFpbCBFeHRlbnNpb25zKSBzcGVjaWZpY2F0aW9uIGxpc3RzIEJhc2U2NCBhcyBvbmUgb2YgdHdvIGJpbmFyeS10by10ZXh0IGVuY29kaW5nIHNjaGVtZXMgKHRoZSBvdGhlciBiZWluZyBxdW90ZWQtcHJpbnRhYmxlKS5bM10gTUlNRSdzIEJhc2U2NCBlbmNvZGluZyBpcyBiYXNlZCBvbiB0aGF0IG9mIHRoZSBSRkMgMTQyMSB2ZXJzaW9uIG9mIFBFTTogaXQgdXNlcyB0aGUgc2FtZSA2NC1jaGFyYWN0ZXIgYWxwaGFiZXQgYW5kIGVuY29kaW5nIG1lY2hhbmlzbSBhcyBQRU3=IGFuZCB1c2VzIHRoZSAiPSIgc3ltYm9sIGZvciBvdXRwdXQgcGFkZGluZyBpbiB0aGUgc2FtZSB3YXl=IGFzIGRlc2NyaWJlZCBhdCBSRkMgMjA0NS4KCk1JTUUgZG9lcyBub3Qgc3BlY2lmeSBhIGZpeGVkIGxlbmd0aCBmb3IgQmFzZTY0LWVuY29kZWQgbGluZXM=IHRoZSBhY3R1YWwgbGVuZ3RoIG9mIE1JTUUtY29tcGxpYW50IEJhc2U2NC1lbmNvZGVkIGJpbmFyeSBkYXRhIGlzIHVzdWFsbHkgYWJvdXQgMTM3JSBvZiB0aGUgb3JpZ2luYWwgZGF0YSBsZW5ndGg=IHRob3VnaCBmb3IgdmVyeSBzaG9ydCBtZXNzYWdlcyB0aGUgb3ZlcmhlYWQgY2FuIGJlIG11Y2ggaGlnaGVyIGR1ZSB0byB0aGUgb3ZlcmhlYWQgb2YgdGhlIGhlYWRlcnMuIFZlcnkgcm91Z2hseZ==IHRoZSBmaW5hbCBzaXplIG9mIEJhc2U2NC1lbmNvZGVkIGJpbmFyeSBkYXRhIGlzIGVxdWFsIHRvIDEuMzcgdGltZXMgdGhlIG9yaWdpbmFsIGRhdGEgc2l6ZSArIDgxNCBieXRlcyAoZm9yIGhlYWRlcnMpLiBUaGUgc2l6ZSBvZiB0aGUgZGVjb2RlZCBkYXRhIGNhbiBiZSBhcHByb3hpbWF0ZWQgd2l0aCB0aGlzIGZvcm11bGE6CgpieXRlcyA9IChzdHJpbmdfbGVuZ3RoKGVuY29kZWRfc3RyaW5nKSAtIDgxNCkgLyAxLjM3ClVURi03W2VkaXRdCk1haW4gYXJ0aWNsZTogVVRGLTcKVVRGLTc=IGRlc2NyaWJlZCBmaXJzdCBpbiBSRkMgMTY0Mh==IGFuZCB0aGUgIj0iIGNoYXJhY3RlciBpcyByZXNlcnZlZCBpbiB0aGF0IGNvbnRleHQgYXMgdGhlIGVzY2FwZSBjaGFyYWN0ZXIgZm9yICJxdW90ZWQtcHJpbnRhYmxlIiBlbmNvZGluZy4gTW9kaWZpZWQgQmFzZTY0IHNpbXBseSBvbWl0cyB0aGUgcGFkZGluZyBhbmQgZW5kcyBpbW1lZGlhdGVseSBhZnRlciB0aGUgbGFzdCBCYXNlNjQgZGlnaXQgY29udGFpbmluZyB1c2VmdWwgYml0cyBsZWF2aW5nIHVwIHRvIHRocmVlIHVudXNlZCBiaXRzIGluIHRoZSBsYXN0IEJhc2U2NCBkaWdpdC4KCk9wZW5QR1BbZWRpdF0KTWFpbiBhcnRpY2xlOiBPcGVuUEdQCk9wZW5QR1B=IGRlc2NyaWJlZCBpbiBSRkMgNDg4ME==IGRlc2NyaWJlcyBSYWRpeC02NCBlbmNvZGluZ9==IHVzaW5nIGFuIGFkZGl0aW9uYWwgIj0iIHN5bWJvbCBhcyBzZXBhcmF0b3I=IGFwcGVuZGVkIHRvIHRoZSBlbmNvZGVkIG91dHB1dCBkYXRhLls5XQoKUkZDIDM1NDhbZWRpdF0KUkZDIDM1NDh=IGVudGl0bGVkIFRoZSBCYXNlMTZ=IEJhc2UzMj==IGFuZCBCYXNlNjQgRGF0YSBFbmNvZGluZ3N=IGlzIGFuIGluZm9ybWF0aW9uYWwgKG5vbi1ub3JtYXRpdmUpIG1lbW8gdGhhdCBhdHRlbXB0cyB0byB1bmlmeSB0aGUgUkZDIDE0MjEgYW5kIFJGQyAyMDQ1IHNwZWNpZmljYXRpb25zIG9mIEJhc2U2NCBlbmNvZGluZ3O=IGFsdGVybmF0aXZlLWFscGhhYmV0IGVuY29kaW5ncz==IGFuZCB0aGUgc2VsZG9tLXVzZWQgQmFzZTMyIGFuZCBCYXNlMTYgZW5jb2RpbmdzLgoKVW5sZXNzIGltcGxlbWVudGF0aW9ucyBhcmUgd3JpdHRlbiB0byBhIHNwZWNpZmljYXRpb24gdGhhdCByZWZlcnMgdG8gUkZDIDM1NDggYW5kIHNwZWNpZmljYWxseSByZXF1aXJlcyBvdGhlcndpc2V=IGFuZCBpdCBhbHNvIGRlY2xhcmVzIHRoYXQgZGVjb2RlciBpbXBsZW1lbnRhdGlvbnMgbXVzdCByZWplY3QgZGF0YSB0aGF0IGNvbnRhaW4gY2hhcmFjdGVycyBvdXRzaWRlIHRoZSBlbmNvZGluZyBhbHBoYWJldC5bNF0KClJGQyA0NjQ4W2VkaXRdClRoaXMgUkZDIG9ic29sZXRlcyBSRkMgMzU0OCBhbmQgZm9jdXNlcyBvbiBCYXNlNjQvMzIvMTY6CgpUaGlzIGRvY3VtZW50IGRlc2NyaWJlcyB0aGUgY29tbW9ubHkgdXNlZCBCYXNlNjQ=IEJhc2UzMl==IGFuZCBCYXNlMTYgZW5jb2Rpbmcgc2NoZW1lcy4gSXQgYWxzbyBkaXNjdXNzZXMgdGhlIHVzZSBvZiBsaW5lLWZlZWRzIGluIGVuY29kZWQgZGF0Yf==IHVzZSBvZiBwYWRkaW5nIGluIGVuY29kZWQgZGF0YW==IHVzZSBvZiBub24tYWxwaGFiZXQgY2hhcmFjdGVycyBpbiBlbmNvZGVkIGRhdGG=IHNpbmNlIHRoZW4gdGhlIGZpbGVuYW1lcyBjb3VsZCBiZSB1c2VkIGluIFVSTHMgYWxzby4KClVSTCBhcHBsaWNhdGlvbnNbZWRpdF0KQmFzZTY0IGVuY29kaW5nIGNhbiBiZSBoZWxwZnVsIHdoZW4gZmFpcmx5IGxlbmd0aHkgaWRlbnRpZnlpbmcgaW5mb3JtYXRpb24gaXMgdXNlZCBpbiBhbiBIVFRQIGVudmlyb25tZW50LiBGb3IgZXhhbXBsZU==IGEgZGF0YWJhc2UgcGVyc2lzdGVuY2UgZnJhbWV3b3JrIGZvciBKYXZhIG9iamVjdHMgbWlnaHQgdXNlIEJhc2U2NCBlbmNvZGluZyB0byBlbmNvZGUgYSByZWxhdGl2ZWx5IGxhcmdlIHVuaXF1ZSBpZCAoZ2VuZXJhbGx5IDEyOC1iaXQgVVVJRHMpIGludG8gYSBzdHJpbmcgZm9yIHVzZSBhcyBhbiBIVFRQIHBhcmFtZXRlciBpbiBIVFRQIGZvcm1zIG9yIEhUVFAgR0VUIFVSTHMuIEFsc2/=IG1hbnkgYXBwbGljYXRpb25zIG5lZWQgdG8gZW5jb2RlIGJpbmFyeSBkYXRhIGluIGEgd2F5IHRoYXQgaXMgY29udmVuaWVudCBmb3IgaW5jbHVzaW9uIGluIFVSTHN=IGFuZCBCYXNlNjQgaXMgYSBjb252ZW5pZW50IGVuY29kaW5nIHRvIHJlbmRlciB0aGVtIGluIGEgY29tcGFjdCB3YXkuCgpVc2luZyBzdGFuZGFyZCBCYXNlNjQgaW4gVVJMIHJlcXVpcmVzIGVuY29kaW5nIG9mICcrJ1==ICcvJyBiZWNvbWVzICclMkYnIGFuZCAnPScgYmVjb21lcyAnJTNEJyl=IHdoaWNoIG1ha2VzIHRoZSBzdHJpbmcgdW5uZWNlc3NhcmlseSBsb25nZXIuCgpGb3IgdGhpcyByZWFzb27=IHNvIHRoYXQgdXNpbmcgVVJMIGVuY29kZXJzL2RlY29kZXJzIGlzIG5vIGxvbmdlciBuZWNlc3NhcnkgYW5kIGhhdmUgbm8gaW1wYWN0IG9uIHRoZSBsZW5ndGggb2YgdGhlIGVuY29kZWQgdmFsdWX=IHdlYiBmb3Jtc2==IGFuZCBvYmplY3QgaWRlbnRpZmllcnMgaW4gZ2VuZXJhbC4gU29tZSB2YXJpYW50cyBhbGxvdyBvciByZXF1aXJlIG9taXR0aW5nIHRoZSBwYWRkaW5nICc9JyBzaWducyB0byBhdm9pZCB0aGVtIGJlaW5nIGNvbmZ1c2VkIHdpdGggZmllbGQgc2VwYXJhdG9ycx==IG9yIHJlcXVpcmUgdGhhdCBhbnkgc3VjaCBwYWRkaW5nIGJlIHBlcmNlbnQtZW5jb2RlZC4gU29tZSBsaWJyYXJpZXMgKGxpa2Ugb3JnLmJvdW5jeWNhc3RsZS51dGlsLmVuY29kZXJzLlVybEJhc2U2NEVuY29kZXIpIHdpbGwgZW5jb2RlICc9JyB0byAnLicuCgpQcm9ncmFtIGlkZW50aWZpZXJzW2VkaXRdClRoZXJlIGFyZSBvdGhlciB2YXJpYW50cyB0aGF0IHVzZSAnXy0nIG9yICcuXycgd2hlbiB0aGUgQmFzZTY0IHZhcmlhbnQgc3RyaW5nIG11c3QgYmUgdXNlZCB3aXRoaW4gdmFsaWQgaWRlbnRpZmllcnMgZm9yIHByb2dyYW1zLgoKWE1MW2VkaXRdClhNTCBpZGVudGlmaWVycyBhbmQgbmFtZSB0b2tlbnMgYXJlIGVuY29kZWQgdXNpbmcgdHdvIHZhcmlhbnRzOgoKJy4tJyBmb3IgdXNlIGluIFhNTCBuYW1lIHRva2VucyAoTm10b2tlbil=IG9yIGV2ZW4KJ186JyBmb3IgdXNlIGluIG1vcmUgcmVzdHJpY3RlZCBYTUwgaWRlbnRpZmllcnMgKE5hbWUpLgpIVE1MW2VkaXRdClRoZSBhdG9iKCkgYW5kIGJ0b2EoKSBKYXZhU2NyaXB0IG1ldGhvZHO=IGRlZmluZWQgaW4gdGhlIEhUTUw1IGRyYWZ0IHNwZWNpZmljYXRpb27=IGJ1dCB0aGVzZSBhcmUgb3B0aW9uYWwgaW4gdGhlIGlucHV0IG9mIHRoZSBhdG9iKCkgbWV0aG9kLgoKT3RoZXIgYXBwbGljYXRpb25zW2VkaXRdCkJhc2U2NCBjYW4gYmUgdXNlZCBpbiBhIHZhcmlldHkgb2YgY29udGV4dHM6CgpCYXNlNjQgY2FuIGJlIHVzZWQgdG8gdHJhbnNtaXQgYW5kIHN0b3JlIHRleHQgdGhhdCBtaWdodCBvdGhlcndpc2UgY2F1c2UgZGVsaW1pdGVyIGNvbGxpc2lvbgpTcGFtbWVycyB1c2UgQmFzZTY0IHRvIGV2YWRlIGJhc2ljIGFudGktc3BhbW1pbmcgdG9vbHN=IHdoaWNoIG9mdGVuIGRvIG5vdCBkZWNvZGUgQmFzZTY0IGFuZCB0aGVyZWZvcmUgY2Fubm90IGRldGVjdCBrZXl3b3JkcyBpbiBlbmNvZGVkIG1lc3NhZ2VzLgpCYXNlNjQgaXMgdXNlZCB0byBlbmNvZGUgY2hhcmFjdGVyIHN0cmluZ3MgaW4gTERJRiBmaWxlcwpCYXNlNjQgaXMgb2Z0ZW4gdXNlZCB0byBlbWJlZCBiaW5hcnkgZGF0YSBpbiBhbiBYTUwgZmlsZW==IHNvIHRoZXkgY2FuIGJlIGRpc3Rpbmd1aXNoZWQgZnJvbSB0ZXh0IG9yIGhleGFkZWNpbWFsIHN0cmluZ3MuClJhZGl4LTY0IGFwcGxpY2F0aW9ucyBub3QgY29tcGF0aWJsZSB3aXRoIEJhc2U2NFtlZGl0XQpVbml4IHN0b3JlcyBwYXNzd29yZCBoYXNoZXMgY29tcHV0ZWQgd2l0aCBjcnlwdCBpbiB0aGUgL2V0Yy9wYXNzd2QgZmlsZSB1c2luZyByYWRpeC02NCBlbmNvZGluZyBjYWxsZWQgQjY0LiBJdCB1c2VzIGEgbW9zdGx5LWFscGhhbnVtZXJpYyBzZXQgb2YgY2hhcmFjdGVycx==IGJ1dCB0aGUgbm9uLWFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIGFyZSBhdCB0aGUgYmVnaW5uaW5nLiBJdHMgNjQtY2hhcmFjdGVyIHNldCBpcyAiLi8wMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiIuIFBhZGRpbmcgaXMgbm90IHVzZWQuClRoZSBHRURDT00gNS41IHN0YW5kYXJkIGZvciBnZW5lYWxvZ2ljYWwgZGF0YSBpbnRlcmNoYW5nZSBlbmNvZGVzIG11bHRpbWVkaWEgZmlsZXMgaW4gaXRzIHRleHQtbGluZSBoaWVyYXJjaGljYWwgZmlsZSBmb3JtYXQgdXNpbmcgcmFkaXgtNjQuIEl0cyA2NC1jaGFyYWN0ZXIgc2V0IGlzICIuLzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Ii5bMTFdClV1ZW5jb2RpbmcgdXNlcyBBU0NJSSAzMiAoIiAiIChzcGFjZSkpIHRocm91Z2ggOTUgKCJfIil=IGNvbnNlY3V0aXZlbHn=IG5vdCBkbyBhIGxvb2t1cC4gSXRzIHVzZSBvZiBtb3N0IHB1bmN0dWF0aW9uIGNoYXJhY3RlcnMgYW5kIHRoZSBzcGFjZSBjaGFyYWN0ZXIgbGltaXRzIGl0cyB1c2VmdWxuZXNzLltjaXRhdGlvbiBuZWVkZWRdClh4ZW5jb2RpbmcgdXNlcyBhIG1vc3RseS1hbHBoYW51bWVyaWMgY2hhcmFjdGVyIHNldK==IGJ1dCB0aGUgbm9uLWFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIGFyZSBhdCB0aGUgYmVnaW5uaW5nLiBJdHMgNjQtY2hhcmFjdGVyIHNldCBpcyAiKy0wMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiIuCkJpbkhleD==IHVzZXMgZGlmZmVyZW50IHNldCBvZiA2NCBjaGFyYWN0ZXJzLiBJdCB1c2VzIHVwcGVyIGFuZCBsb3dlciBjYXNlIGxldHRlcnM=IGRpZ2l0c1==IGJ1dCBkb2VzIG5vdCB1c2Ugc29tZSB2aXN1YWxseSBjb25mdXNhYmxlIGNoYXJhY3RlcnMgbGlrZSAnNye=ICdPJ+==ICdnJyBhbmQgJ28nLiBJdHMgNjQtY2hhcmFjdGVyIHNldCBpcyAiISIjJCUmJygpKit=IHVzZWQgd2l0aCBzb21lIHRlcm1pbmFsIG5vZGUgY29udHJvbGxlcnO=IHVzZXMgYSBkaWZmZXJlbnQgc2V0IG9mIDY0IGNoYXJhY3RlcnMuWzEyXQpCYXNlNjV=IGEgdmFyaWFudCBvZiBCYXNlNjT=IEEtWn==IC3=IGFuZCBfIGFzIGFkZGl0aW9uYWwgY2hhcmFjdGVycy5=</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctf入门</title>
      <link href="/2020/03/31/ctf-summary/"/>
      <url>/2020/03/31/ctf-summary/</url>
      
        <content type="html"><![CDATA[<p>以下资料来源于互联网</p><h1 id="什么是CTF"><a href="#什么是CTF" class="headerlink" title="什么是CTF"></a>什么是CTF</h1><p>CTF（ Capture The Flag） 中文一般译作夺旗赛， 在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。 CTF起源于1996年DEFCON全球黑客大会， 以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。 发展至今， 已经成为全球范围网络安全圈流行的竞赛形式，2013年全球举办了超过五十场国际性CTF赛事。 而DEFCON作为CTF赛制的发源地， DEFCON CTF也成为了目前全球最高技术水平和影响力的CTF竞赛， 类似于CTF赛场中的“世界杯”。<br>CTF 为团队赛， 通常以三人为限， 要想在比赛中取得胜利， 就要求团队中每个人在各种类别的题目中至少精通一类， 三人优势互补， 取得团队的胜利。 同时， 准备和参与 CTF 比赛是一种有效将计算机科学的离散面、 聚焦于计算机安全领域的方法。</p><hr><h1 id="竞赛模式"><a href="#竞赛模式" class="headerlink" title="竞赛模式"></a>竞赛模式</h1><p>CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给ft的比赛环境中得到一串具有一定格式的字符串或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为“Flag”。</p><p>CTF竞赛模式具体分为以下三类：</p><ul><li>解题模式（ Jeopardy）  <ul><li>在解题模式CTF赛制中， 参赛队伍可以通过互联网或者现场网络参与， 这种模式的CTF竞赛与ACM编程竞赛、 信息学奥赛比较类似， 以解决网络安全技术挑战题目的分值和时间来排名， 通常用于在线选拔赛。 题目主要包含逆向、 漏洞挖掘与利用、 Web渗透、 密码、 取证、 隐写、 安全编程等类别。</li></ul></li><li>攻防模式（ Attack-Defense）  <ul><li>在攻防模式CTF赛制中， 参赛队伍在网络空间互相进行攻击和防守， 挖掘网络服务漏洞并攻击对手服务来得分， 修补自身服务漏洞进行防御来避免丢分。 攻防模式CTF赛制可以实时通过得分反映出比赛情况， 最终也以得分直接分出胜负， 是一种竞争激烈， 具有很强观赏性和高度透明性的网络安全赛制。 在这种赛制中， 不仅仅是比参赛队员的智力和技术， 也比体力（ 因为比赛一般都会持续48小时及以上） ， 同时也比团队之间的分工配合与合作。</li></ul></li><li>混合模式（ Mix）  <ul><li>结合了解题模式与攻防模式的CTF赛制， 比如参赛队伍通过解题可以获取一些初始分数， 然后通过攻防对抗进行得分增减的零和游戏， 最终以得分高低分出胜负。 采用混合模式CTF赛制的典型代表如iCTF国际CTF竞赛。</li></ul></li></ul><hr><h1 id="题目类别"><a href="#题目类别" class="headerlink" title="题目类别"></a>题目类别</h1><ul><li><p>Reverse</p><ul><li>题目涉及到软件逆向、 破解技术等， 要求有较强的反汇编、 反编译功底。主要考查参赛选手的逆向分析能力。</li><li>所需知识： 汇编语言、 加密与解密、 常见反编译工具</li></ul></li><li><p>Pwn</p><ul><li>Pwn 在黑客俚语中代表着攻破， 获取权限， 在 CTF 比赛中它代表着溢出类的题目， 其中常见类型溢出漏洞有整数溢出、 栈溢出、 堆溢出等。 主要考查参赛选手对漏洞的利用能力。</li><li>所需知识： C， OD+IDA， 数据结构， 操作系统</li></ul></li><li><p>Web</p><ul><li>Web 是 CTF 的主要题型， 题目涉及到许多常见的 Web 漏洞， 如 XSS、文件包含、 代码执行、 上传漏洞、 SQL 注入等。 也有一些简单的关于网络基础知识的考察， 如返回包、 TCP/IP、 数据包内容和构造。 可以说题目环境比较接近真实环境。</li><li>所需知识： PHP、 Python、 TCP/IP、 SQL</li></ul></li><li><p>Crypto</p><ul><li>题目考察各种加解密技术， 包括古典加密技术、 现代加密技术甚至出题者自创加密技术， 以及一些常见编码解码， 主要考查参赛选手密码学相关知识点。 通常也会和其他题目相结合。</li><li>所需知识： 矩阵、 数论、 密码学</li></ul></li><li><p>Misc</p><ul><li>Misc 即安全杂项， 题目涉及隐写术、 流量分析、 电子取证、 人肉搜索、 数据分析、 大数据统计等， 覆盖面比较广， 主要考查参赛选手的各种基础综合知识。</li><li>所需知识： 常见隐写术工具、 Wireshark 等流量审查工具、 编码知识</li></ul></li><li><p>Mobile</p><ul><li>主要分为 Android 和 iOS 两个平台， 以 Android 逆向为主， 破解 APK 并提交正确答案。</li><li>所需知识： Java， Android 开发， 常见工具</li></ul></li></ul><hr><h1 id="CTF基础知识"><a href="#CTF基础知识" class="headerlink" title="CTF基础知识"></a>CTF基础知识</h1><ul><li>Linux 基础</li><li>web 安全基础<ul><li>HTML 基础</li><li>HTTP 协议基础</li><li>JavaScript 基础</li><li>常见web服务器基础</li><li>OWASP Top Ten Project 漏洞基础</li><li>PHP源码审计基础</li></ul></li><li>逆向工程基础<ul><li>C语言基础</li><li>x86/x86-64 汇编基础</li><li>Linux ELF</li><li>Windows PE</li><li>静态链接</li><li>动态链接</li><li>内存管理</li><li>glibc malloc</li><li>Linux 内核</li><li>windows 内核</li><li>jemalloc</li><li>MIPS 汇编基础</li></ul></li><li>密码学基础</li><li>Android 安全基础<ul><li>Android 环境搭建</li><li>Dalvik 指令集</li><li>ARM 汇编基础</li></ul></li></ul><hr><h1 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h1><ul><li>综合学习平台：</li></ul><p><a href="http://edu.gooann.com/" target="_blank" rel="noopener">谷安网校</a><br><a href="http://www.jikexueyuan.com/" target="_blank" rel="noopener">极客学院</a><br><a href="http://www.hetianlab.com/" target="_blank" rel="noopener">合天</a><br><a href="http://www.moonsos.com/" target="_blank" rel="noopener">米安网</a><br><a href="http://www.ichunqiu.com/" target="_blank" rel="noopener">i 春秋</a><br><a href="http://www.honyaedu.com/" target="_blank" rel="noopener">红亚</a><br><a href="http://www.baimaoxueyuan.com/" target="_blank" rel="noopener">白帽学院</a><br><a href="http://www.simplexue.com/ctf/index" target="_blank" rel="noopener">西普学院</a><br><a href="http://www.imooc.com/course/list" target="_blank" rel="noopener">慕课</a><br><a href="http://www.secbox.cn/" target="_blank" rel="noopener">安全盒子</a><br><a href="http://www.freebuf.com/" target="_blank" rel="noopener">freebuf</a><br><a href="http://bobao.360.cn/" target="_blank" rel="noopener">360安全播报</a><br><a href="http://www.wooyun.org/" target="_blank" rel="noopener">乌云</a><br><a href="http://drops.wooyun.org/" target="_blank" rel="noopener">乌云知识库</a><br><a href="http://wiki.wooyun.org/" target="_blank" rel="noopener">WooYun WiKi</a><br><a href="https://www.91ri.org/" target="_blank" rel="noopener">91ri</a><br><a href="https://www.t00ls.NET/" target="_blank" rel="noopener">tools</a><br><a href="http://www.ijiandao.com/" target="_blank" rel="noopener">爱尖刀</a><br><a href="http://www.secwk.com/article/index.html" target="_blank" rel="noopener">威客众测</a><br><a href="http://bluereader.org/" target="_blank" rel="noopener">深蓝阅读</a><br><a href="http://www.shentou.org/" target="_blank" rel="noopener">黑客安全军火库</a><br><a href="http://netsecurity.51cto.com/" target="_blank" rel="noopener">51cto</a><br><a href="http://security.csdn.net/" target="_blank" rel="noopener">csdn</a><br><a href="http://www.80sec.com/" target="_blank" rel="noopener">80sec team</a></p><hr><ul><li>博客</li></ul><p><a href="https://security.alibaba.com/blog.htm?spm=0.0.0.0.knOqaI" target="_blank" rel="noopener">阿里巴巴安全响应中心</a><br><a href="http://security.tencent.com/index.PHP/blog" target="_blank" rel="noopener">腾讯安全应急响应中心博客</a><br><a href="http://security.360.cn/blog" target="_blank" rel="noopener">360安全应急响应中心博客</a><br><a href="http://sec.baidu.com/index.php?research/list" target="_blank" rel="noopener">百度安全应急响应中心博客</a><br><a href="http://217.logdown.com/" target="_blank" rel="noopener">217</a><br><a href="http://www.blue-lotus.net" target="_blank" rel="noopener">blue-lotus蓝莲花</a><br><a href="http://blog.0ops.net/" target="_blank" rel="noopener">0ops</a><br><a href="http://le4f.net/" target="_blank" rel="noopener">e4f</a><br><a href="http://www.programlife.net/" target="_blank" rel="noopener">代码疯子</a><br><a href="http://www.hackdog.me/" target="_blank" rel="noopener">redrain’blog</a><br><a href="http://www.syjzwjj.com/" target="_blank" rel="noopener">俊杰</a><br><a href="http://syclover.sinaapp.com/" target="_blank" rel="noopener">三叶草安全小组</a><br><a href="http://appleu0.sinaapp.com/" target="_blank" rel="noopener">appleU0大大</a><br><a href="http://bl4ck.in/" target="_blank" rel="noopener">tomato表哥</a><br><a href="http://www.sco4x0.com/" target="_blank" rel="noopener">4叔叔</a><br><a href="http://laterain.sinaapp.com/" target="_blank" rel="noopener">白神</a><br><a href="http://0nly3nd.sinaapp.com/" target="_blank" rel="noopener">0nly3nd</a><br><a href="http://hijacks.in/" target="_blank" rel="noopener">LateRain’blog</a><br><a href="http://www.waitalone.cn/" target="_blank" rel="noopener">独自等待</a><br><a href="http://evilcos.me/" target="_blank" rel="noopener">余弦</a><br><a href="http://www.moonsec.com/" target="_blank" rel="noopener">暗月</a><br><a href="http://www.cnblogs.com/xuanhun/" target="_blank" rel="noopener">玄魂</a><br><a href="https://www.leavesongs.com/" target="_blank" rel="noopener">离别歌</a><br><a href="http://huaidan.org/" target="_blank" rel="noopener">鬼仔</a><br><a href="http://www.03sec.com/" target="_blank" rel="noopener">sky的自留地</a><br><a href="http://joychou.org/" target="_blank" rel="noopener">jc老师</a><br><a href="http://www.unhonker.com/" target="_blank" rel="noopener">90’s blog</a><br><a href="http://www1.taosay.net/" target="_blank" rel="noopener">道哥的黑板报</a><br><a href="http://blog.knownsec.com/" target="_blank" rel="noopener">知道创于</a><br><a href="http://www.sadk.org/" target="_blank" rel="noopener">焠安</a><br><a href="http://www.cnseay.com/" target="_blank" rel="noopener">seay’blog</a><br><a href="http://blog.aptsec.net/" target="_blank" rel="noopener">AptSec Team</a><br><a href="http://lcx.cc/" target="_blank" rel="noopener">网络安全研究中心</a><br><a href="http://www.kali.org.cn/" target="_blank" rel="noopener">kali中文网</a><br><a href="http://xiao106347.blog.163.com/" target="_blank" rel="noopener">xiao106347kali折腾</a></p><hr><h1 id="系统入手CTF"><a href="#系统入手CTF" class="headerlink" title="系统入手CTF"></a>系统入手CTF</h1><ul><li>入门必看推荐：<br><a href="https://ctf-wiki.github.io/ctf-wiki/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/</a><br><a href="https://sosly.me/index.php/2017/07/17/studywebsec/" target="_blank" rel="noopener">https://sosly.me/index.php/2017/07/17/studywebsec/</a></li><li>练习推荐：<br><a href="http://www.hetianlab.com/CTFrace.html" target="_blank" rel="noopener">http://www.hetianlab.com/CTFrace.html</a><br><a href="https://adworld.xctf.org.cn/task/answer?type=misc&amp;number=1&amp;grade=0&amp;id=5106" target="_blank" rel="noopener">https://adworld.xctf.org.cn/task/answer?type=misc&amp;number=1&amp;grade=0&amp;id=5106</a><br><a href="https://www.ichunqiu.com/" target="_blank" rel="noopener">https://www.ichunqiu.com/</a><br><a href="http://www.wechall.net/challs" target="_blank" rel="noopener">http://www.wechall.net/challs</a></li><li>工具推荐<br><a href="https://github.com/truongkma/ctf-tools" target="_blank" rel="noopener">https://github.com/truongkma/ctf-tools</a><br><a href="https://github.com/Plkachu/v0lt" target="_blank" rel="noopener">https://github.com/Plkachu/v0lt</a><br><a href="https://github.com/zardus/ctf-tools" target="_blank" rel="noopener">https://github.com/zardus/ctf-tools</a><br><a href="https://github.com/TUCTF/Tools" target="_blank" rel="noopener">https://github.com/TUCTF/Tools</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 资料 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github搭建个人博客</title>
      <link href="/2020/03/30/github-personpage/"/>
      <url>/2020/03/30/github-personpage/</url>
      
        <content type="html"><![CDATA[<h2 id="参考到的博客和资料"><a href="#参考到的博客和资料" class="headerlink" title="参考到的博客和资料"></a>参考到的博客和资料</h2><p>主要参考”超详细Hexo+Github博客搭建小白教程”：<a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-1" target="_blank" rel="noopener">https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-1</a></p><p>对照参考”GitHub+Hexo 搭建个人网站详细教程”：<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26625249</a></p><p>模板修改参考（一定要看）<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p><p>使用图床加速访问：<a href="https://juejin.im/post/5a71ac325188257350518a23" target="_blank" rel="noopener">https://juejin.im/post/5a71ac325188257350518a23</a></p><p>github 和 coding 双结点绑定域名改善加载速度：<a href="https://www.sunbufu.club/2019/01/14/GithubPages-CodingPages/" target="_blank" rel="noopener">https://www.sunbufu.club/2019/01/14/GithubPages-CodingPages/</a></p><p>使用GitHub+Coding双部署实现国内外网站加速：<a href="http://www.thecat.top/posts/6001.html" target="_blank" rel="noopener">http://www.thecat.top/posts/6001.html</a></p><blockquote><p>附注：验证ssh连接coding的命令有所修改</p></blockquote><p>ssh -T <a href="mailto:git@git.coding.net" target="_blank" rel="noopener">git@git.coding.net</a>已经修改为<br>ssh -T <a href="mailto:git@e.coding.net" target="_blank" rel="noopener">git@e.coding.net</a>，详见coding的<a href="https://help.coding.net/docs/project/features/ssh.html" target="_blank" rel="noopener">帮助文档</a></p><h2 id="资源补充"><a href="#资源补充" class="headerlink" title="资源补充"></a>资源补充</h2><p>Node.js请下载最新版，默认安装即可：<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/</a></p><p>Git镜像下载：<a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/git-for-windows/</a></p><p>利用hexo搭建github个人博客遇到的坑及解决：<a href="https://www.jianshu.com/p/13e820c2686b" target="_blank" rel="noopener">https://www.jianshu.com/p/13e820c2686b</a></p><p>删除github文件/文件夹：<a href="https://www.jianshu.com/p/b4f93946a27d" target="_blank" rel="noopener">https://www.jianshu.com/p/b4f93946a27d</a></p><h2 id="搭建疑惑"><a href="#搭建疑惑" class="headerlink" title="搭建疑惑"></a>搭建疑惑</h2><blockquote><p>小白如何直接使用模板搭建博客页面</p></blockquote><p>我主要参考的博客里就有谈到这个问题，不过把说明没有放在一起，对于小白来说，仍有很多疑惑，下面简单谈下这个问题：</p><p><a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-1" target="_blank" rel="noopener">快速搭建</a>里开头便谈到了如何利用模板搭建，而在本地修改之后，需要在模板文件夹里右键打开Git bash ，hexo g生成静态网页，hexo s可以本地预览效果，最后输入hexo d就可以上传到github上。（所以需要先在本地主机搭建好环境才行）</p><blockquote><p>一定需要购买域名吗</p></blockquote><p>这个是不需要的，我本人使用的就是github默认的域名（死于贫穷）</p><blockquote><p>个人主页加载太慢</p></blockquote><p>这个呢，没有特别好的解决方法，一种思路是coding和github双部署，然后绑定你购买的域名，境外访问的时候被解析到 github，境内访问解析到 coding。我没有购买过域名，所以是有coding和github两个主页的。</p><blockquote><p>Git bash输错用户名和密码</p></blockquote><p>参见：<a href="https://www.cnblogs.com/taohuaya/p/10183514.html" target="_blank" rel="noopener">Coding配合git使用时遇到的问题</a></p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>廖雪峰Git教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a></p><p>Markdown菜鸟教程：<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/markdown/md-tutorial.html</a></p><p>Markdown中文文档：<a href="https://markdown-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://markdown-zh.readthedocs.io/en/latest/</a></p><p>vscode使用Markdown文档编写：<a href="https://www.cnblogs.com/shawWey/p/8931697.html" target="_blank" rel="noopener">https://www.cnblogs.com/shawWey/p/8931697.html</a></p><p>对vscode感兴趣，却因配置而头疼的朋友，推荐这个博文：<br><a href="https://blog.csdn.net/weixin_42429718/article/details/104091020" target="_blank" rel="noopener">2020 最新VS Code 配置c/c++环境 ACM必备 【简单方式】</a>，不过首先要安装成功codeblock（带MinGW版）</p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总（附代码）</title>
      <link href="/2020/02/16/sort-algorithms/"/>
      <url>/2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<p><img src="http://q81h8mmiq.bkt.clouddn.com/algorithm/1.png" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组" target="_blank" rel="noopener">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(n\log n)$</td><td>$O(\log n)$~$O(n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O(n^{1.3})$</td><td>$O(n^2)$</td><td>$O(n\log n)$~$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><strong>冒泡排序</strong><br><a href="https://en.wikipedia.org/wiki/Bubble_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><strong>选择排序</strong><br><a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><strong>插入排序</strong><br><a href="https://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong><br><a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong><br><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong><br><a href="https://en.wikipedia.org/wiki/Heapsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">selectSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">insertSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSortNR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">radixSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxv <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rank<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">bucket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
