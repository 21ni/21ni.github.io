<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git</title>
      <link href="/2020/05/11/git/"/>
      <url>/2020/05/11/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-使用指南"><a href="#Git-使用指南" class="headerlink" title="Git 使用指南"></a>Git 使用指南</h1><p>因为搭建博客的时候，用到了 Git，但实际上自己对 Git 还是一知半解。所以看了比较易懂的廖雪峰老师的 Git 教程，顺便做个笔记总结，方便之后查询。</p><h2 id="what-is-Git"><a href="#what-is-Git" class="headerlink" title="what is Git?"></a>what is Git?</h2><p>Git 是最流行的分布式版本控制系统，简单来说，就是管理不同人员对文本的修改记录，达到协同编辑的目的。  </p><h2 id="the-use-of-Git"><a href="#the-use-of-Git" class="headerlink" title="the use of Git"></a>the use of Git</h2><h3 id="create-repository"><a href="#create-repository" class="headerlink" title="create repository"></a>create repository</h3><p>版本库（repository）又名仓库，可以简单理解成一个目录，Git 负责跟踪每个文件的修改删除，并保存修改历史。</p><ol><li>创建一个空目录（GUI 操作也可以）</li></ol><pre class="line-numbers language-git"><code class="language-git">$ mkdir learngit$ cd learngit$ pwd/Users/michael/learngit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>初始化一个 Git 仓库</li></ol><p>使用 git init 命令</p><ol start="3"><li>添加文件到 Git 仓库，分两步：  </li></ol><p>使用命令 <code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；<br>使用命令 <code>git commit -m &lt;message&gt;</code>，完成。</p><h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><p><code>git status</code> 命令可以让我们时刻掌握仓库当前的状态，如：是否修改</p><p><code>git diff</code> 命令可以查看修改内容</p><h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><p>HEAD 指向的版本就是当前版本，因此，Git 允许我们在版本的历史之间穿梭，使用命令 <code>git reset --hard commit_id</code>。commit_id 就是版本号，并且不必写全，Git 会自动填全。</p><p>穿梭前，用 <code>git log</code> 可以查看提交历史，以便确定要回退到哪个版本，可以加上 <code>--pretty=oneline</code> 参数简化输出信息，得到的每一行开头的字符，是版本号。</p><p>要重返未来，用 <code>git reflog</code> 查看命令历史，以便确定要回到未来的哪个版本。</p><h3 id="Working-Directory-stage-and-Repository"><a href="#Working-Directory-stage-and-Repository" class="headerlink" title="Working Directory , stage and Repository"></a>Working Directory , stage and Repository</h3><p>用 <code>git add</code> 把文件添加进去，实际上就是把文件修改添加到暂存区（stage）；</p><p>用 <code>git commit</code> 提交更改，实际上就是把暂存区的所有内容提交到当前分支（master）。</p><p>注：只有使用 <code>git add</code>，将修改放到暂存区，使用 <code>git commit</code> 才有作用。<br>而协同编辑中还要引入远程库的概念，在此之前提到的所有操作都是在本地进行。</p><h3 id="unstage"><a href="#unstage" class="headerlink" title="unstage"></a>unstage</h3><p>场景 1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <code>git checkout -- file</code>。让这个文件回到最近一次 <code>git commit</code> 或 <code>git add</code> 时的状态</p><p>场景 2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 <code>git reset HEAD &lt;file&gt;</code>，就回到了场景 1，第二步按场景 1 操作。</p><p>场景 3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p><h3 id="delete-file"><a href="#delete-file" class="headerlink" title="delete file"></a>delete file</h3><p>命令 <code>git rm</code> 用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容 (<code>git checkout</code> 其实是用版本库里的版本替换工作区的版本)</p><h3 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h3><p><code>git remote add origin git@github.com:michaelliao/learngit.git</code>michaelliao 为账户名，修改为自己的，learngit 是在 GitHub 上创建的远程库</p><p>把本地库的内容推送到远程，用 <code>git push</code> 命令，实际上是把当前分支 master 推送到远程，第一次推送：<code>git push -u origin master</code>，之后使用 <code>git push origin master</code> 即可。</p><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><p>GitHub 给出的地址不止一个，还可以用 <a href="https://github.com/michaelliao/gitskills.git" target="_blank" rel="noopener">https://github.com/michaelliao/gitskills.git</a> 这样的地址。实际上，Git 支持多种协议，默认的 git:// 使用 ssh，但也可以使用 https 等其他协议。</p><p>使用 https 除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放 http 端口的公司内部就无法使用 ssh 协议而只能用 https。</p><h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><p>创建 dev 分支，然后切换到 dev 分支<br><code>git checkout -b dev</code></p><p>命令查看当前分支<br><code>git branch</code></p><p>合并时，要先切换回 master 分支 <code>git checkout master</code><br>然后：<code>git merge dev</code></p><p>合并完成后，就可以放心地删除 dev 分支了<br><code>git branch -d dev</code></p><p>实际上，切换分支这个动作，用 switch 更科学。因此，最新版本的 Git 提供了新的 git switch 命令来切换分支：</p><p>创建并切换到新的 dev 分支，可以使用：</p><p><code>git switch -c dev</code></p><p>直接切换到已有的 master 分支，可以使用：</p><p><code>git switch master</code><br>使用新的 git switch 命令，比 git checkout 要更容易理解。</p><h3 id="conflict"><a href="#conflict" class="headerlink" title="conflict"></a>conflict</h3><p><img src="https://www.liaoxuefeng.com/files/attachments/919023000423040/0" alt></p><p>这种情况下，Git 无法执行 “快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，必须手动解决冲突后再提交。<br>用 <code>git log --graph</code> 命令可以看到分支合并图。也可以简化输出结果<br><code>git log --graph --pretty=oneline --abbrev-commit</code></p><p>通常，合并分支时，如果可能，Git 会用 Fast forward 模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用 Fast forward 模式，Git 就会在 merge 时生成一个新的 commit，这样，从分支历史上就可以看出分支信息。</p><p>合并分支时，使用 –no-ff 参数，表示禁用 Fast forward<br>如：<code>git merge --no-ff -m&quot;merge with no-ff&quot;dev</code></p><h3 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h3><p>Git 还提供了一个 stash 功能，可以把当前工作现场 “储藏” 起来，等以后恢复现场后继续工作：<code>git stash</code><br>查看 “储藏区”：<code>git stash list</code><br>恢复：<code>git stash apply</code>，恢复后，stash 内容并不删除，你需要用 <code>git stash drop</code> 来删除<br>恢复并删除 “储藏区”：git stash pop</p><h3 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h3><p>当我们在 master 分支修复 bug 之后，dev 是早期 master 分支分出来的，所以 bug 在 dev 分支上依然存在。</p><p>同样的 bug，要在 dev 上修复，我们只需要把 4c805e2 fix bug 101 这个提交所做的修改 “复制” 到 dev 分支。注意：我们只想复制 4c805e2 fix bug 101 这个提交所做的修改，并不是把整个 master 分支 merge 过来</p><p><code>cherry-pick &lt;commit&gt;</code> 命令，让我们能复制一个特定的提交到当前分支</p><h3 id="delete-branch"><a href="#delete-branch" class="headerlink" title="delete branch"></a>delete branch</h3><p>如果要丢弃一个没有被合并过的分支，可以通过 <code>git branch -D &lt;name&gt;</code> 强行删除</p><h3 id="collaboration"><a href="#collaboration" class="headerlink" title="collaboration"></a>collaboration</h3><p>查看远程库信息，使用 <code>git remote -v</code>；</p><p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p><p>从本地推送分支，使用 <code>git push origin branch-name</code>，如果推送失败，先用 <code>git pull</code> 抓取远程的新提交；</p><p>在本地创建和远程分支对应的分支，使用 <code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p><p>建立本地分支和远程分支的关联，使用 <code>git branch --set-upstream branch-name origin/branch-name</code>；</p><p>从远程抓取分支，使用 <code>git pull</code>，如果有冲突，要先处理冲突。</p><h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><p><code>git rebase</code> 操作可以把本地未 push 的分叉提交历史整理成直线；</p><p>rebase 的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p><h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p>标签不是按时间顺序列出，而是按字母排序的 ，创建的标签都只存储在本地，不会自动推送到远程。 </p><p>命令 <code>git tag &lt;tagname&gt;</code> 用于新建一个标签，默认为 HEAD，也可以指定一个 commit id；</p><p>命令 <code>git tag -a &lt;tagname&gt; -m&quot;blablabla...&quot;</code> 可以指定标签信息；</p><p>命令 <code>git show &lt;tagname&gt;</code> 查看标签信息和说明文字  </p><p>命令 <code>git tag</code> 可以查看所有标签</p><p>命令 <code>git push origin &lt;tagname&gt;</code> 可以推送一个本地标签；</p><p>命令 <code>git push origin --tags</code> 可以推送全部未推送过的本地标签；</p><p>命令 <code>git tag -d &lt;tagname&gt;</code> 可以删除一个本地标签；</p><p>命令 <code>git push origin :refs/tags/&lt;tagname&gt;</code> 可以删除一个远程标签。</p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>在 GitHub 上，可以任意 Fork 开源仓库；</p><p>自己拥有 Fork 后的仓库的读写权限；</p><p>可以推送 pull request 给官方仓库来贡献代码。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/ShuSheng0007/article/details/80791849" target="_blank" rel="noopener">实际项目中如何使用 Git 做分支管理</a></p><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的 Git 教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> Git </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总随笔</title>
      <link href="/2020/04/26/essay-1/"/>
      <url>/2020/04/26/essay-1/</url>
      
        <content type="html"><![CDATA[<p>《历史深处的忧虑：近距离看美国一》是林达先生和他朋友的书信集。也正是因为如此，文字显得平易近人而又有热情，读起来不觉得枯燥乏味，反倒像真的有这样一个去美国的朋友一样。但书信并不是在寒暄问暖，更多的部分在于讨论美国的自由以及自由的代价。因为是书信的缘故，书中不是抽象的理论，而是针对具体的时事和见闻发表自己的意见。可能会 “夹带” 不少私货，也比较适合批判性阅读。书中前半部分主要谈美国的自由以及自由的代价，后半部分主要谈了辛普森案的始末以及美国的司法制度。</p><p>《归来》这个名字比《陆犯焉识》更具有韵味，可书又不只是讲了归来的故事，也谈了很多离开的过去。没看过电影，但书确实好看。只摘一段吧，当所有的铺垫，在这段话里举重若轻，确实很有催泪的效果。背景：妻子在病床上即将离开。</p><blockquote><p>妻子悄悄问：“他回来了吗？”<br>丈夫于是明白了，她打听的是她一直在等的那个人，虽然她已经忘了他的名字叫陆焉识。<br>“回来了。” 丈夫悄悄地回答她。<br>“还来得及吗？” 妻子又问。<br>“来得及的。他已经在路上了。”<br>“哦。路很远的。”<br>婉喻最后这句话是袒护她的焉识：就是焉识来不及赶到也不是他的错，是路太远。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《了不起的 markdown》阅读记录</title>
      <link href="/2020/04/22/markdown/"/>
      <url>/2020/04/22/markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="《了不起的-Markdown》阅读记录"><a href="#《了不起的-Markdown》阅读记录" class="headerlink" title="《了不起的 Markdown》阅读记录"></a>《了不起的 Markdown》阅读记录</h1><p>刚看到这本书的时候，我总是在想，Markdown 那么简洁的语法规则，是怎么水成一本书的……</p><p>《了不起的 Markdown》里，对于 Markdown 语法只占书的五分之一左右，剩下的主要是对工具、及其使用技巧，还有创建自己的个人博客的详尽描述。这里仅记录语法和一些插件的使用技巧，想系统学习的，推荐这本书或者 <a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">Markdown 菜鸟教程</a></p><h2 id="为什么选择-Markdown"><a href="#为什么选择-Markdown" class="headerlink" title="为什么选择 Markdown"></a>为什么选择 Markdown</h2><ul><li>更专注于文字</li><li>简洁的排版</li><li>兼容性好</li></ul><h2 id="Vscode-与-Markdown"><a href="#Vscode-与-Markdown" class="headerlink" title="Vscode 与 Markdown"></a>Vscode 与 Markdown</h2><p>这里呢首先介绍一些 VScode 里比较好用的 Markdown 插件，以便在接下来的语法部分更便捷地叙述。</p><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one" target="_blank" rel="noopener">Markdown All in One</a></p><ul><li>快捷键</li><li>自动生成并更新目录</li><li>自动格式化表格</li><li>LaTeX 数学公式支持</li><li>将 Markdown 打印为 HTML（命令 Markdown: Print current document to HTML）</li><li>选中文字，粘贴链接时自动转化为文字链接</li></ul></li><li><p><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/" target="_blank" rel="noopener">Markdown Preview Enhanced</a></p><ul><li>目录</li><li>批注</li><li>合并单元格</li><li>插入 LaTeX 公式</li><li>用纯文本绘图</li><li>运行代码</li><li>导入和导出制作幻灯片</li><li>高亮文本（仅在 Markdown Preview Enhanced 预览可见）</li></ul></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=xlthu.Pangu-Markdown" target="_blank" rel="noopener">Pangu-Markdown</a></p><ul><li>在英文字母和中文之间添加空格（强迫症必备）</li></ul></li></ul><h2 id="Markdown-基础语法"><a href="#Markdown-基础语法" class="headerlink" title="Markdown 基础语法"></a>Markdown 基础语法</h2><blockquote><p>最难的不是语法，而是开始使用<br>——《了不起的 Markdown》</p></blockquote><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><blockquote><p>| 标题     | 格式             |<br>| ——– | —————- |<br>| 一级标题 | #+ 空格 + 一级标题  |<br>| 二级标题 | ##+ 空格 + 二级标题 |<br>| ……       | ……               |  </p><ul><li>最多六级标题 *</li></ul></blockquote><p>一般格式：</p><blockquote><p># 文档标题<br>作者<br>摘要<br>目录<br>## 标题 1<br>### 标题 1.1  </p></blockquote><h4 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h4><ul><li>粗体：** 加粗文本、<em>\</em><br>快捷键：Ctr+B</li><li>斜体：* 斜体文本、*<br>快捷键：Ctr+I</li></ul><h3 id="段落与换行"><a href="#段落与换行" class="headerlink" title="段落与换行"></a>段落与换行</h3><ul><li><p>行与行之间没有空行（一行中只有制表符和空格），就会被视为同一段落。</p></li><li><p>上一行的结尾插入两个以上的空格键然后回车，即可实现段内换行</p></li></ul><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li><p>有序列表<br>数字 +.+ 空格 + 内容</p></li><li><p>无序列表<br>- + 空格 + 内容</p></li><li><p>嵌套列表<br>- + 空格 + 内容<br>Tab+ - + 空格 + 内容</p></li><li><p>有序和无序列表间也可以相互嵌套</p></li></ul><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>三个以上的 * 或 -</p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><blockquote><p>![图片描述 ](图片地址 )</p></blockquote><ul><li>图片描述一般为空</li><li>图片地址可以是本地图片地址也可以是网络图片地址</li><li>本地图片地址使用的是相对路径</li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><blockquote><p>[文字 ](链接 )</p></blockquote><h3 id="行内代码与代码块"><a href="#行内代码与代码块" class="headerlink" title="行内代码与代码块"></a>行内代码与代码块</h3><ul><li>行内代码<br>`代码、`</li><li>代码块<br>```<br>代码块<br>```</li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>&gt;+ 空格 + 引用内容</p><ul><li>允许多层嵌套</li><li>建议引用中的每一行开头都使用 &gt;</li></ul></blockquote><h2 id="拓展语法-GFM"><a href="#拓展语法-GFM" class="headerlink" title="拓展语法 GFM"></a>拓展语法 GFM</h2><ul><li><p>删除线<br>~~ 被删除线的内容、<del>\</del></p></li><li><p><a href="https://juejin.im/post/5e0aa7a55188254958275de3" target="_blank" rel="noopener">表情符号</a><br>仅在 Markdown Preview Enhanced 的预览窗口可见</p></li><li><p>表格  </p></li></ul><blockquote><p>| 名字  | 年龄  |<br>| :—: | :—: |<br>| 小明  | 12    |  </p></blockquote><ul><li>锚点<br>[1](#+ 标题名)<br>标题名在 vscode 中只对数字和英文有较好的支持</li></ul><h2 id="排版小技巧"><a href="#排版小技巧" class="headerlink" title="排版小技巧"></a>排版小技巧</h2><ul><li><p>加空格</p><ul><li>中英文之间加空格</li><li>英文标点符号之后</li><li>&gt; 前后加空格</li></ul></li><li><p>正确的英文大小写</p><ul><li>macOS</li><li>iPhone</li><li>iPad Pro</li><li>MacBook Pro</li><li>iOS</li><li>GitHub</li></ul></li><li><p>标题前后空一行</p></li><li><p>在中英文之间添加空格</p></li></ul><h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><h3 id="Markdown-特殊符号的书写"><a href="#Markdown-特殊符号的书写" class="headerlink" title="Markdown 特殊符号的书写"></a>Markdown 特殊符号的书写</h3><p>在 Markdown 中经常有一些特殊意义的字符</p><blockquote><p>\\   反斜线<br>`   反引号<br>*   星号<br>_   底线<br>\{}  花括号<br>[]  方括号<br>()  括弧<br>#   井字号<br>+   加号<br>-   减号<br>.   英文句点<br>!   惊叹号  </p></blockquote><p>需要使用 \\ 符号进行转义。</p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/56699805" target="_blank" rel="noopener">在 VSCode 下用 Markdown Preview Enhanced 愉快地写文档</a></li><li><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/" target="_blank" rel="noopener">Markdown Preview Enhanced</a></li><li>[Markdown 与 VS Code 官方文档](<a href="https://jeasonstudio.gitbooks.io/vscode-cn-doc/content/md/%" target="_blank" rel="noopener">https://jeasonstudio.gitbooks.io/vscode-cn-doc/content/md/%</a> E8% AF% AD% E8% A8%80/markdown.html)</li><li><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one" target="_blank" rel="noopener">Markdown All in One</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=xlthu.Pangu-Markdown" target="_blank" rel="noopener">Pangu-Markdown</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 读书记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载 -“这辈子都不可能打工运动” 发起人 -- 窃格瓦拉出狱</title>
      <link href="/2020/04/19/englishreading-2/"/>
      <url>/2020/04/19/englishreading-2/</url>
      
        <content type="html"><![CDATA[<style type="text/css">span {   color:red;}</style><p><a href="https://mp.weixin.qq.com/s/rVTOIDPq3Ojq3do2angRTw" target="_blank" rel="noopener">原文链接 - 作者碩猫</a>，感兴趣的可以关注下作者的公众号，更新还是比较频繁的，可以学到不少英语方面的干货。</p><p>公元 2020 年 4 月 18 日</p><p>一代精神领袖，现代著名思想家，教育家，哲学家，“不可能打工运动” 发起人，</p><p style="color:#dd0000;"> 曾发出 “打工是不可能打工的” 这样绝望的呐喊，现代窃学主义学派奠基人之一，窃・格瓦拉（原名周某人），出狱了。</p><p></p><p>在拜读了他的主要著作《不打工的秘密》、《电瓶终结者》《我和电瓶车不得不说的故事》 《今瓶没》 之后， 碩猫被他的才华所折服：</p><p style="color:#dd0000">青山巅，盗瓶间，有我周某一片天。<br><br>仰天大笑偷车去，我辈岂是打工人？<br><br>一步盗，步步盗，十步偷一车，千里不留瓶。<br><br>事了佛衣去，深藏钱于瓶。</p>没钱了，肯定要做啊，不做的话没有钱用。打工是不可能打工的，这辈子不可能打工的。做生意又不会做，就是偷这种东西，才维持得了生活这样子。在看守所的感觉好多了，进了里面去个个都是人才，说话又好听，喔呦，超喜欢在里面的。<div style="text-align: center;"><p><img src="https://s1.ax1x.com/2020/04/19/JuZbtg.png" alt></p></div><p style="text-align:center;"> 注意他的言辞，是要了几辆车 <br>人家说要！领袖风范一览无遗（战术后仰）！！！</p><p>窃・格瓦拉一直是碩猫的精神领袖，他那种誓死拒绝被资本主义剥削，始终代表无产阶级利益的精神，让我在无数个深夜，思考我人生的意义到底是什么。</p><p>与天斗，与地斗，与前美团外卖员工斗，与派出所斗，其乐无穷。人生宽度不知高到哪里去！！！</p><p style="color:#660000">窃・格瓦拉，我搜遍了脑中所有的词汇，只能想到一个词来形容你，那就是 niubility</p>这么说大家可能不服气<p>没关系</p><p>今天我就来论证下，为什么他是一个合格的精神领袖</p><p style="color:#660000">句句讲证据，童叟无欺。如有一句假话，我今天晚上给人送外卖的电瓶车就被偷（暴露了什么？？？）</p>对于这次碩猫观点的论证，我拆了几乎一本书。本篇文章选自书籍《the marks of a spiritual leader》（一个精神领袖的特征）<p>下面我们就来看看，一个精神领袖所具备的特征，窃格瓦拉是否也具备</p><p style="text-align:center;color:blue">特征 1</p><hr><blockquote><p>Love Both Friend and Foe<br>深爱着朋友和敌人  </p><blockquote><p>When our hope is strong, we are freed from fears and cares. Therefore, a spiritual leader must be a person who has strong confidence.<br>当我们拥有着强大的希望，我们就会从恐惧和忧虑中解放出来。因此，一个精神领袖必须拥有强大的自信。<br>Otherwise, he will inevitably fall into the trap of <span>manipulating</span> circumstances and <span>exploiting</span> people in order to secure for himself a happy future which he is not certain God will provide.<br>否则，他将不可避免地陷入操纵环境和剥削人民的陷阱，以确保自己有一个上帝可能不会给他提供的幸福的未来</p></blockquote></blockquote><p>毫无疑问，窃・格瓦拉是符合这条标准的</p><p style="color:#00dd00">如果不是深爱着他在看守所的朋友们，他怎么会一次次设法和他们团聚，并说出 “里面各个都是人才，说话又好听，嗨翻了” 这种言论？<br><br>如果不是对敌人的信任，怎么会与记者和看守所的人员主动打招呼，如若不是他的主动，恐怕这些珍贵的视频也就无从谈起。</p>看看吧，文中的 manipulate（操纵）、exploit（压榨），无不体现了资本主义的丑恶嘴脸。这也是窃格瓦拉的伟大之处，坚决不给资本主义打工<p><strong>manipulate</strong> [məˈnɪpjuleɪt] ，开头是什么？man 代表着 “手动，手工” 的啊，你难倒忘了曾经的 manual [ˈmænjuəl] （手工的，人工的）了吗？<br>而 pul 又是 pull 的变形，代表着 “拉，扯”，用手（man）在拉扯（pul），不是操纵（manipulate）是什么？你告诉我是什么？</p><p>还有 &lt; span&gt;manufacture [ˌmænjəˈfæktʃɚ]，你不会也忘了吧？man（手工的）+fact（做），所以是 “制造，生产”，怎么可以忘记呢？</p><p>窃 ` 格瓦拉，正因为意识到了这一点，才喊出了那句 “不要让自己被操作和利用” 的口号</p><blockquote><p>Don’t let yourself get <strong>manipulated</strong> and <strong>exploited</strong> this way.<br>出自于他的《不打工的秘密》</p></blockquote><p style="text-align:center;color:blue">特征 2</p><hr><blockquote><p>Optimistic<br>乐观的</p><blockquote><p>Spiritual leaders are optimistic not because man is good, but because God is in control. The leader must not let his <span>discontentment</span> become <span>disconsolation</span>.<br>精神领袖是乐观的。这倒不是因为人性本善，而是因为一切都在上帝的控制之中。（精神）领袖不能让自己的不满变成忧郁<br>Otherwise，the leader’s perseverance would <strong>falter</strong> and the people would not be inspired. Without optimism, <strong>restlessness</strong> becomes despair.<br>否则的话，领导者的毅力就会动摇，人民就不会受到鼓舞。没有乐观，不安就会变成绝望。</p></blockquote></blockquote><p>还记得窃格瓦拉领袖在狱中的语录吗？</p><p>我愿意再重复一遍：</p><p style="color:red"> 喔呦，超喜欢在里面的。在看守所的感觉好多了，进了里面去个个都是人才，说话又好听</p><p style="color:#00dd00"> 他难倒不知道自己要被囚禁吗？他又不傻！这种强大的乐观主义精神，就是做大事的人才有的品质 < br /><br>再看看我自己，憋在家里几天就炸毛，不能隐忍，怎能做大事？</p><p>哦，伟大的窃格瓦拉，再看看文中的用词。 </p><p><span>Discontentment（不满）<br>Disconsolation（悲伤）<br>Falter（动摇）<br>Restlessness（焦躁不安）<br></span></p><p>这，都不属于窃格瓦拉，他是坚定的，乐观的，平静的</p><p>Dis<strong>content</strong>ment（不满）<br>Dis<strong>consol</strong>ation（悲伤）<br>Dis（否定）+content（满意）= 不满<br>Dis（否定）+console（安慰）= 悲伤  </p><p>啊，果然，面具背后都有相似的组成部分，这也许就是资本主义的套路吧</p><p><span>Falter</span>（动摇，颤抖），一眼看透，长的就是 fall（下落，下跌）的样子，资本主义的大厦在下跌（fall）, 他们的根基在动摇（falter）</p><p>此时此刻，耳边又想起窃格瓦拉的声音：</p><p>We must be brave, we must not <strong>falter</strong>, hold steady , hold steady.  我们必须勇敢，不要害怕，坚守阵地.</p><p>When I thrive you thrive, When I <strong>falter</strong> you <strong>falter</strong>.<br>如果我繁盛，你们也会繁盛；如果我衰败，你们也会衰败。</p><p>再来看，<strong>Restlessness</strong>（焦躁不安），rest（休息）+less（否定形容词后缀），不休息，不焦躁是不可能的，这辈子都不可能，只能再在后面加个名词后缀 ness，变成名词这样子</p><p style="text-align:center;color:blue">特征 3</p><hr><blockquote><p>Thick-Skinned<br>厚脸皮</p><blockquote><p>One thing is for sure: if you begin to lead others, you will be criticized. No one will be a significant spiritual leader if his aim is to please others<br>有一件事是肯定的：如果你开始领导别人，你就会受到批评。如果一个人的目标是取悦他人，那么他不会成为一个重要的精神领袖。<br>If criticism disables us, we will never make it as spiritual leaders. I don’t mean that we must be the kind of people who don’t feel hurt, but rather that we must not be <span>wiped out</span> by the hurt.<br>如果批评能够中伤我们，我们就永远不会成为精神领袖。我并不是说我们必须是那种刀枪不入之人，而是我们不能被伤害所打倒。 </p></blockquote></blockquote><p><span><b>Thick-skinned</b></span> [ˈθɪkˈskɪnd] ，有人把它翻译为 “厚脸皮的”，我第一个不同意。窃格瓦拉怎会是厚脸皮？</p><p>他是钝感力比较强，不在乎外界的看法，不计较脸面的得失！！！</p><p>尽管别人想要 disable 他，他也不会被 wipe out</p><p>不要再说什么不认识这两个词，dis（否定）+able（能够）= 不能够，使无能，使伤残。这在《电瓶车的秘密》这本书里已经有详细的论述</p><p><strong>Wipe out</strong>（<span> 摧毁，毁灭 </span>），wipe（扫，扫地）+out（彻底，完全）= 完全扫光，摧毁，毁灭</p><p style="color:red"> 窃格瓦拉入狱多年，整天扫地，就发明了这几个词，还记不住好意思吗？</p><p style="text-align:center;color:blue">特征 3</p><hr><blockquote><p>A Hard Thinker<br>勤奋的思想家</p><blockquote><p>It is not easy to be a leader of people who can <span>outthink</span> you. A leader must <span>weighs things</span> and considers <span>pros and cons</span> and always has a significant rationale for the decisions that he makes.<br>人民想的比你远，你是很难做成一个领导者的。一个领导者必须做到衡量事物，权衡利弊，并且要对所做的决定保持强大的理性    </p></blockquote></blockquote><p><b>a hard thinker</b>（勤奋的思想家），hard 不要翻译为 “困难的”，在这里是勤奋勤奋勤奋！！！窃格瓦拉怎么会 “困难”？他那灵敏的大脑，已经开始写新书了 </p><p>He’s hard at work on a new book.<br>他正努力忙着写一本新著作。</p><p>据说名字都想好了，就叫《今・瓶没 2》</p><p><strong>outthink</strong> [aʊt’θɪŋk] ，以前讲过多次，out 有两个含义</p><p style="color:red">1 “用光，用完”</p>例如 run out（耗尽，用光），刚刚提到的 wipe out.<p style="color:red">2：超过，赶超。</p><p>比如前面讲过的 outshine（比… 更出色）、outpace（超过，赶过），<strong>outweigh</strong>（大于，超过 ），所以 outthink，你懂得！！！</p><p><b>weigh things</b> 不是给 “事情称体重”，是 < span > 衡量事情 ，weigh your words 就是斟酌字句，翻译不要死板，思想要想窃格瓦拉一样灵活才能生存这样子 </p><p><b>pros and cons</b>（<span> 优点和缺点 </span>）。写作必备 </p>pros 我们以前说过，pro 作为一个前缀，代表向前，比如 progress（进步），向前进步肯定是优点 <p></p><p><b>cons</b>[kɔnz] 长的特别像 coin（硬币，钱），如果不正当搞钱，能有什么出息？当然是 < span > 缺点 </p><hr><p>最后，一点拙劣的文笔，致敬窃・格瓦拉</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
            <tag> reading </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>foreach 与 unset 总结</title>
      <link href="/2020/04/15/foreach-php/"/>
      <url>/2020/04/15/foreach-php/</url>
      
        <content type="html"><![CDATA[<p>本文主要参考了 <a href="https://www.jb51.net/article/39299.htm" target="_blank" rel="noopener">深入解析 php 中的 foreach 问题</a> 和 <a href="https://segmentfault.com/a/1190000015753252" target="_blank" rel="noopener">深入理解 PHP 之 foreach</a>，两篇文章很很多相同之处，不过都没有使用最新的 PHP 版本，阅读起来有一定的困难，而且对 PHP7 中的 foreach 介绍很少。推荐先阅读 <a href="http://www.imooc.com/article/291780" target="_blank" rel="noopener">php 的 foreach 循环执行过程分析以及循环中执行 unset () 的一些问题</a>。这里还是采用 PHP7 的环境进行测试，所有代码均可正常运行。<br>ps：发现一个博文讲得也不错，对原理有深入的讲解，涉及一定量的编译原理知识。同时，博主是 PHP 开发组的核心成员，PHP7 的核心作者，有兴趣的可以看一下。<a href="https://www.laruence.com/2008/11/20/630.html" target="_blank" rel="noopener">深入理解 PHP 原理之 foreach</a></p><h1 id="值遍历的-foreach"><a href="#值遍历的-foreach" class="headerlink" title="值遍历的 foreach"></a>值遍历的 foreach</h1><p>PHP5 和 PHP7 中 foreach 的区别：  </p><ul><li>PHP7 升级手册中提到 “foreach 通过值遍历时，操作的值为数组的副本。当默认使用通过值遍历数组时，foreach 实际操作的是数组的迭代副本，而非数组本身。” 不过需要注意的是当循环结束之后，副本会重新赋值给数组，所以当我们打印 foreach 循环后的数组会返回赋值后的数组。这样说有些抽象，不如看个例子:</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">array</span> <span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$val</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$val</span><span class="token punctuation">;</span>        <span class="token function">unset</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$val</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$val</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br>phfpf</p><p>值遍历的特点：</p><ul><li>foreach 循环的时候，确实是复制了一份 $arr，循环的是这个副本</li><li>当循环结束之后，副本会重新赋值给 $arr, 所以我们打印循环后的 /$arr 会返回赋值后的数组</li><li>php7 在循环的时候，并没有影响到数组的指针，指针并不是像 php5 一样停留在最后一个值的右侧。php7 的指针仍旧指向数组的第一位。</li><li>在对数组按值迭代时，foreach 总是在对数组副本进行操作，在迭代中任何对数组的操作都不会影响到迭代行为<h1 id="引用遍历的情况"><a href="#引用遍历的情况" class="headerlink" title="引用遍历的情况"></a>引用遍历的情况</h1>这种情况比较复杂，出现的问题也很多，这里简单说明最典型的一种。</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$arr</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token variable">$v</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//now $arr is array (2, 4, 6)</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$arr</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"$k"</span><span class="token punctuation">,</span> <span class="token string">"=>"</span><span class="token punctuation">,</span> <span class="token string">"$v"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br>0 =&gt; 2 1 =&gt; 4 2 =&gt; 4<br>这里第三个结果明显不符合我们的预期，这是由于 “数组最后一个元素的 $value 引用在 foreach 循环之后仍会保留”。也就是说当第一个 foreach 结束之后，v 依然存在，$v 仍然是 $arr [2] 的引用。这里 foreach 结构可以视为隐含了以下操作：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$arr</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 在用户代码执行之前隐含了 2 个赋值操作</span>    <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token function">currentVal</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$k</span> <span class="token operator">=</span> <span class="token function">currentKey</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 继续运行用户代码</span>    ……<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个 foreach 中：<br>第 1 遍循环，隐含操作 $v=$arr [0] 被触发，由于此时 $v 仍然是 $arr [2] 的引用，  即相当于 $arr [2]=$arr [0]，$arr 变成 2,4,2<br>第 2 遍循环，$v=$arr [1]，即 $arr [2]=$arr [1]，$arr 变成 2,4,4<br>第 3 遍循环，$v=$arr [2]，即 $arr [2]=$arr [2]，$arr 变成 2,4,4  </p><p>解决方案：<br>数组最后一个元素的 $value 引用在 foreach 循环之后仍会保留。建议使用 unset () 来将其销毁。（PHP 手册）</p><p>引用遍历的特点：</p><ul><li>数组最后一个元素的 $value 引用在 foreach 循环之后仍会保留。</li><li>按照引用进行循环的时候，对数组的修改会影响循环<h1 id="引用遍历与-unset"><a href="#引用遍历与-unset" class="headerlink" title="引用遍历与 unset"></a>引用遍历与 unset</h1></li></ul><pre class="line-numbers language-php"><code class="language-php">    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$val</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">unset</span> <span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//3,4,5</span>    <span class="token function">print_r</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span><span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$val</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">unset</span> <span class="token punctuation">(</span><span class="token variable">$val</span> <span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">print_r</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// [3,4,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：<br>Array ( [0] =&gt; 3 [1] =&gt; 4 [2] =&gt; 5 )<br>Array ( [0] =&gt; 3 [1] =&gt; 4 [2] =&gt; 4 )  </p><p>如果在函数中 unset () 一个通过引用传递的变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用 unset () 之前一样的值。  所以这里 unset () 销毁的是局部变量，并不影响原数组的值<br>而在第二个 foreach 中，又出现了由于 val 未被销毁而产生的问题，分析过程和引用遍历中的相同。</p><h1 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h1><pre class="line-numbers language-php"><code class="language-php">    <span class="token variable">$array</span><span class="token operator">=</span><span class="token keyword">array</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$array</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$value</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 直接对 $value 进行操作时，是不会产生影响的</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$array</span> <span class="token keyword">as</span> <span class="token variable">$val</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$val</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有错误欢迎指正。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结整理 </tag>
            
            <tag> PHP </tag>
            
            <tag> foreach </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luckin Coffee</title>
      <link href="/2020/04/11/englishreading-1/"/>
      <url>/2020/04/11/englishreading-1/</url>
      
        <content type="html"><![CDATA[<p>最近瑞幸咖啡似乎风波不断，没怎么了解过这件事，不作任何评价，单纯地阅读文章，学习新词汇。<br><a href="https://mp.weixin.qq.com/s?__biz=MzU5Nzg4ODY4Mw==&mid=2247484395&idx=1&sn=4c616a0fe2c88313ba5cb58aa7b41cc0" target="_blank" rel="noopener">参考到的文章</a></p><h1 id="原文阅读"><a href="#原文阅读" class="headerlink" title="原文阅读"></a>原文阅读</h1><p>1.Luckin Coffee, China’s Starbucks wannabe, sees Nasdaq stock plunge as executive is suspended for making up sales figures</p><p>2.Luckin Coffee – touted as China’s rival to Starbucks – has suspended its chief operating officer for alleged misconduct as part of an ongoing internal investigation, causing its share price to plummet on the Nasdaq.</p><p>3.The company’s turnover was inflated by about 2.2 billion yuan (US$309 million) between the second quarter and the fourth quarter of 2019. Shares plummeted to a record low, 68 per cent below its initial offering price last May</p><p>4.Since its founding in 2017, Luckin has expanded quickly and was operating over 3,500 locations worldwide as of late last year, giving it a reputation as China’s rival to Starbucks. The company said it had no further comment, when contacted by the South China Morning Post.</p><h1 id="逐句精读"><a href="#逐句精读" class="headerlink" title="逐句精读"></a>逐句精读</h1><blockquote><p><strong>Luckin Coffee</strong>, China’s <em>Starbucks</em> <strong>wannabe</strong>, sees <strong>Nasdaq</strong> <strong>stock</strong> <strong>plunge</strong> as executive is suspended for <strong>making up</strong> sales figures  </p></blockquote><hr><p><strong>Luckin Coffee</strong><br>n. 瑞幸咖啡</p><hr><p><strong>wannabe</strong>  [ˈwɑːnəbi]<br>n. 想达到目标的人；赶超崇拜者的人<br>adj. 想要成为的；自封的  </p><p>歌词中其实经常出现类似的词，比如 wanna<br>回到文中的 wannabe，其实这个词的情感倾向是 “贬义” 的，带有一种嘲讽的味道。If you call someone a wannabe, you are saying in an unkind way that they are trying very hard to be like another person or group of people.（如果你称某人为 “wannabe”，你是以一种不友好的方式说，他们正在努力成为另一个人或一群人。）</p><hr><p><strong>Starbucks</strong><br>n. 星巴克（咖啡店名）；星巴克（集团公司名）</p><hr><p><strong>nasdaq</strong><br>n. 纳斯达克</p><hr><p><strong>stock</strong><br>n. 股份，股票；<br>share price 中，share 也是股票的意思</p><hr><p><strong>plunge</strong>  [plʌndʒ]<br>v. n. 使突然地下落；猛插；骤降；陡峭地向下倾斜</p><ul><li>第一层意思是 “跳入，投入”，这个完全是物理层面的，比如：plunge into water（一头扎进水里），它就相当于 dive, fall, sink 这些词  </li><li>我们就可以推断出其第二层含义：暴跌；骤降。如：“fall abruptly.”</li><li>第三层含义：认真，投入某事：我们如果想要形容一个人做事或者工作很认真，经常会说 “一头扎进工作里去”，所以用 plunge 来形容是非常形象的，plunge into sth 就等于 devote oneself to sth<br>注：在下面的句子中，我们还会看到一个单词 plummet，它和 plunge 是相同的用法</li></ul><hr><p><strong>make up</strong>   </p><p>关于 make up 这个词，我们在以前谈的最多的是 “弥补，补足”（make up for）<br>比如：<br>make up for lost time（弥补时间）<br>make up for mistakes（弥补过错）<br>beauty can’t make up for stupidity. （美丽不能弥补愚蠢）  </p><p>Make up 除了 “弥补，补足” 的意思之外，还有三个非常常用的含义，分别是</p><ul><li>组成；构成 (make up of)</li><li>编造；虚构</li><li>和解；和好（make up with）</li></ul><p>而文中的 make up sales figures 就是 “编造” 的这层含义，与此类似的表达还有 cook up</p><blockquote><p>Luckin Coffee – <strong>touted</strong> as China’s rival to Starbucks – has <strong>suspended</strong> its <strong>chief operating officer</strong> for alleged <strong>misconduct</strong> as part of an ongoing internal investigation, causing its <strong>share price</strong> to <strong>plummet</strong> on the Nasdaq.  </p><blockquote><p>瑞幸咖啡 - 被标榜为星巴克的劲敌，已涉嫌因不端行为而停职其 COO，这是对其正在进行内部调查的一部分，导致其股价在纳斯达克暴跌</p></blockquote></blockquote><hr><p><strong>tout</strong>[taʊt]<br>v. 兜售；兜销  </p><p>这是一个 GRE 词汇，比较难，这个词的情感倾向偏负面，它强调不断地诉说，劝服别人，以达到自己的目的<br>也可以作 <em><em> 标榜 </em></em> 的意思</p><hr><p><strong>misconduct</strong><br>n. 不端行为；处理不当<br>vt. 处理不当；行为不检  </p><hr><p><strong>plummet</strong> [ˈplʌmɪt]   </p><p>这个词和我们刚刚讲到的 plunge 是一个意思，都是迅速暴跌 (drop sharply)，下降，俯冲</p><hr><blockquote><p>The company’s <strong>turnover</strong> was <strong>inflated</strong> by about 2.2 billion yuan (US$309 million) between the second <strong>quarter</strong> and the fourth quarter of 2019. Shares plummeted to a record low, 68 per cent below its initial offering price last May</p></blockquote><hr><p><strong>turnover</strong> [ˈtɜrnoʊvə(r)] </p><p>Turnover 这个单词记住两个含义即可：</p><ul><li>营业额  </li><li>(员工) 流动率</li></ul><p>文中的 turnover 就是 “营业额” 的意思</p><hr><p><strong>inflate</strong> [ɪnˈfleɪt]<br>v. 使充气；膨胀  </p><p>我们都知道 flat [flæt] 这个词，意为 “平的，扁平的”，这时候再加上前缀 “in”，那就是给扁平（flat）的东西往里（in）吹起，所以 inflate 的意思就是 “充气，膨胀”<br>同理，deflate [dɪˈfleɪt] 就意为 “放气；使缩小”，De 表现向下，比如 decrease（下降），那么 deflate 就是 “向下压平”，即 “放气；使缩小”</p><hr><blockquote><p>Since its founding in 2017, Luckin has expanded quickly and was <strong>operating</strong> over 3,500 locations worldwide as of late last year, giving it a reputation as China’s rival to Starbucks. The company said it had <strong>no further comment</strong>, when contacted by the South China Morning Post.</p></blockquote><hr><p><strong>operate</strong>  [ˈɒpəreɪt]<br>vi. 运转；动手术<br>vt. 操作；经营；对… 开刀</p><hr><p><strong>No further comment</strong>  </p><p>字面意思是 “没有进一步的说辞 / 解释”  , 也就是无可奉告，通常用于回答记者的提问<br>当然我们也可以更简单，直接：No comment 也是可以的   </p><hr><h1 id="词汇回顾"><a href="#词汇回顾" class="headerlink" title="词汇回顾"></a>词汇回顾</h1><p>Luckin Coffee<br>wannabe<br>Starbucks<br>nasdaq<br>stock<br>plunge<br>make up<br>tout<br>misconduct<br>plummet<br>turnover<br>inflate<br>operate<br>No further comment  </p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
            <tag> reading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Traffic_Packet_Analysis</title>
      <link href="/2020/04/02/traffic-packet-analysis/"/>
      <url>/2020/04/02/traffic-packet-analysis/</url>
      
        <content type="html"><![CDATA[<p>写在前面：本文的大部分内容都源于 CTF-WIKI、维基百科和网络，如有补充和意见请发送邮件至 <a href="mailto:1316565360@qq.com" target="_blank" rel="noopener">1316565360@qq.com</a></p><h1 id="流量包分析概述"><a href="#流量包分析概述" class="headerlink" title="流量包分析概述"></a>流量包分析概述</h1><p>CTF 比赛中，流量包的取证分析是另一项重要的考察方向。</p><p>通常比赛中会提供一个包含流量数据的 PCAP 文件，有时候也会需要选手们先进行修复或重构传输文件后，再进行分析。</p><p>PCAP 这一块作为重点考察方向，复杂的地方在于数据包里充满着大量无关的流量信息，因此如何分类和过滤数据是参赛者需要完成的工作。</p><p>总的来说有以下几个步骤</p><ul><li>总体把握<ul><li>协议分级</li><li>端点统计</li></ul></li><li>过滤筛选<ul><li>过滤语法</li><li>Host，Protocol，contains，特征值</li></ul></li><li>发现异常<ul><li>特殊字符串</li><li>协议某字段</li><li>flag 位于服务器中</li></ul></li><li>数据提取<ul><li>字符串取</li><li>文件提取</li></ul></li></ul><p>总的来说比赛中的流量分析可以概括为以下三个方向:</p><ul><li>流量包修复</li><li>协议分析</li><li>数据提取</li></ul><hr><h2 id="PCAP-文件结构"><a href="#PCAP-文件结构" class="headerlink" title="PCAP 文件结构"></a>PCAP 文件结构</h2><p>一般来说，对于 <code>PCAP</code> 文件格式考察较少，且通常都能借助于现成的工具如 <code>pcapfix</code> 直接修复，这里大致介绍下几个常见的块，详细可以翻看 <a href="http://www.tcpdump.org/pcap/pcap.html" target="_blank" rel="noopener">Here</a>。</p><ul><li>Tools<ul><li><a href="https://f00l.de/hacking/pcapfix.php" target="_blank" rel="noopener">PcapFix Online</a></li><li><a href="https://github.com/Rup0rt/pcapfix/tree/devel" target="_blank" rel="noopener">PcapFix</a></li></ul></li></ul><p>一般文件结构</p><pre class="line-numbers language-shell"><code class="language-shell">    0                   1                   2                   3       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                          Block Type                           |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                      Block Total Length                       |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   /                          Block Body                           /   /          /* variable length, aligned to 32 bits */            /   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                      Block Total Length                       |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前所定义的常见块类型有</p><ul><li>Section Header Block: it defines the most important characteristics of the capture file.</li><li>Interface Description Block: it defines the most important characteristics of the interface (s) used for capturing traffic.</li><li>Packet Block: it contains a single captured packet, or a portion of it.</li><li>Simple Packet Block: it contains a single captured packet, or a portion of it, with only a minimal set of information about it.</li><li>Name Resolution Block: it defines the mapping from numeric addresses present in the packet dump and the canonical name counterpart.</li><li>Capture Statistics Block: it defines how to store some statistical data (e.g. packet dropped, etc) which can be useful to undestand the conditions in which the capture has been made.</li></ul><h3 id="常见块"><a href="#常见块" class="headerlink" title="常见块"></a>常见块</h3><h4 id="Section-Header-BlocK-文件头"><a href="#Section-Header-BlocK-文件头" class="headerlink" title="Section Header BlocK (文件头)"></a>Section Header BlocK (文件头)</h4><p>必须存在，意味着文件的开始</p><pre class="line-numbers language-shell"><code class="language-shell">    0                   1                   2                   3       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                Byte-Order Magic (0x1A2B3C4D)                  |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |   Major Version (主版本号)   |    Minor Version (次版本号)        |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                                                               |   |                          Section Length                       |   |                                                               |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   /                                                               /   /                      Options (variable)                       /   /                                                               /   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Interface-Description-Block-接口描述"><a href="#Interface-Description-Block-接口描述" class="headerlink" title="Interface Description Block (接口描述)"></a>Interface Description Block (接口描述)</h4><p>必须存在，描述接口特性</p><pre class="line-numbers language-shell"><code class="language-shell">    0                   1                   2                   3       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |           LinkType            |           Reserved            |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                  SnapLen (每个数据包最大字节数)                  |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   /                                                               /   /                      Options (variable)                       /   /                                                               /   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Packet-Block-数据块"><a href="#Packet-Block-数据块" class="headerlink" title="Packet Block (数据块)"></a>Packet Block (数据块)</h4><pre class="line-numbers language-sh"><code class="language-sh">    0                   1                   2                   3       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |         Interface ID          |          Drops Count          |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                     Timestamp (High)   标准的 Unix 格式          |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                        Timestamp (Low)                        |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                         Captured Len                          |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                          Packet Len                           |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   /                          Packet Data                          /   /          /* variable length, aligned to 32 bits */            /   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   /                      Options (variable)                       /   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://www.tcpdump.org/pcap/pcap.html" target="_blank" rel="noopener">http://www.tcpdump.org/pcap/pcap.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/27470338" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27470338</a></li><li><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9884447.html" target="_blank" rel="noopener">https://www.cnblogs.com/ECJTUACM-873284962/p/9884447.html</a></li></ul><hr><h1 id="Wireshark-常用功能介绍"><a href="#Wireshark-常用功能介绍" class="headerlink" title="Wireshark 常用功能介绍"></a>Wireshark 常用功能介绍</h1><h2 id="显示过滤器"><a href="#显示过滤器" class="headerlink" title="显示过滤器"></a>显示过滤器</h2><p>显示过滤器可以用很多不同的参数来作为匹配标准，比如 IP 地址、协议、端口号、某些协议头部的参数。此外，用户也用一些条件工具和串联运算符创建出更加复杂的表达式。用户可以将不同的表达式组合起来，让软件显示的数据包范围更加精确。在数据包列表面板中显示的所有数据包都可以用数据包中包含的字段进行过滤。</p><pre><code>[not] Expression [and|or] [not] Expression</code></pre><p>经常要用到各种运算符</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>与</td><td>and , &amp;&amp;</td></tr><tr><td>或</td><td>or , ||</td></tr><tr><td>非</td><td>! , not</td></tr></tbody></table><h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><ol><li>借助于过滤器窗口</li></ol><ol start="2"><li>借助于工具条的输入栏</li></ol><ol start="3"><li>将数据包某个属性值指定为过滤条件</li></ol><blockquote><p>note<br>​复杂的过滤命令可以直接通过第三种方式得到过滤语法</p></blockquote><h2 id="信息统计"><a href="#信息统计" class="headerlink" title="信息统计"></a>信息统计</h2><h3 id="Protocol-History-协议分级"><a href="#Protocol-History-协议分级" class="headerlink" title="Protocol History (协议分级)"></a>Protocol History (协议分级)</h3><p>这个窗口现实的是捕捉文件包含的所有协议的树状分支</p><p>包含的字段</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>Protocol：</td><td>协议名称</td></tr><tr><td>% Packets：</td><td>含有该协议的包数目在捕捉文件所有包所占的比例</td></tr><tr><td>Packets：</td><td>含有该协议的包的数目</td></tr><tr><td>Bytes：</td><td>含有该协议的字节数</td></tr><tr><td>Mbit/s：</td><td>抓包时间内的协议带宽</td></tr><tr><td>End Packets：</td><td>该协议中的包的数目（作为文件中的最高协议层）</td></tr><tr><td>End Bytes：</td><td>该协议中的字节数（作为文件中的最高协议层）</td></tr><tr><td>End Mbit/s：</td><td>抓包时间内的协议带宽（作为文件中的最高协议层）</td></tr></tbody></table><p>这一功能可以为分析数据包的主要方向提供依据</p><h3 id="Conversation-对话"><a href="#Conversation-对话" class="headerlink" title="Conversation (对话)"></a>Conversation (对话)</h3><p>发生于一特定端点的 IP 间的所有流量.</p><p>!!! note<br>​    - 查看收发大量数据流的 IP 地址。如果是你知道的服务器（你记得服务器的地址或地址范围），那问题就解决了；但也有可能只是某台设备正在扫描网络，或仅是一台产生过多数据的 PC。<br>​    - 查看扫描模式（scan pattern）。这可能是一次正常的扫描，如 SNMP 软件发送 ping 报文以查找网络，但通常扫描都不是好事情</p><h3 id="EndPoints-端点"><a href="#EndPoints-端点" class="headerlink" title="EndPoints (端点)"></a>EndPoints (端点)</h3><p>这一工具列出了 Wireshark 发现的所有 endpoints 上的统计信息</p><h2 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://blog.jobbole.com/73482/" target="_blank" rel="noopener">http://blog.jobbole.com/73482/</a></li><li><a href="http://www.vuln.cn/2103" target="_blank" rel="noopener">http://www.vuln.cn/2103</a></li></ul><hr><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p><code>HTTP</code> ( <code>Hyper Text Transfer Protocol</code> ，也称为超文本传输协议) 是一种用于分布式、协作式和超媒体信息系统的应用层协议。 <code>HTTP</code> 是万维网的数据通信的基础。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><blockquote><p>题目：江苏省领航杯 - 2017：hack</p></blockquote><p>总体观察可以得出:</p><ul><li><code>HTTP</code> 为主</li><li><code>192.168.173.134</code> 为主</li><li>不存在附件</li></ul><p><img src="https://s1.ax1x.com/2020/04/02/GtFq2R.png" alt="linghang_hack"></p><p>从这张图，基本可以判断初这是一个在 <code>sql 注入 - 盲注时产生的流量包</code></p><p>到此为止，基本可以判断 flag 的方向，提取出所有的 url 后，用 <code>python</code> 辅助即可得到 flag</p><ul><li>提取 url: <code>tshark -r hack.pcap -T fields  -e http.request.full_uri|tr -s &#39;\n&#39;|grep flag &gt; log</code></li><li>得到盲注结果</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">with</span> open <span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    tmp <span class="token operator">=</span> f<span class="token punctuation">.</span>read <span class="token punctuation">(</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token string">''</span>    data <span class="token operator">=</span> re<span class="token punctuation">.</span>findall <span class="token punctuation">(</span>r<span class="token string">'=(\d*)%23'</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span>int <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">]</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span>num <span class="token keyword">in</span> enumerate <span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">></span> data <span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> chr <span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">print</span> flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p><code>HTTPs = HTTP + SSL / TLS</code>. 服务端和客户端的信息传输都会通过 TLS 进行加密，所以传输的数据都是加密后的数据</p><ul><li><a href="http://www.freebuf.com/articles/system/37900.html" target="_blank" rel="noopener">wireshark 分析 HTTPs</a></li></ul><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><blockquote><p>题目：hack-dat-kiwi-ctf-2015:ssl-sniff-2</p></blockquote><p>打开流量包发现是 <code>SSL</code> 加密过的数据，导入题目提供的 <code>server.key.insecure</code>, 即可解密</p><pre class="line-numbers language-xml"><code class="language-xml">GET /key.html HTTP/1.1Host: localhostHTTP/1.1 200 OKDate: Fri, 20 Nov 2015 14:16:24 GMTServer: Apache/2.4.7 (Ubuntu)Last-Modified: Fri, 20 Nov 2015 14:15:54 GMTETag: "1c-524f98378d4e1"Accept-Ranges: bytesContent-Length: 28Content-Type: text/htmlThe key is 39u7v25n1jxkl123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h1><p><code>FTP</code> ( <code>File Transfer Protocol</code> ，即文件传输协议) 是 <code>TCP/IP</code> 协议组中的协议之一。 <code>FTP</code> 协议包括两个组成部分，其一为 <code>FTP</code> 服务器，其二为 <code>FTP</code> 客户端。其中 <code>FTP</code> 服务器用来存储文件，用户可以使用 <code>FTP</code> 客户端通过 <code>FTP</code> 协议访问位于 <code>FTP</code> 服务器上的资源。在开发网站的时候，通常利用 <code>FTP</code> 协议把网页或程序传到 <code>Web</code> 服务器上。此外，由于 <code>FTP</code> 传输效率非常高，在网络上传输大的文件时，一般也采用该协议。</p><p>默认情况下 <code>FTP</code> 协议使用 <code>TCP</code> 端口中的 <code>20</code> 和 <code>21</code> 这两个端口，其中 <code>20</code> 用于传输数据， <code>21</code> 用于传输控制信息。但是，是否使用 <code>20</code> 作为传输数据的端口与 <code>FTP</code> 使用的传输模式有关，如果采用主动模式，那么数据传输端口就是 <code>20</code> ；如果采用被动模式，则具体最终使用哪个端口要服务器端和客户端协商决定。</p><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>DNS</code> 通常为 <code>UDP</code> 协议，报文格式</p><pre class="line-numbers language-sh"><code class="language-sh">+-------------------------------+| 报文头                         |+-------------------------------+| 问题 (向服务器提出的查询部分)    |+-------------------------------+| 回答 (服务器回复的资源记录)      |+-------------------------------+| 授权 (权威的资源记录)           |+-------------------------------+| 额外的 (额外的资源记录)         |+-------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询包只有头部和问题两个部分， <code>DNS</code> 收到查询包后，根据查询到的信息追加回答信息、授权机构、额外资源记录，并且修改了包头的相关标识再返回给客户端。</p><p>每个 <code>question</code> 部分</p><pre><code>   0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ |                                               | /                     QNAME                     / /                                               / +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ |                     QTYPE                     | +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ |                     QCLASS                    | +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</code></pre><ul><li><code>QNAME</code> ：为查询的域名，是可变长的，编码格式为：将域名用。号划分为多个部分，每个部分前面加上一个字节表示该部分的长度，最后加一个 <code>0</code> 字节表示结束</li><li><code>QTYPE</code> ：占 <code>16</code> 位，表示查询类型，共有 <code>16</code> 种，常用值有：<code>1</code> ( <code>A</code> 记录，请求主机 <code>IP</code> 地址)、<code>2</code> ( <code>NS</code> ，请求授权 <code>DNS</code> 服务器)、<code>5</code> ( <code>CNAME</code> 别名查询）</li></ul><h2 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h2><blockquote><p>题目：<code>BSides San Francisco CTF 2017</code> ： <code>dnscap.pcap</code> </p></blockquote><p>我们通过 <code>wireshark</code> 打开发现全部为 <code>DNS</code> 协议，查询名为大量字符串 <code>([\w\.]+)\.skullseclabs\.org</code></p><p>我们通过 <code>tshark -r dnscap.pcap -T fields -e dns.qry.name &gt; hex</code> 提取后，利用 <code>python</code> 转码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> refind <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">with</span> open <span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>        text <span class="token operator">=</span> re<span class="token punctuation">.</span>findall <span class="token punctuation">(</span>r<span class="token string">'([\w\.]+)\.skull'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> text<span class="token punctuation">:</span>            find <span class="token operator">+=</span> text <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace <span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span> find<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现了几条关键信息：</p><pre><code>Welcome to dnscap! The flag is below, have fun!!Welcome to dnscap! The flag is below, have fun!!!command (sirvimes)...IHDRgAMAbKGD        pHYsIHDRgAMAbKGD        pHYstIMEIDATx...2017-02-01T21:04:00-08:00IENDconsole (sirvimes)console (sirvimes)Good luck! That was dnscat2 traffic on a flaky connection with lots of re-transmits. Seriously,Good luck! That was dnscat2 traffic on a flaky connection with lots of re-transmits. Seriously, d [good luck. :)+</code></pre><p><code>flag</code> 确实包含在其中，但是有大量重复信息，一是应为 <code>question</code> 。在 <code>dns</code> 协议中查询和反馈时都会用到，<code>-Y&quot;ip.src == 192.168.43.91&quot;</code> 进行过滤后发现还是有不少重复部分。</p><pre><code>%2A}%2A}%2A} q%2A} x%2A}IHDRgAMAbKGD        pHYstIMEIDATxHBBHCxRH!C1% tceyFi4ZI32rP@1ceyFi4ZI32rP@1ceyFi4ZI32rP@1ceyFi4ZI32rP@1</code></pre><p>根据发现的 <code>dnscat</code> 找到 <a href="https://github.com/iagox86/dnscat2/blob/master/doc/protocol.md" target="_blank" rel="noopener">https://github.com/iagox86/dnscat2/blob/master/doc/protocol.md</a> 这里介绍了 <code>dnscat</code> 协议的相关信息，这是一种通过 <code>DNS</code> 传递数据的变种协议，题目文件中应该未使用加密，所以直接看这里的数据块信息</p><pre><code>MESSAGE_TYPE_MSG: [0x01](uint16_t) packet_id(uint8_t) message_type [0x01](uint16_t) session_id(uint16_t) seq(uint16_t) ack(byte []) data</code></pre><p>在 <code>qry.name</code> 中去除其余字段，只留下 <code>data</code> 快，从而合并数据，再从 <code>16</code> 进制中检索 <code>89504e.....6082</code> 提取 <code>png</code>, 得到 <code>flag</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> refind <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> open <span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>        text <span class="token operator">=</span> re<span class="token punctuation">.</span>findall <span class="token punctuation">(</span>r<span class="token string">'([\w\.]+)\.skull'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> text<span class="token punctuation">:</span>            tmp <span class="token operator">=</span>  text <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace <span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>            find<span class="token punctuation">.</span>append <span class="token punctuation">(</span>tmp <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>last <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> find<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> last<span class="token punctuation">:</span>        last<span class="token punctuation">.</span>append <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span>  <span class="token string">''</span><span class="token punctuation">.</span>join <span class="token punctuation">(</span>last<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>flag</em></p><p><img src="https://s1.ax1x.com/2020/04/02/GtkNoF.png" alt="dnscat_flag"></p><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><ul><li><a href="https://mrpnkt.github.io/2016/icectf-2016-search/" target="_blank" rel="noopener">IceCTF-2016:Search</a></li><li><a href="https://github.com/susers/Writeups/blob/master/2017/EIS/Misc/DNS%20101/Write-up.md" target="_blank" rel="noopener">EIS-2017:DNS 101</a></li></ul><h2 id="参考资料-2"><a href="#参考资料-2" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/lisijie/homepage/blob/master/posts/tech/dns%" target="_blank" rel="noopener">https://github.com/lisijie/homepage/blob/master/posts/tech/dns%</a> E5%8D%8F% E8% AE% AE% E8% A7% A3% E6%9E%90.md</li><li><a href="https://xpnsec.tumblr.com/post/157479786806/bsidessf-ctf-dnscap-walkthrough" target="_blank" rel="noopener">https://xpnsec.tumblr.com/post/157479786806/bsidessf-ctf-dnscap-walkthrough</a></li></ul><hr><h1 id="WIFI"><a href="#WIFI" class="headerlink" title="WIFI"></a>WIFI</h1><blockquote><p><code>802.11</code> 是现今无线局域网通用的标准，常见认证方式</p><ul><li>不启用安全‍‍</li><li><code>WEP‍‍</code></li><li><code>WPA/WPA2-PSK</code>（预共享密钥）‍‍</li><li><code>PA/WPA2 802.1X</code> （<code>radius</code> 认证）</li></ul></blockquote><h2 id="WPA-PSK"><a href="#WPA-PSK" class="headerlink" title="WPA-PSK"></a>WPA-PSK</h2><p>认证大致过程如下图</p><p><img src="https://s1.ax1x.com/2020/04/02/GtkRFe.png" alt="wpa-psk"></p><p>其中四次握手过程</p><p><img src="https://s1.ax1x.com/2020/04/02/GtkLFg.png" alt="eapol"></p><ol><li>4 次握手开始于验证器 (AP)，它产生一个随机的值 (ANonce) 发送给请求者</li><li>请求者也产生了它自己的随机 SNonce，然后用这两个 Nonces 以及 PMK 生成了 PTK。请求者回复消息 2 给验证器，还有一个 MIC（message integrity code，消息验证码）作为 PMK 的验证</li><li>它先要验证请求者在消息 2 中发来的 MIC 等信息，验证成功后，如果需要就生成 GTK。然后发送消息 3</li><li>请求者收到消息 3，验证 MIC，安装密钥，发送消息 4，一个确认信息。验证器收到消息 4，验证 MIC，安装相同的密钥</li></ol><h2 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h2><blockquote><p>实验吧： <code>shipin.cap</code></p></blockquote><p>从大量的 <code>Deauth</code> 攻击基本可以判断是一个破解 <code>wifi</code> 时的流量攻击</p><p>同时也成功发现了握手包信息</p><p><img src="https://s1.ax1x.com/2020/04/02/GtkOYQ.png" alt="shiyanba-wpa"></p><p>接下来跑密码</p><ul><li><code>linux</code> ： <code>aircrack</code> 套件</li><li><code>windows</code> ： <code>wifipr</code> ，速度比 <code>esaw</code> 快， <code>GTX850</code> 能将近 <code>10w\s  :</code>)</li></ul><p>得到密码 <code>88888888</code> 在 <code>wireshark</code> 中 <code>Edit -&gt; Preferences -&gt; Protocols -&gt; IEEE802.11 -&gt; Edit</code> 以 <code>key:SSID</code> 形式填入即可解密 <code>wifi</code> 包看到明文流量</p><blockquote><p>KCARCK 相关: <a href="https://www.krackattacks.com/" target="_blank" rel="noopener">https://www.krackattacks.com/</a></p></blockquote><h2 id="参考资料-3"><a href="#参考资料-3" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.freebuf.com/articles/wireless/58342.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/wireless/58342.html</a></li><li><a href="http://blog.csdn.net/keekjkj/article/details/46753883" target="_blank" rel="noopener">http://blog.csdn.net/keekjkj/article/details/46753883</a></li></ul><h1 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h1><p><em><em>USB 详述 </em></em>: <a href="http://www.usb.org/developers/hidpage/Hut1_12v2.pdf" target="_blank" rel="noopener">http://www.usb.org/developers/hidpage/Hut1_12v2.pdf</a></p><ul><li>鼠标协议</li></ul><p>鼠标移动时表现为连续性，与键盘击键的离散性不一样，不过实际上鼠标动作所产生的数据包也是离散的，毕竟计算机表现的连续性信息都是由大量离散信息构成的</p><p>每一个数据包的数据区有四个字节，第一个字节代表按键，当取 0x00 时，代表没有按键、为 0x01 时，代表按左键，为 0x02 时，代表当前按键为右键。第二个字节可以看成是一个 signed byte 类型，其最高位为符号位，当这个值为正时，代表鼠标水平右移多少像素，为负时，代表水平左移多少像素。第三个字节与第二字节类似，代表垂直上下移动的偏移。</p><p>得到这些点的信息后，即可恢复出鼠标移动轨迹</p><ul><li>Tools<ul><li><a href="https://github.com/WangYihang/UsbMiceDataHacker" target="_blank" rel="noopener">UsbMiceDataHacker</a></li></ul></li><li>键盘协议</li></ul><p>键盘数据包的数据长度为 8 个字节，击键信息集中在第 3 个字节</p><p><img src="https://s1.ax1x.com/2020/04/02/GtA0AS.png" alt="keyboard"></p><p>根据 data 值与具体键位的对应关系</p><p><img src="https://s1.ax1x.com/2020/04/02/GtADhQ.png" alt="keyboard_pro"></p><p>可从数据包恢复出键盘的案件信息</p><ul><li>Tools<ul><li><a href="https://github.com/WangYihang/UsbKeyboardDataHacker" target="_blank" rel="noopener">UsbKeyboardDataHacker</a></li></ul></li></ul><p><em><em> 参考 </em></em></p><ul><li><a href="https://www.anquanke.com/post/id/85218" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85218</a></li></ul><h3 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h3><blockquote><p><code>Xman</code> 三期夏令营排位赛练习题：<code>AutoKey</code></p><p>WP：<a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9473808.html" target="_blank" rel="noopener">https://www.cnblogs.com/ECJTUACM-873284962/p/9473808.html</a></p></blockquote><p>问题描述：</p><p><img src="https://s1.ax1x.com/2020/04/02/GtA7cR.png" alt="task_AutoKey"></p><p>这道题是我参加 <code>Xman</code> 三期夏令营选拔赛出的一道题，我们如何对其进行分析？</p><h4 id="流量包是如何捕获的？"><a href="#流量包是如何捕获的？" class="headerlink" title="流量包是如何捕获的？"></a>流量包是如何捕获的？</h4><p>首先我们从上面的数据包分析可以知道，这是个 <code>USB</code> 的流量包，我们可以先尝试分析一下 <code>USB</code> 的数据包是如何捕获的。</p><p>在开始前，我们先介绍一些 <code>USB</code> 的基础知识。 <code>USB</code> 有不同的规格，以下是使用 <code>USB</code> 的三种方式：</p><pre class="line-numbers language-shell"><code class="language-shell">l USB UARTl USB HIDl USB Memory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>UART</code> 或者 <code>Universal Asynchronous Receiver/Transmitter</code> 。这种方式下，设备只是简单的将 <code>USB</code> 用于接受和发射数据，除此之外就再没有其他通讯功能了。</p><p><code>HID</code> 是人性化的接口。这一类通讯适用于交互式，有这种功能的设备有：键盘，鼠标，游戏手柄和数字显示设备。</p><p>最后是 <code>USB Memory</code> ，或者说是数据存储。 <code>External HDD</code> ， <code>thumb drive/flash drive</code> 等都是这一类的。</p><p>其中使用的最广的不是 <code>USB HID</code> 就是 <code>USB Memory</code> 了。</p><p>每一个 <code>USB</code> 设备（尤其是 <code>HID</code> 或者 <code>Memory</code> ）都有一个供应商 <code>ID（Vendor ID）</code> 和产品识别码 <code>（Product Id）</code> 。 <code>Vendor ID</code> 是用来标记哪个厂商生产了这个 <code>USB</code> 设备。 <code>Product ID</code> 用来标记不同的产品，他并不是一个特殊的数字，当然最好不同。linux 通过 <code>lsusb</code> 查看命令显示 USB 设备。</p><h2 id="参考资料-4"><a href="#参考资料-4" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9473808.html" target="_blank" rel="noopener">https://www.cnblogs.com/ECJTUACM-873284962/p/9473808.html</a></li><li><a href="https://blog.csdn.net/songze_lee/article/details/77658094" target="_blank" rel="noopener">https://blog.csdn.net/songze_lee/article/details/77658094</a></li><li><a href="https://wiki.wireshark.org/USB" target="_blank" rel="noopener">https://wiki.wireshark.org/USB</a></li><li><a href="http://www.usb.org/developers/hidpage/Hut1_12v2.pdf" target="_blank" rel="noopener">http://www.usb.org/developers/hidpage/Hut1_12v2.pdf</a></li><li><a href="https://www.wireshark.org/docs/man-pages/tshark.html" target="_blank" rel="noopener">https://www.wireshark.org/docs/man-pages/tshark.html</a></li><li><a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/" target="_blank" rel="noopener">http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/</a></li><li><a href="https://hackfun.org/2017/02/22/CTF%" target="_blank" rel="noopener">https://hackfun.org/2017/02/22/CTF%</a> E4% B8% AD% E9%82% A3% E4% BA%9B% E8%84%91% E6% B4%9E% E5% A4% A7% E5% BC%80% E7%9A%84% E7% BC%96% E7% A0%81% E5%92%8C% E5%8A% A0% E5% AF%86/</li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 流量包分析 </tag>
            
            <tag> 整理总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Image Analysis</title>
      <link href="/2020/04/01/ctf-image-analysis/"/>
      <url>/2020/04/01/ctf-image-analysis/</url>
      
        <content type="html"><![CDATA[<p>写在前面：本文的大部分内容都源于 CTF-WIKI、维基百科和网络，如有补充和意见请发送邮件至 <a href="mailto:1316565360@qq.com" target="_blank" rel="noopener">1316565360@qq.com</a></p><h1 id="Forensic-Steganography（取证与隐写）"><a href="#Forensic-Steganography（取证与隐写）" class="headerlink" title="Forensic Steganography（取证与隐写）"></a>Forensic Steganography（取证与隐写）</h1><p>大部分的 CTF 比赛中，取证及隐写两者密不可分，两者所需要的知识也相辅相成，所以这里也将对两者一起介绍。</p><p>任何要求检查一个静态数据文件从而获取隐藏信息的都可以被认为是隐写取证题（除非单纯地是密码学的知识），一些低分的隐写取证又常常与古典密码学结合在一起，而高分的题目则通常用与一些较为复杂的现代密码学知识结合在一起，很好地体现了 Misc 题的特点。</p><h2 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h2><ul><li><p>了解常见的编码</p></li><li><p>能够对文件中出现的一些编码进行解码，并且对一些特殊的编码（Base64、十六进制、二进制等）有一定的敏感度，对其进行转换并得到最终的 flag。</p></li><li><p>能够利用脚本语言（Python 等）去操作二进制数据</p></li><li><p>熟知常见文件的文件格式，尤其是各类 文件头、协议、结构等</p></li><li><p>灵活运用常见的工具</p></li></ul><h2 id="Python-操作二进制数据"><a href="#Python-操作二进制数据" class="headerlink" title="Python 操作二进制数据"></a>Python 操作二进制数据</h2><h3 id="struct-模块"><a href="#struct-模块" class="headerlink" title="struct 模块"></a>struct 模块</h3><p>有的时候需要用 Python 处理二进制数据，比如，存取文件，socket 操作时。这时候，可以使用 Python 的 struct 模块来完成。</p><p>struct 模块中最重要的三个函数是 pack ()、unpack () 和 calcsize ()</p><p>pack (fmt, v1, v2, …) 按照给定的格式（fmt），把数据封装成字符串（实际上是类似于 c 结构体的字节流）<br>unpack (fmt, string) 按照给定的格式（fmt）解析字节流 string，返回解析出来的 tuple<br>calcsize (fmt) 计算给定的格式（fmt）占用多少字节的内存<br>这里打包格式 fmt 确定了将变量按照什么方式打包成字节流，其包含了一系列的格式字符串。这里就不再给出不同格式字符串的含义了，详细细节可以参照 Python Doc (已有中文版)</p><pre><code>&gt;&gt;&gt; import struct&gt;&gt;&gt; struct.pack (&#39;&gt;I&#39;,16)&#39;\x00\x00\x00\x10&#39;</code></pre><p>pack 的第一个参数是处理指令，’&gt;I’ 的意思是：&gt; 表示字节顺序是 Big-Endian，也就是网络序，I 表示 4 字节无符号整数。</p><p>后面的参数个数要和处理指令一致。</p><p>读入一个 BMP（一种图像格式，详见 <a href="https://blog.csdn.net/qingchuwudi/article/details/25785307" target="_blank" rel="noopener">位图 (bmp) 文件格式分析</a>） 文件的前 30 字节，文件头的结构按顺序如下</p><p>两个字节：BM 表示 Windows 位图，BA 表示 OS/2 位图<br>一个 4 字节整数：表示位图大小<br>一个 4 字节整数：保留位，始终为 0<br>一个 4 字节整数：实际图像的偏移量<br>一个 4 字节整数：Header 的字节数<br>一个 4 字节整数：图像宽度<br>一个 4 字节整数：图像高度<br>一个 2 字节整数：始终为 1<br>一个 2 字节整数：颜色数</p><pre><code>&gt;&gt;&gt; import struct&gt;&gt;&gt; bmp = &#39;\x42\x4d\x38\x8c\x0a\x00\x00\x00\x00\x00\x36\x00\x00\x00\x28\x00\x00\x00\x80\x02\x00\x00\x68\x01\x00\x00\x01\x00\x18\x00&#39;&gt;&gt;&gt; struct.unpack (&#39;&lt;ccIIIIIIHH&#39;,bmp)(&#39;B&#39;, &#39;M&#39;, 691256, 0, 54, 40, 640, 360, 1, 24)</code></pre><h3 id="bytearray-字节数组"><a href="#bytearray-字节数组" class="headerlink" title="bytearray 字节数组"></a>bytearray 字节数组</h3><p>将文件以二进制数组形式读取</p><pre><code>data = bytearray (open (&#39;challenge.png&#39;, &#39;rb&#39;).read ())</code></pre><p>字节数组就是可变版本的字节</p><pre><code>data [0] = &#39;\x89&#39;</code></pre><h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><h3 id="010-Editor"><a href="#010-Editor" class="headerlink" title="010 Editor"></a>010 Editor</h3><p>SweetScape 010 Editor 是一个全新的十六进位文件编辑器，它有别于传统的十六进位编辑器在于它可用「范本」来解析二进位文件，从而让你读懂和编辑它。它还可用来比较一切可视的二进位文件。</p><p>利用它的模板功能可以非常轻松的观察文件内部的具体结构并且依此快速更改内容。</p><h3 id="file-命令（linux-命令）"><a href="#file-命令（linux-命令）" class="headerlink" title="file 命令（linux 命令）"></a>file 命令（linux 命令）</h3><p>file 命令根据文件头（魔法字节）去识别一个文件的文件类型。</p><pre><code>root in ~/Desktop/tmp λ file flagflag: PNG image data, 450 x 450, 8-bit grayscale, non-interlaced    </code></pre><h3 id="strings-命令（linux-命令）"><a href="#strings-命令（linux-命令）" class="headerlink" title="strings 命令（linux 命令）"></a>strings 命令（linux 命令）</h3><p>打印文件中可打印的字符，经常用来发现文件中的一些提示信息或是一些特殊的编码信息，常常用来发现题目的突破口。</p><p>可以配合 grep 命令探测指定信息</p><pre><code>strings test|grep -i XXCTF</code></pre><p>也可以配合 -o 参数获取所有 ASCII 字符偏移</p><pre><code>root in ~/Desktop/tmp λ strings -o flag|head    14 IHDR    45 gAMA    64  cHRM    141 bKGD    157 tIME    202 IDATx    223 NFdVK3    361 |;*-    410 Ge%&lt;W    431 5duX@%</code></pre><h3 id="binwalk-命令"><a href="#binwalk-命令" class="headerlink" title="binwalk 命令"></a>binwalk 命令</h3><p>binwalk 本是一个固件的分析工具，比赛中常用来发现多个文件粘合再在一起的情况。根据文件头去识别一个文件中夹杂的其他文件，有时也会存在误报率（尤其是对 Pcap 流量包等文件时）。</p><blockquote><p>Binwalk 是一个快速，易于使用的工具，用于分析，逆向工程和提取固件映像。 官方给出的用途是提取固件镜像，然而，我们在做一些隐写类的题目的时候，Binwalk 这个工具非常方便。最好在 *nix 系统下使用，如果你的 Windows 版本是 1703 及以上，那么在 WSL 中安装 binwalk 是个不错的选择。</p></blockquote><pre><code>root in ~/Desktop/tmp λ binwalk flagDECIMAL       HEXADECIMAL     DESCRIPTION--------------------------------------------------------------------------------0             0x0             PNG image, 450 x 450, 8-bit grayscale, non-interlaced134           0x86            Zlib compressed data, best compression25683         0x6453          Zip archive data, at least v2.0 to extract, compressed size: 675, uncompressed size: 1159, name: readme.txt26398         0x671E          Zip archive data, at least v2.0 to extract, compressed size: 430849, uncompressed size: 1027984, name: trid457387        0x6FAAB         End of Zip archive</code></pre><p>配合 -e 参数可以进行自动化提取。</p><p>也可以结合 dd 命令进行手动切割。</p><pre><code>root in ~/Desktop/tmp λ dd if=flag of=1.zip bs=1 skip=25683431726+0 records in431726+0 records out431726 bytes (432 kB, 422 KiB) copied, 0.900973 s, 479 kB/s</code></pre><p>如果你还指定了 -M 选项，binwalk 甚至会递归扫描文件，因为它会提取它们<br>如果指定了 -r 选项，则将自动删除无法提取的任何文件签名或导致大小为 0 的文件</p><p>图像文件能够很好地包含黑客文化，因此 CTF 竞赛中经常会出现各种图像文件。</p><p>图像文件有多种复杂的格式，可以用于各种涉及到元数据、信息丢失和无损压缩、校验、隐写或可视化数据编码的分析解密，都是 Misc 中的一个很重要的出题方向。涉及到的知识点很多（包括基本的文件格式，常见的隐写手法及隐写用的软件），有的地方也需要去进行深入的理解。</p><h1 id="Introduction-to-Image-Analysis"><a href="#Introduction-to-Image-Analysis" class="headerlink" title="Introduction to Image Analysis"></a>Introduction to Image Analysis</h1><h2 id="元数据（Metadata）"><a href="#元数据（Metadata）" class="headerlink" title="元数据（Metadata）"></a>元数据（Metadata）</h2><blockquote><p>元数据（Metadata），又称中介数据、中继数据，为描述数据的数据（Data about data），主要是描述数据属性（property）的信息，用来支持如指示存储位置、历史数据、资源查找、文件记录等功能。</p></blockquote><p>元数据中隐藏信息在比赛中是最基本的一种手法，通常用来隐藏一些关键的 <code>Hint</code> 信息或者是一些重要的如 <code>password</code> 等信息。</p><p>这类元数据你可以 <code>右键 --&gt; 属性</code> 去查看，也可以通过 <code>strings</code> 命令去查看，一般来说，一些隐藏的信息（奇怪的字符串）常常出现在头部或者尾部。</p><p>接下来介绍一个 <code>identify</code> 命令，这个命令是用来获取一个或多个图像文件的格式和特性。</p><p><code>-format</code> 用来指定显示的信息，灵活使用它的 <code>-format</code> 参数可以给解题带来不少方便。<a href="https://www.imagemagick.org/script/escape.php" target="_blank" rel="noopener">format 各个参数具体意义</a></p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="https://github.com/ctfs/write-ups-2017/tree/master/breakin-ctf-2017/misc/Mysterious-GIF" target="_blank" rel="noopener">Break In 2017 - Mysterious GIF</a></p><p>这题的一个难点是发现并提取 GIF 中的元数据，首先 <code>strings</code> 是可以观察到异常点的。</p><pre class="line-numbers language-shell"><code class="language-shell">GIF89a   !!!"""###$$$%%%&&&'''((()))***+++,,,---...///000111222333444555666777888999:::;;;<<<===>>>???@@@AAABBBCCCDDDEEEFFFGGGHHHIIIJJJKKKLLLMMMNNNOOOPPPQQQRRRSSSTTTUUUVVVWWWXXXYYYZZZ [[[\\\]]]^^^___```aaabbbcccdddeeefffggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuvvvwwwxxxyyyzzz {{{|||}}}~~~4d494945767749424144414e42676b71686b6947397730424151454641415343424b6b776767536c41674541416f4942415144644d4e624c3571565769435172NETSCAPE2.0ImageMagick...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的一串 16 进制其实是藏在 GIF 的元数据区</p><p>接下来就是提取，你可以选择 Python，但是利用 <code>identify</code> 显得更加便捷</p><pre class="line-numbers language-shell"><code class="language-shell">root in ~/Desktop/tmp λ identify -format "% s % c \n" Question.gif0 4d494945767749424144414e42676b71686b6947397730424151454641415343424b6b776767536c41674541416f4942415144644d4e624c35715657694351721 5832773639712f377933536849507565707478664177525162524f72653330633655772f6f4b3877655a547834346d30414c6f75685634364b63514a6b687271...24 484b7735432b667741586c4649746d30396145565458772b787a4c4a623253723667415450574d35715661756278667362356d58482f77443969434c684a536f25 724b3052485a6b745062457335797444737142486435504646773d3d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他过程这里不在叙述，可参考链接中的 Writeup</p><h2 id="像素值转化"><a href="#像素值转化" class="headerlink" title="像素值转化"></a>像素值转化</h2><p>看看这个文件里的数据，你能想到什么？</p><pre><code>255,255,255,255,255...........</code></pre><p>是一串 RGB 值，尝试着将他转化为图片</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> rex <span class="token operator">=</span> <span class="token number">307</span> <span class="token comment" spellcheck="true">#x 坐标  通过对 txt 里的行数进行整数分解</span>y <span class="token operator">=</span> <span class="token number">311</span> <span class="token comment" spellcheck="true">#y 坐标  x*y = 行数</span>rgb1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">]</span><span class="token keyword">print</span> len <span class="token punctuation">(</span>rgb1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> xrange <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> xrange <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> rgb1 <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 获取一行</span>        m<span class="token operator">+=</span><span class="token number">1</span>        rgb <span class="token operator">=</span> line        im<span class="token punctuation">.</span>putpixel <span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>int <span class="token punctuation">(</span>rgb <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>int <span class="token punctuation">(</span>rgb <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>int <span class="token punctuation">(</span>rgb <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#rgb 转化为像素</span>im<span class="token punctuation">.</span>show <span class="token punctuation">(</span><span class="token punctuation">)</span>im<span class="token punctuation">.</span>save <span class="token punctuation">(</span><span class="token string">"flag.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而如果反过来的话，从一张图片提取 RGB 值，再对 RGB 值去进行一些对比，从而得到最终的 flag。</p><p>这类题目大部分都是一些像素块组成的图片，如下图</p><p><img src="https://s1.ax1x.com/2020/04/01/G8gDtf.png" alt></p><p>相关题目:</p><ul><li><a href="https://github.com/ctfs/write-ups-2016/tree/master/csaw-ctf-2016-quals/forensics/brainfun-50" target="_blank" rel="noopener">CSAW-2016-quals:Forensic/Barinfun</a></li><li><a href="https://github.com/ctfs/write-ups-2017/tree/master/breakin-ctf-2017/misc/A-dance-partner" target="_blank" rel="noopener">breakin-ctf-2017:A-dance-partner</a></li></ul><h1 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h1><h2 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h2><p>对于一个 PNG 文件来说，其文件头总是由位固定的字节来描述的，剩余的部分由 3 个以上的 PNG 的数据块（Chunk）按照特定的顺序组成。</p><p>文件头 <code>89 50 4E 47 0D 0A 1A 0A</code> + 数据块 + 数据块 + 数据块……</p><h3 id="数据块-CHUNk"><a href="#数据块-CHUNk" class="headerlink" title="数据块 CHUNk"></a>数据块 CHUNk</h3><p>PNG 定义了两种类型的数据块，一种是称为关键数据块（critical chunk），这是标准的数据块，另一种叫做辅助数据块（ancillary chunks），这是可选的数据块。关键数据块定义了 4 个标准数据块，每个 PNG 文件都必须包含它们，PNG 读写软件也都必须要支持这些数据块。</p><table><thead><tr><th>数据块符号</th><th>数据块名称</th><th>多数据块</th><th>可选否</th><th>位置限制</th></tr></thead><tbody><tr><td>IHDR</td><td>文件头数据块</td><td>否</td><td>否</td><td>第一块</td></tr><tr><td>cHRM</td><td>基色和白色点数据块</td><td>否</td><td>是</td><td>在 PLTE 和 IDAT 之前</td></tr><tr><td>gAMA</td><td>图像 γ 数据块</td><td>否</td><td>是</td><td>在 PLTE 和 IDAT 之前</td></tr><tr><td>sBIT</td><td>样本有效位数据块</td><td>否</td><td>是</td><td>在 PLTE 和 IDAT 之前</td></tr><tr><td>PLTE</td><td>调色板数据块</td><td>否</td><td>是</td><td>在 IDAT 之前</td></tr><tr><td>bKGD</td><td>背景颜色数据块</td><td>否</td><td>是</td><td>在 PLTE 之后 IDAT 之前</td></tr><tr><td>hIST</td><td>图像直方图数据块</td><td>否</td><td>是</td><td>在 PLTE 之后 IDAT 之前</td></tr><tr><td>tRNS</td><td>图像透明数据块</td><td>否</td><td>是</td><td>在 PLTE 之后 IDAT 之前</td></tr><tr><td>oFFs</td><td>(专用公共数据块）</td><td>否</td><td>是</td><td>在 IDAT 之前</td></tr><tr><td>pHYs</td><td>物理像素尺寸数据块</td><td>否</td><td>是</td><td>在 IDAT 之前</td></tr><tr><td>sCAL</td><td>(专用公共数据块）</td><td>否</td><td>是</td><td>在 IDAT 之前</td></tr><tr><td>IDAT</td><td>图像数据块</td><td>是</td><td>否</td><td>与其他 IDAT 连续</td></tr><tr><td>tIME</td><td>图像最后修改时间数据块</td><td>否</td><td>是</td><td>无限制</td></tr><tr><td>tEXt</td><td>文本信息数据块</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>zTXt</td><td>压缩文本数据块</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>fRAc</td><td>(专用公共数据块）</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>gIFg</td><td>(专用公共数据块）</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>gIFt</td><td>(专用公共数据块）</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>gIFx</td><td>(专用公共数据块）</td><td>是</td><td>是</td><td>无限制</td></tr><tr><td>IEND</td><td>图像结束数据</td><td>否</td><td>否</td><td>最后一个数据块</td></tr></tbody></table><p>对于每个数据块都有着统一的数据结构，每个数据块由 4 个部分组成</p><table><thead><tr><th>名称</th><th>字节数</th><th>说明</th></tr></thead><tbody><tr><td>Length（长度）</td><td>4 字节</td><td>指定数据块中数据域的长度，其长度不超过（231－1）字节</td></tr><tr><td>Chunk Type Code（数据块类型码）</td><td>4 字节</td><td>数据块类型码由 ASCII 字母（A - Z 和 a - z）组成</td></tr><tr><td>Chunk Data（数据块数据）</td><td>可变长度</td><td>存储按照 Chunk Type Code 指定的数据</td></tr><tr><td>CRC（循环冗余检测）</td><td>4 字节</td><td>存储用来检测是否有错误的循环冗余码</td></tr></tbody></table><p>CRC（Cyclic Redundancy Check）域中的值是对 Chunk Type Code 域和 Chunk Data 域中的数据进行计算得到的。</p><h3 id="IHDR"><a href="#IHDR" class="headerlink" title="IHDR"></a>IHDR</h3><p>文件头数据块 IHDR（Header Chunk）：它包含有 PNG 文件中存储的图像数据的基本信息，由 13 字节组成，并要作为第一个数据块出现在 PNG 数据流中，而且一个 PNG 数据流中只能有一个文件头数据块</p><p>其中我们关注的是前 8 字节的内容</p><table><thead><tr><th>域的名称</th><th>字节数</th><th>说明</th></tr></thead><tbody><tr><td>Width</td><td>4 bytes</td><td>图像宽度，以像素为单位</td></tr><tr><td>Height</td><td>4 bytes</td><td>图像高度，以像素为单位</td></tr></tbody></table><p>我们经常会去更改一张图片的高度或者宽度使得一张图片显示不完整从而达到隐藏信息的目的。</p><p><img src="https://s1.ax1x.com/2020/04/01/G8gLu9.png" alt></p><p>这里可以发现在 Kali 中是打不开这张图片的，提示 <code>IHDR CRC error</code>，而 Windows 10 自带的图片查看器能够打开，就提醒了我们 IHDR 块被人为的篡改过了，从而尝试修改图片的高度或者宽度发现隐藏的字符串。</p><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><h5 id="WDCTF-finals-2017"><a href="#WDCTF-finals-2017" class="headerlink" title="WDCTF-finals-2017"></a>WDCTF-finals-2017</h5><p>观察文件可以发现，文件头及宽度异常</p><pre class="line-numbers language-hex"><code class="language-hex">00000000  80 59 4e 47 0d 0a 1a 0a  00 00 00 0d 49 48 44 52  |.YNG........IHDR|00000010  00 00 00 00 00 00 02 f8  08 06 00 00 00 93 2f 8a  |............../.|00000020  6b 00 00 00 04 67 41 4d  41 00 00 9c 40 20 0d e4  |k....gAMA...@ ..|00000030  cb 00 00 00 20 63 48 52  4d 00 00 87 0f 00 00 8c  |.... cHRM.......|00000040  0f 00 00 fd 52 00 00 81  40 00 00 7d 79 00 00 e9  |....R...@..} y...|...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要注意的是，文件宽度不能任意修改，需要根据 IHDR 块的 CRC 值爆破得到宽度，否则图片显示错误不能得到 flag。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> binascii<span class="token keyword">import</span> structmisc <span class="token operator">=</span> open <span class="token punctuation">(</span><span class="token string">"misc4.png"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range <span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> misc <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">+</span> struct<span class="token punctuation">.</span>pack <span class="token punctuation">(</span><span class="token string">'>i'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">+</span> misc <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">]</span>    crc32 <span class="token operator">=</span> binascii<span class="token punctuation">.</span>crc32 <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>    <span class="token keyword">if</span> crc32 <span class="token operator">==</span> <span class="token number">0x932f8a6b</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到宽度值为 709 后，恢复图片得到 flag。</p><p><img src="https://s1.ax1x.com/2020/04/01/G8gHc4.png" alt></p><h3 id="PLTE"><a href="#PLTE" class="headerlink" title="PLTE"></a>PLTE</h3><p>调色板数据块 PLTE（palette chunk）：它包含有与索引彩色图像（indexed-color image）相关的彩色变换数据，它仅与索引彩色图像有关，而且要放在图像数据块（image data<br>chunk）之前。真彩色的 PNG 数据流也可以有调色板数据块，目的是便于非真彩色显示程序用它来量化图像数据，从而显示该图像。</p><h3 id="IDAT"><a href="#IDAT" class="headerlink" title="IDAT"></a>IDAT</h3><p>图像数据块 IDAT（image data chunk）：它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。</p><ul><li>储存图像像数数据</li><li>在数据流中可包含多个连续顺序的图像数据块</li><li>采用 LZ77 算法的派生算法进行压缩</li><li>可以用 zlib 解压缩</li></ul><p>值得注意的是，IDAT 块只有当上一个块充满时，才会继续一个新的块。</p><p>用 <code>pngcheck</code> 去查看此 PNG 文件</p><pre class="line-numbers language-shell"><code class="language-shell">λ .\pngcheck.exe -v sctf.pngFile: sctf.png (1421461 bytes)  chunk IHDR at offset 0x0000c, length 13    1000 x 562 image, 32-bit RGB+alpha, non-interlaced  chunk sRGB at offset 0x00025, length 1    rendering intent = perceptual  chunk gAMA at offset 0x00032, length 4: 0.45455  chunk pHYs at offset 0x00042, length 9: 3780x3780 pixels/meter (96 dpi)  chunk IDAT at offset 0x00057, length 65445    zlib: deflated, 32K window, fast compression  chunk IDAT at offset 0x10008, length 65524...  chunk IDAT at offset 0x150008, length 45027  chunk IDAT at offset 0x15aff7, length 138  chunk IEND at offset 0x15b08d, length 0No errors detected in sctf.png (28 chunks, 36.8% compression).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，正常的块的 length 是在 65524 的时候就满了，而倒数第二个 IDAT 块长度是 45027，最后一个长度是 138，很明显最后一个 IDAT 块是有问题的，因为他本来应该并入到倒数第二个未满的块里.</p><p>利用 <code>python zlib</code> 解压多余 IDAT 块的内容，此时注意剔除 <em><em> 长度、数据块类型及末尾的 CRC 校验值 </em></em>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> zlib<span class="token keyword">import</span> binasciiIDAT <span class="token operator">=</span> <span class="token string">"789...667"</span><span class="token punctuation">.</span>decode <span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> binascii<span class="token punctuation">.</span>hexlify <span class="token punctuation">(</span>zlib<span class="token punctuation">.</span>decompress <span class="token punctuation">(</span>IDAT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="IEND"><a href="#IEND" class="headerlink" title="IEND"></a>IEND</h3><p>图像结束数据 IEND（image trailer chunk）：它用来标记 PNG 文件或者数据流已经结束，并且必须要放在文件的尾部。</p><pre><code>00 00 00 00 49 45 4E 44 AE 42 60 82</code></pre><p>IEND 数据块的长度总是 <code>00 00 00 00</code>，数据标识总是 IEND <code>49 45 4E 44</code>，因此，CRC 码也总是 <code>AE 42 60 82</code>。</p><h3 id="其余辅助数据块"><a href="#其余辅助数据块" class="headerlink" title="其余辅助数据块"></a>其余辅助数据块</h3><ul><li>背景颜色数据块 bKGD（background color）</li><li>基色和白色度数据块 cHRM（primary chromaticities and white point），所谓白色度是指当 <code>R＝G＝B＝最大值</code> 时在显示器上产生的白色度</li><li>图像 γ 数据块 gAMA（image gamma）</li><li>图像直方图数据块 hIST（image histogram）</li><li>物理像素尺寸数据块 pHYs（physical pixel dimensions）</li><li>样本有效位数据块 sBIT（significant bits）</li><li>文本信息数据块 tEXt（textual data）</li><li>图像最后修改时间数据块 tIME （image last-modification time）</li><li>图像透明数据块 tRNS （transparency）</li><li>压缩文本数据块 zTXt （compressed textual data）</li></ul><h2 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h2><p>LSB 全称 Least Significant Bit，最低有效位。PNG 文件中的图像像数一般是由 RGB 三原色（红绿蓝）组成，每一种颜色占用 8 位，取值范围为 <code>0x00</code> 至 <code>0xFF</code>，即有 256 种颜色，一共包含了 256 的 3 次方的颜色，即 16777216 种颜色。</p><p>而人类的眼睛可以区分约 1000 万种不同的颜色，意味着人类的眼睛无法区分余下的颜色大约有 6777216 种。</p><p>LSB 隐写就是修改 RGB 颜色分量的最低二进制位（LSB），每个颜色会有 8 bit，LSB 隐写就是修改了像数中的最低的 1 bit，而人类的眼睛不会注意到这前后的变化，每个像素可以携带 3 比特的信息。</p><p><img src="https://s1.ax1x.com/2020/04/01/G8gIhT.jpg" alt></p><p>如果是要寻找这种 LSB 隐藏痕迹的话，有一个工具 <a href="http://www.caesum.com/handbook/Stegsolve.jar" target="_blank" rel="noopener">Stegsolve</a> 是个神器，可以来辅助我们进行分析。</p><p>通过下方的按钮可以观察每个通道的信息，例如查看 R 通道的最低位第 8 位平面的信息。</p><p><img src="https://s1.ax1x.com/2020/04/01/G8gT9U.png" alt></p><p>LSB 的信息借助于 Stegsolve 查看各个通道时一定要细心捕捉异常点，抓住 LSB 隐写的蛛丝马迹。</p><h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><blockquote><p>HCTF - 2016 - Misc</p></blockquote><p>这题的信息隐藏在 RGB 三个通道的最低位中，借助 <code>Stegsolve--&gt;Analyse--&gt;Data Extract</code> 可以指定通道进行提取。</p><p><img src="https://s1.ax1x.com/2020/04/01/G8gf7q.png" alt></p><p>可以发现 <code>zip</code> 头，用 <code>save bin</code> 保存为压缩包后，打开运行其中的 ELF 文件就可以得到最后的 flag。</p><blockquote><p>更多关于 LSB 的研究可以看 <a href="https://zhuanlan.zhihu.com/p/23890677" target="_blank" rel="noopener">这里</a>。</p></blockquote><h2 id="隐写软件"><a href="#隐写软件" class="headerlink" title="隐写软件"></a>隐写软件</h2><p><a href="http://domnit.org/stepic/doc/" target="_blank" rel="noopener">Stepic</a></p><h1 id="JPG"><a href="#JPG" class="headerlink" title="JPG"></a>JPG</h1><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><ul><li>JPEG 是有损压缩格式，将像素信息用 JPEG 保存成文件再读取出来，其中某些像素值会有少许变化。在保存时有个质量参数可在 0 至 100 之间选择，参数越大图片就越保真，但图片的体积也就越大。一般情况下选择 70 或 80 就足够了</li><li>JPEG 没有透明度信息</li></ul><p>JPG 基本数据结构为两大类型：「段」和经过压缩编码的图像数据。</p><table><thead><tr><th>名 称</th><th>字节数</th><th>数据</th><th>说明</th></tr></thead><tbody><tr><td>段 标识</td><td>1</td><td>FF</td><td>每个新段的开始标识</td></tr><tr><td>段类型</td><td>1</td><td></td><td>类型编码（称作标记码）</td></tr><tr><td>段长 度</td><td>2</td><td></td><td>包括段内容和段长度本身，不包括段标识和段类型</td></tr><tr><td>段内容</td><td>2</td><td></td><td>≤65533 字节</td></tr></tbody></table><ul><li>有些段没有长度描述也没有内容，只有段标识和段类型。文件头和文件尾均属于这种段。</li><li>段与段之间无论有多少 <code>FF</code> 都是合法的，这些 <code>FF</code> 称为「填充字节」，必须被忽略掉。</li></ul><p>一些常见的段类型</p><p><img src="https://s1.ax1x.com/2020/04/01/G8g5NV.png" alt></p><p><code>0xffd8</code> 和 <code>0xffd9</code> 为 JPG 文件的开始结束的标志。</p><h2 id="隐写软件-1"><a href="#隐写软件-1" class="headerlink" title="隐写软件"></a>隐写软件</h2><h3 id="Stegdetect"><a href="#Stegdetect" class="headerlink" title="Stegdetect"></a><a href="https://github.com/redNixon/stegdetect" target="_blank" rel="noopener">Stegdetect</a></h3><p>通过统计分析技术评估 JPEG 文件的 DCT 频率系数的隐写工具，可以检测到通过 JSteg、JPHide、OutGuess、Invisible<br>Secrets、F5、appendX 和 Camouflage 等这些隐写工具隐藏的信息，并且还具有基于字典暴力破解密码方法提取通过 Jphide、outguess 和 jsteg-shell 方式嵌入的隐藏信息。</p><pre class="line-numbers language-shell"><code class="language-shell">-q 仅显示可能包含隐藏内容的图像。-n 启用检查 JPEG 文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果 JPEG 文件的 JFIF 标识符中的版本号不是 1.1，则禁用 OutGuess 检测。-s 修改检测算法的敏感度，该值的默认值为 1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。-d 打印带行号的调试信息。-t 设置要检测哪些隐写工具（默认检测 jopi），可设置的选项如下：j 检测图像中的信息是否是用 jsteg 嵌入的。o 检测图像中的信息是否是用 outguess 嵌入的。p 检测图像中的信息是否是用 jphide 嵌入的。i 检测图像中的信息是否是用 invisible secrets 嵌入的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JPHS"><a href="#JPHS" class="headerlink" title="JPHS"></a><a href="http://linux01.gwdg.de/~alatham/stego.html" target="_blank" rel="noopener">JPHS</a></h3><p>JPEG 图像的信息隐藏软件 JPHS，它是由 Allan Latham 开发设计实现在 Windows 和 Linux 系统平台针对有损压缩 JPEG 文件进行信息加密隐藏和探测提取的工具。软件里面主要包含了两个程序 JPHIDE 和 JPSEEK。JPHIDE 程序主要是实现将信息文件加密隐藏到 JPEG 图像功能，而 JPSEEK 程序主要实现从用 JPHIDE 程序加密隐藏得到的 JPEG 图像探测提取信息文件，Windows 版本的 JPHS 里的 JPHSWIN 程序具有图形化操作界面且具备 JPHIDE 和 JPSEEK 的功能。</p><h3 id="SilentEye"><a href="#SilentEye" class="headerlink" title="SilentEye"></a><a href="http://silenteye.v1kings.io/" target="_blank" rel="noopener">SilentEye</a></h3><blockquote><p>SilentEye is a cross-platform application design for an easy use of steganography, in this case hiding messages into pictures or sounds. It provides a pretty nice interface and an easy integration of new steganography algorithm and cryptography process by using a plug-ins system.</p></blockquote><h1 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h1><h2 id="文件结构-1"><a href="#文件结构-1" class="headerlink" title="文件结构"></a>文件结构</h2><p>一个 GIF 文件的结构可分为</p><ul><li>文件头（File Header）<ul><li>GIF 文件署名（Signature）</li><li>版本号（Version）</li></ul></li><li>GIF 数据流（GIF Data Stream）<ul><li>控制标识符</li><li>图象块（Image Block）</li><li>其他的一些扩展块</li></ul></li><li>文件终结器（Trailer）</li></ul><p>下表显示了一个 GIF 文件的组成结构：</p><p><img src="https://s1.ax1x.com/2020/04/01/G8gRns.png" alt></p><p>中间的那个大块可以被重复任意次</p><h3 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h3><p>GIF 署名（Signature）和版本号（Version）。GIF 署名用来确认一个文件是否是 GIF 格式的文件，这一部分由三个字符组成：<code>GIF</code>；文件版本号也是由三个字节组成，可以为 <code>87a</code> 或 <code>89a</code>。</p><h3 id="逻辑屏幕标识符（Logical-Screen-Descriptor）"><a href="#逻辑屏幕标识符（Logical-Screen-Descriptor）" class="headerlink" title="逻辑屏幕标识符（Logical Screen Descriptor）"></a>逻辑屏幕标识符（Logical Screen Descriptor）</h3><p>Logical Screen Descriptor（逻辑屏幕描述符）紧跟在 header 后面。这个块告诉 decoder（解码器）图片需要占用的空间。它的大小固定为 7 个字节，以 canvas width（画布宽度）和 canvas height（画布高度）开始。</p><h3 id="全局颜色列表（Global-Color-Table）"><a href="#全局颜色列表（Global-Color-Table）" class="headerlink" title="全局颜色列表（Global Color Table）"></a>全局颜色列表（Global Color Table）</h3><p>GIF 格式可以拥有 global color table，或用于针对每个子图片集，提供 local color table。每个 color<br>table 由一个 RGB（就像通常我们见到的（255，0，0）红色 那种）列表组成。</p><h3 id="图像标识符（Image-Descriptor）"><a href="#图像标识符（Image-Descriptor）" class="headerlink" title="图像标识符（Image Descriptor）"></a>图像标识符（Image Descriptor）</h3><p>一个 GIF 文件一般包含多个图片。之前的图片渲染模式一般是将多个图片绘制到一个大的（virtual<br>canvas）虚拟画布上，而现在一般将这些图片集用于实现动画。</p><p>每个 image 都以一个 image descriptor block（图像描述块）作为开头，这个块固定为 10 字节。</p><p><img src="https://s1.ax1x.com/2020/04/01/G8gy9S.png" alt></p><h3 id="图像数据（Image-Data）"><a href="#图像数据（Image-Data）" class="headerlink" title="图像数据（Image Data）"></a>图像数据（Image Data）</h3><p>终于到了图片数据实际存储的地方。Image Data 是由一系列的输出编码（output codes）构成，它们告诉 decoder（解码器）需要绘制在画布上的每个颜色信息。这些编码以字节码的形式组织在这个块中。</p><h3 id="文件终结器（Trailer）"><a href="#文件终结器（Trailer）" class="headerlink" title="文件终结器（Trailer）"></a>文件终结器（Trailer）</h3><p>该块为一个单字段块，用来指示该数据流的结束。取固定值 0x3b.</p><p>更多参见 <a href="http://www.jianshu.com/p/df52f1511cf8" target="_blank" rel="noopener">gif 格式图片详细解析</a></p><h2 id="空间轴"><a href="#空间轴" class="headerlink" title="空间轴"></a>空间轴</h2><p>由于 GIF 的动态特性，由一帧帧的图片构成，所以每一帧的图片，多帧图片间的结合，都成了隐藏信息的一种载体。</p><p>对于需要分离的 GIF 文件，可以使用 <code>convert</code> 命令将其每一帧分割开来</p><pre class="line-numbers language-sourceCode"><code class="language-sourceCode">root in ~/Desktop/tmp λ convert cake.gif cake.pngroot in ~/Desktop/tmp λ lscake-0.png  cake-1.png  cake-2.png  cake-3.png  cake.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h3><blockquote><p>WDCTF-2017:3-2</p></blockquote><p>打开 gif 后，思路很清晰，分离每一帧图片后，将起合并得到完整的二维码即可</p><pre class="line-numbers language-sourceCode"><code class="language-sourceCode">from  PIL import Imageflag = Image.new ("RGB",(450,450))for i in range (2):    for j in range (2):        pot = "cake-{}.png".format (j+i*2)        potImage = Image.open (pot)        flag.paste (potImage,(j*225,i*225))flag.save ('./flag.png')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扫码后得到一串 16 进制字符串</p><p><code>03f30d0ab8c1aa5....74080006030908</code></p><p>开头 <code>03f3</code> 为 <code>pyc</code> 文件的头，恢复为 <code>python</code> 脚本后直接运行得到 flag</p><h2 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h2><p>GIF 文件每一帧间的时间间隔也可以作为信息隐藏的载体。</p><p>例如在当时在 XMan 选拔赛出的一题</p><blockquote><p>XMAN-2017:100.gif</p></blockquote><p>通过 <code>identify</code> 命令清晰的打印出每一帧的时间间隔</p><pre class="line-numbers language-shell"><code class="language-shell">$ identify -format "% s % T \n" 100.gif0 661 662 203 104 205 106 107 208 209 2010 2011 1012 2013 2014 1015 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推断 <code>20 &amp; 10</code>  分别代表 <code>0 &amp; 1</code>，提取每一帧间隔并进行转化。</p><pre class="line-numbers language-shell"><code class="language-shell">$ cat flag|cut -d ' ' -f 2|tr -d '66'|tr -d '\n'|tr -d '0'|tr '2' '0'0101100001001101010000010100111001111011001110010011011000110101001101110011010101100010011001010110010101100100001101000110010001100101011000010011000100111000011001000110010101100100001101000011011100110011001101010011011000110100001100110110000101100101011000110110011001100001001100110011010101111101#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后转 ASCII 码得到 flag。</p><h2 id="隐写软件-2"><a href="#隐写软件-2" class="headerlink" title="隐写软件"></a>隐写软件</h2><ul><li><a href="https://github.com/matthewgao/F5-steganography" target="_blank" rel="noopener">F5-steganography</a></li></ul><h1 id="概括与总结"><a href="#概括与总结" class="headerlink" title="概括与总结"></a>概括与总结</h1><p>看到这里，你应该对图片隐写有了基本的了解了，是不是依然感觉迷茫呢？下面的总结或许会帮到你。</p><h2 id="附加式的图片隐写"><a href="#附加式的图片隐写" class="headerlink" title="附加式的图片隐写"></a>附加式的图片隐写</h2><p>在附加式的图片隐写术中，通常用某种程序或者某种方法在载体文件中直接附加上需要被隐写的目标，然后将载体文件直接传输给接受者或者发布到网站上，然后接受者者根据方法提取出被隐写的消息，这一个过程就是附加式图片隐写。</p><p>在 CTF 赛事中，关于这种图片隐写的大概有两种经典方式，一是直接附加字符串，二是图种的形式出现。</p><blockquote><p>A. 附加字符串  </p></blockquote><p>这种方式是利用工具将隐藏信息直接写入到图片结束符之后，由于计算机中图片处理程序识别到图片结束符就不再继续向下识别，因此后面的信息就被隐藏起来。这种方式可以利用 winhex，ghex 等工具进行打开，或者 notepad 打开也可看到最后的附加的字符，所以虽然简单，但是隐藏效果不是很好。</p><p>windows 下制作这种图片的方式也有很多，比如刚才说到的 winhex 直接在文件尾写入字节，或利用 copy /b a.jpg+b.txt c.jpg 来进行制作。其中 a.jpg 是一张普通图片，即将作为信息的载体，b.txt 中是隐藏的信息，c.jpg 是附加了隐藏信息的图片，发送时就是发送 c.jpg。</p><blockquote><p>B. 图种</p></blockquote><p>图种是一种采用特殊方式将图片文件（如 jpg 格式）与 rar 文件结合起来的文件。该文件一般保存为 jpg 格式，可以正常显示图片，当有人获取该图片后，可以修改文件的后缀名，将图片改为 rar 压缩文件，便可得到其中的数据。刚才我们说过，因为计算机中图片处理程序识别图片的过程是，从图片头开始，以图片头声明的格式所定义的编码格式对数据流进行读取，一直到图片的结束符，当图片处理程序识别到图片的结束符后，不再继续向下识别，所以我们在通常情况下只能看到它是只是一张图片。</p><p>但使用 binwalk 程序可以轻松对其进行识别并还原，binwalk 程序在上面有讲解。也可以利用 winhex 寻找到图片的结束符，然后在其后查找是否有 zip 或 rar 等文件的文件头。最后也可利用转换文件后缀对其进行读取并解压，具体过程在这篇博客中有用到。</p><h2 id="基于文件结构的图片隐写"><a href="#基于文件结构的图片隐写" class="headerlink" title="基于文件结构的图片隐写"></a>基于文件结构的图片隐写</h2><p>这里的文件结构特指的是图片文件的文件结构。我们这里主要讲的是 PNG 图片的文件结构。  </p><p>PNG，图像文件存储格式，其设计目的是试图替代 GIF 和 TIFF 文件格式，同时增加一些 GIF 文件格式所不具备的特性。是一种位图文件 (bitmap file) 存储格式，读作 “ping”。PNG 用来存储灰度图像时，灰度图像的深度可多到 16 位，存储彩色图像时，彩色图像的深度可多到 48 位，并且还可存储多到 16 位的 α 通道数据。</p><p>对于一个正常的 PNG 图片来讲，其文件头总是由固定的字节来表示的，其 16 进制表示为 89 50 4E 47 0D 0A 1A 0A，这一部分称作 PNG 文件头。<br>标准的 PNG 文件结构应包括：<br>1.PNG 文件标识</p><p>2.PNG 数据块 PNG 图片有两种数据块的，一种是关键数据块，另一种是辅助数据块。正常的关键数据块，定义了 4 种标准数据块，分别是长度，数据块类型码，数据块数据，循环冗余检测即 CRC，每个 PNG 文件都必须包含它们。<br>我们这里重点先了解一下，PNG 图片文件头数据块以及 PNG 图片 IDAT 块，这次的隐写也是以这两个地方为基础的。</p><p><em><em>PNG 图片文件头数据块 </em></em><br>即 IHDR (Image HeaDeR)，这是 PNG 图片的第一个数据块，一张 PNG 图片仅有一个 IHDR 数据块，它包含了图片的宽，高，图像深度，颜色类型，压缩方法等等信息。(即定义图片数据流的读取规则)</p><p><em><em>PNG 图片 IDAT (Image DATa) 数据块 </em></em><br>它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。这是一个可以存在多个数据块类型的数据块。它的作用就是存储着图像真正的数据。因为它是可以存在多个的，所以即使我们写入一个多余的 IDAT 也不会明显影响肉眼对图片的观察。</p><blockquote><p>高度被修改引起的隐写</p></blockquote><p>刚才我们了解到，IHDR 中定义了图片的高度和宽度，可以通过修改高度值或宽度值对部分信息进行隐藏。</p><p>如果图片原本是 800 (宽)<em>600 (高)，然后图片的高度从 600 变成 500，这样下面 800×100 区域的信息就无法从图片中显示出来，我们可见的只有上方 800</em>500 的区域，这样就达成了图片隐写的目的。同理可知图片的宽度也可以进行类似的修改以达到隐藏信息的目的。</p><p>为了还原图片，可以利用 winhex 或者 010Editor 等编辑器打开图片。但我们推荐后者，因为它提供了不同文件的模板，通过加载 png 模板，我们可以直观的知道哪里是 PNG 的长度字段或宽度字段，它提供了 hex 字符串到字段名的映射，更便于我们进行修改。在修改文件后，需要利用 CRC Calculator 对 CRC 校验码进行重新计算赋值，以防图片被修改后，自身的 CRC 校验报错，导致图片不能正常打开。</p><blockquote><p>图片中加入 IDAT 块以实现隐写</p></blockquote><p>刚才我们提到过一个图片的 IDAT 块是可以存在多个的，这也导致我们可以利用添加 IDAT 块的方式来实现信息的隐写。</p><p>利用 PNGcheck 软件可以验证 PNG 文件的完整性，利用 pngcheck -v a.jpg 可以对图片的文件结构进行检测。</p><p>文件结构中可能会存在 size=0 的 IDAT 块，这说明相应的块是无法用肉眼看到的，也即隐藏的内容。可以通过脚本对隐藏内容进行提取。现在我还没有刷到类似的题，刷到了会补链接和代码。</p><h2 id="基于-LSB-原理的图片隐写"><a href="#基于-LSB-原理的图片隐写" class="headerlink" title="基于 LSB 原理的图片隐写"></a>基于 LSB 原理的图片隐写</h2><p>LSB，最低有效位，英文是 Least Significant Bit 。我们知道图像像素一般是由 RGB 三原色（即红绿蓝）组成的，每一种颜色占用 8 位，0x00~0xFF，即一共有 256 种颜色，一共包含了 256 的 3 次方的颜色，颜色太多，而人的肉眼能区分的只有其中一小部分，这导致了当我们修改 RGB 颜色分量中最低的二进制位的时候，我们的肉眼是区分不出来的。</p><h3 id="简单的-LSB-隐写"><a href="#简单的-LSB-隐写" class="headerlink" title="简单的 LSB 隐写"></a>简单的 LSB 隐写</h3><p>这种隐写仅对于某一通道值进行改写。将要隐写的信息图片直接覆盖该通道的相应值，即可实现信息的隐写。这种方式利用 Stegsolve 软件变换图层即可实现还原，相比而言隐秘性较低。</p><h3 id="有一点难度的-LSB-隐写"><a href="#有一点难度的-LSB-隐写" class="headerlink" title="有一点难度的 LSB 隐写"></a>有一点难度的 LSB 隐写</h3><p>最简单的隐写我们只需要通过工具 Stegsolve 切换到不同通道，可以直接看到隐写内容了，那么更复杂一点就不是这么直接了，而是只能通过工具来查看 LSB 的隐写痕迹，再通过工具或者脚本的方式提取隐写信息。</p><p>这种方式的解密，可以利用工具将每个 LSB 的值导出为一个流，然后转换为字符串进行读取。这种方式的隐蔽性相对来讲较高，一般难以发现。</p><h2 id="基于-DCT-域的-JPG-图片隐写"><a href="#基于-DCT-域的-JPG-图片隐写" class="headerlink" title="基于 DCT 域的 JPG 图片隐写"></a>基于 DCT 域的 JPG 图片隐写</h2><p>JPEG 图像格式使用离散余弦变换（Discrete Cosine Transform，DCT）函数来压缩图像，而这个图像压缩方法的核心是：通过识别每个 8×8 像素块中相邻像素的重复像素来减少显示图像所需的位数，并使用近似估算法降低其冗余度。因此，我们可以把 DCT 看作一个用于执行压缩的近似计算方法。因为丢失了部分数据，所以 DCT 是一种有损压缩（Loss Compression）技术，但一般不会影响图像的视觉效果。(有点 CNN 的影子)<br>在这个隐写家族中，常见的隐写方法有 JSteg、JPHide、Outguess、F5 等等</p><blockquote><p>Stegdetect</p></blockquote><p>实现 JPEG 图像 Jphide 隐写算法工具有多个，比如由 Neils Provos 开发通过统计分析技术评估 JPEG 文件的 DCT 频率系数的隐写工具 Stegdetect，它可以检测到通过 JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX 和 Camouflage 等这些隐写工具隐藏的信息，并且还具有基于字典暴力破解密码方法提取通过 Jphide、outguess 和 jsteg-shell 方式嵌入的隐藏信息。</p><blockquote><p>JPHS</p></blockquote><p>一款 JPEG 图像的信息隐藏软件 JPHS，它是由 Allan Latham 开发设计实现在 Windows 和 Linux 系统平台针对有损压缩 JPEG 文件进行信息加密隐藏和探测提取的工具。软件里面主要包含了两个程序 JPHIDE 和 JPSEEK， JPHIDE 程序主要是实现将信息文件加密隐藏到 JPEG 图像功能，而 JPSEEK 程序主要实现从用 JPHIDE 程序加密隐藏得到的 JPEG 图像探测提取信息文件，Windows 版本的 JPHS 里的 JPHSWIN 程序具有图形化操作界面且具备 JPHIDE 和 JPSEEK 的功能。</p><blockquote><p>Outguess</p></blockquote><p>Outgusee 算法是 Niels Provos 针对 Jsteg 算法的缺陷提出的一种方法：</p><ol><li><p>嵌入过程不修改 ECT 系数值为 0，1 的 DCT 系数，利用为随机数发生器产生间隔以决定下一个要嵌入的 DCT 系数的位置</p></li><li><p>纠正过程消除对效应的出现对应的，也有针对该算法的隐写工具，名字也叫 Outguess。</p></li></ol><p>对于这种隐写方法的还原，首先利用 Stegdetect 对图片进行检测，判断该图片利用的是何种隐写方式。然后针对不同的隐写方式，选择对应的工具进行信息的还原。比如利用 JPHS 还原 jphide 隐写，利用 Outguess 还原 outguess 隐写等等。</p><h2 id="容差比较的隐写"><a href="#容差比较的隐写" class="headerlink" title="容差比较的隐写"></a>容差比较的隐写</h2><p>容差，指的是在选取颜色时所设置的选取范围，容差越大，选取的范围也越大，其数值是在 0-255 之间。</p><p>在隐写术方面，可以根据容差进行信息的隐藏。若是有两张图片，则对两张图片的每一个像素点进行对比，设置一个容差的阈值 α，超出这个阈值的像素点 RGB 值设置为 (255,255,255), 若是没超过阈值，则设置该像素点的 RGB 值为 (0,0,0)。因此，通过调整不同的 α 值，可以使对比生成的图片呈现不同的画面。比如两张图完全一样，设置阈值 α 为任何值，最后得到的对比图都只会是全黑。若两张图每一个像素点都不同，阈值 α 设置为 1，则对比图将是全白。如果将隐藏信息附加到某些像素点上，这时调整阈值 α 即可看到隐藏信息。</p><p>如果是一张图片，则根据每一像素点周围像素的值进行判断，同样设置一个阈值，若当前像素点超过周围像素点的均值，或者其它的某种规则，则将该像素点 RGB 值置为 (255,255,255)，反之则不进行处理，或者设置为全 0. 这样也可以获得隐藏的信息。</p><h1 id="拓展推荐"><a href="#拓展推荐" class="headerlink" title="拓展推荐"></a>拓展推荐</h1><ul><li><a href="https://blog.csdn.net/qingchuwudi/article/details/25785307" target="_blank" rel="noopener">位图 (bmp) 文件格式分析</a></li><li><a href="https://blog.csdn.net/dyw_666666/article/details/88650738" target="_blank" rel="noopener">图片隐写查看神器 stegsolve 使用方法</a></li><li><a href="https://blog.csdn.net/joqian/article/details/8290389" target="_blank" rel="noopener">分析 PNG 图像结构</a></li><li><a href="https://blog.csdn.net/All__Blue/article/details/78218725?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">CTF 图片隐写题</a></li><li><a href="https://www.sqlsec.com/2018/01/ctfimg.html" target="_blank" rel="noopener">CTF 中图片隐写的一些整理总结</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Image Analysis </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-encode</title>
      <link href="/2020/04/01/ctf-misc/"/>
      <url>/2020/04/01/ctf-misc/</url>
      
        <content type="html"><![CDATA[<p>本部分包含 Misc 的简介和 encode 的介绍，收集总结自 CTF-wiki、维基百科，题目主要来源于 Jarvis OJ，如有补充和意见请发送邮件至 <a href="mailto:1316565360@qq.com" target="_blank" rel="noopener">1316565360@qq.com</a></p><h1 id="Misc-简介"><a href="#Misc-简介" class="headerlink" title="Misc 简介"></a>Misc 简介</h1><p>Misc 是英文 Miscellaneous 的前四个字母，杂项、混合体、大杂烩的意思。<br>Misc 在国外的比赛中其实又被具体划分为各个小块，有</p><ul><li>Recon</li><li>Forensic</li><li>Stego</li><li>Misc</li><li>……</li></ul><p>在国内的比赛中，被统一划分入 Misc 领域，有时 Crypto（尤其是古典密码）也被划入其中。</p><p>在 Misc 这一章节中，将从以下几个方面介绍这一块的知识：</p><ul><li><p>Recon（信息搜集）</p><p>主要介绍一些获取信息的渠道和一些利用百度、谷歌等搜索引擎的技巧</p></li><li><p>Encode（编码转换）</p><p>主要介绍在 CTF 比赛中一些常见的编码形式以及转换的技巧和常见方式</p></li><li><p>Forensic &amp;&amp; Stego（数字取证 &amp;&amp; 隐写分析）</p><p>隐写取证是 Misc 中最为重要的一块，包括文件分析、隐写、内存镜像分析和流量抓包分析等等，涉及巧妙的编码、隐藏数据、层层嵌套的文件中的文件，灵活利用搜索引擎获取所需要的信息等等。</p></li></ul><h1 id="Recon（信息搜集）"><a href="#Recon（信息搜集）" class="headerlink" title="Recon（信息搜集）"></a>Recon（信息搜集）</h1><h2 id="渠道"><a href="#渠道" class="headerlink" title="渠道"></a>渠道</h2><ul><li>公开渠道</li><li>目标 Web 网页、地理位置、相关组织</li><li>组织结构和人员、个人资料、电话、电子邮件</li><li>网络配置、安全防护机制的策略和技术细节</li><li>通过搜索引擎查找特定安全漏洞或私密信息的方法</li><li><a href="https://www.exploit-db.com/google-hacking-database/" target="_blank" rel="noopener">Google Hacking Database</a></li><li>科学上网</li></ul><h2 id="地图和街景搜索"><a href="#地图和街景搜索" class="headerlink" title="地图和街景搜索"></a>地图和街景搜索</h2><ul><li>国外：Google Map、Google Earth、Google Street View</li><li>国内：百度地图、卫星地图、街景</li><li>从网络世界到物理世界：IP2Location</li><li>whois 数据库</li><li>GeoIP</li><li>IP2Location</li><li>纯真数据库（QQ IP 查询）</li></ul><h1 id="Commonly-Used-Coding-in-the-Communication-Field"><a href="#Commonly-Used-Coding-in-the-Communication-Field" class="headerlink" title="Commonly Used Coding in the Communication Field"></a>Commonly Used Coding in the Communication Field</h1><h2 id="电话拨号编码"><a href="#电话拨号编码" class="headerlink" title="电话拨号编码"></a>电话拨号编码</h2><p>1-9 分别使用 1-9 个脉冲，0 则表示使用 10 个脉冲。</p><h2 id="Morse-编码"><a href="#Morse-编码" class="headerlink" title="Morse 编码"></a>Morse 编码</h2><p>参见 [摩尔斯编码 - 维基百科](<a href="https://zh.wikipedia.org/wiki/%" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%</a> E6%91% A9% E5% B0%94% E6%96% AF% E7%94% B5% E7% A0%81)，对应表如下</p><p><img src="https://s1.ax1x.com/2020/04/01/GlfSoV.png" alt="摩尔斯电码"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>只有 <code>.</code> 和 <code>-</code>；</li><li>最多 6 位；</li><li>也可以使用 <code>01</code> 串表示。</li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx" target="_blank" rel="noopener">摩尔斯编码在线转换</a></li></ul><h2 id="敲击码"><a href="#敲击码" class="headerlink" title="敲击码"></a>敲击码</h2><p>敲击码（Tap code）是一种以非常简单的方式对文本信息进行编码的方法。因该编码对信息通过使用一系列的点击声音来编码而命名，敲击码是基于 5 ×5 方格波利比奥斯方阵来实现的，不同点是是用 K 字母被整合到 C 中。</p><table><thead><tr><th>Tap Code</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>B</td><td>C/K</td><td>D</td><td>E</td></tr><tr><td>2</td><td>F</td><td>G</td><td>H</td><td>I</td><td>J</td></tr><tr><td>3</td><td>L</td><td>M</td><td>N</td><td>O</td><td>P</td></tr><tr><td>4</td><td>Q</td><td>R</td><td>S</td><td>T</td><td>U</td></tr><tr><td>5</td><td>V</td><td>W</td><td>X</td><td>Y</td><td>Z</td></tr></tbody></table><p><img src="https://s1.ax1x.com/2020/04/01/GlfPWF.jpg" alt></p><h2 id="曼彻斯特编码"><a href="#曼彻斯特编码" class="headerlink" title="曼彻斯特编码"></a>曼彻斯特编码</h2><ul><li>[曼彻斯特编码 - 维基百科](<a href="https://zh.wikipedia.org/wiki/%" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%</a> E6%9B% BC% E5% BD% BB% E6%96% AF% E7%89% B9% E7% BC%96% E7% A0%81)</li></ul><blockquote><p>在电信与数据存储中，曼彻斯特编码（Manchester coding），又称自同步码、相位编码（phase encoding，PE），能够用信号的变化来保持发送设备和接收设备之间的同步。它用电压的变化来分辨 0 和 1，从高电平到低电平的跳变代表 1，而从低电平到高电平的跳变代表 0 (as per G.E.Tomas 编码方式)。从高电平到低电平的跳变代表 0，而从低电平到高电平的跳变代表 1 (as per IEEE 802.3 编码方式)，下方有所展示。信号的保持不会超过一个比特位的时间间隔。即使是 0 或 1 的序列，信号也将在每个时间间隔的中间发生跳变。这种跳变将允许接收设备的时钟与发送设备的时钟保持一致。</p></blockquote><div align="center"><img src="https://s1.ax1x.com/2020/04/01/Gl7png.png"></div><p><img src="https://s1.ax1x.com/2020/04/01/Gl7KHJ.png" alt></p><h2 id="格雷编码"><a href="#格雷编码" class="headerlink" title="格雷编码"></a>格雷编码</h2><ul><li>[格雷码 - 维基百科](<a href="https://zh.wikipedia.org/wiki/%" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%</a> E6% A0% BC% E9%9B% B7% E7% A0%81)<blockquote><p>格雷码（Gray code）是由贝尔实验室的 Frank Gray 在 1940 年提出，用于在 PCM（脉冲编码调变）方法传送讯号时防止出错，并于 1953 年三月十七日取得美国专利。格雷码是一个数列集合，相邻两数间只有一个位元改变，为无权数码，且格雷码的顺序不是唯一的。传统的二进制系统例如数字 3 的表示法为 011，要切换为邻近的数字 4，也就是 100 时，装置中的三个位元都得要转换，因此于未完全转换的过程时装置会经历短暂的，010,001,101,110,111 等其中数种状态，也就是代表着 2、1、5、6、7，因此此种数字编码方法于邻近数字转换时有比较大的误差可能范围。葛雷码的发明即是用来将误差之可能性缩减至最小，编码的方式定义为每个邻近数字都只相差一个位元，因此也称为最小差异码，可以使装置做数字步进时只更动最少的位元数以提高稳定性。</p></blockquote></li></ul><p>数字 0～7 的编码比较如下：</p><table><thead><tr><th>十进制</th><th>格雷码</th><th>二进制</th></tr></thead><tbody><tr><td>0</td><td>000</td><td>000</td></tr><tr><td>1</td><td>001</td><td>001</td></tr><tr><td>2</td><td>011</td><td>010</td></tr><tr><td>3</td><td>010</td><td>011</td></tr><tr><td>4</td><td>110</td><td>100</td></tr><tr><td>5</td><td>111</td><td>101</td></tr><tr><td>6</td><td>101</td><td>110</td></tr><tr><td>7</td><td>100</td><td>111</td></tr></tbody></table><h2 id="字母表编码"><a href="#字母表编码" class="headerlink" title="字母表编码"></a>字母表编码</h2><ul><li>A-Z/a-z 对应 1-26 或者 0-25</li></ul><h2 id="ASCII-编码"><a href="#ASCII-编码" class="headerlink" title="ASCII 编码"></a>ASCII 编码</h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>我们一般使用的 ascii 编码的时候采用的都是可见字符，而且主要是如下字符</p><ul><li>0-9, 49-57</li><li>A-Z, 65-90</li><li>a-z, 97-122</li></ul><h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><h4 id="二进制编码"><a href="#二进制编码" class="headerlink" title="二进制编码"></a>二进制编码</h4><p>将 ascii 码对应的数字换成二进制表示形式。</p><ul><li>只有 0 和 1</li><li>不大于 8 位，一般 7 位也可以，因为可见字符到 127。</li><li>其实是另一种 ascii 编码。</li></ul><h4 id="十六进制编码"><a href="#十六进制编码" class="headerlink" title="十六进制编码"></a>十六进制编码</h4><p>将 ascii 码对应的数字换成十六进制表示形式。</p><ul><li>A-Z–&gt;41-5 A</li><li>a-z–&gt;61-7 A</li></ul><h3 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h3><ul><li>jpk, ascii to number, number to ascii</li><li><a href="http://www.ab126.com/goju/1711.html" target="_blank" rel="noopener">http://www.ab126.com/goju/1711.html</a></li></ul><h2 id="Base-编码"><a href="#Base-编码" class="headerlink" title="Base 编码"></a>Base 编码</h2><p>base xx 中的 xx 表示的是采用多少个字符进行编码，比如说 base64 就是采用以下 64 个字符编码，由于 2 的 6 次方等于 64，所以每 6 个比特为一个单元，对应某个可打印字符。3 个字节就有 24 个比特，对应于 4 个 Base64 单元，即 3 个字节需要用 4 个可打印字符来表示。它可用来作为电子邮件的传输编码。在 Base64 中的可打印字符包括字母 A-Z、a-z、数字 0-9，这样共有 62 个字符，此外两个可打印符号在不同的系统中而不同。</p><p><img src="https://s1.ax1x.com/2020/04/01/GlWxZq.png" alt="base64"></p><p>具体介绍参见 <a href="https://zh.wikipedia.org/wiki/Base64" target="_blank" rel="noopener">Base64 - 维基百科</a>。</p><p><em><em> 编码 man</em></em></p><p><img src="https://s1.ax1x.com/2020/04/01/GlWzd0.png" alt="base64 编码 MAN"></p><p>如果要编码的字节数不能被 3 整除，最后会多出 1 个或 2 个字节，那么可以使用下面的方法进行处理：先使用 0 值在末尾补足，使其能够被 3 整除，然后再进行 base64 的编码。在编码后的 base64 文本后加上一个或两个 <code>=</code> 号，代表补足的字节数。也就是说，当最后剩余一个八位字节（一个 byte）时，最后一个 6 位的 base64 字节块有四位是 0 值，最后附加上两个等号；如果最后剩余两个八位字节（2 个 byte）时，最后一个 6 位的 base 字节块有两位是 0 值，最后附加一个等号。参考下表：</p><p><img src="https://s1.ax1x.com/2020/04/01/GlWOMj.png" alt="base64 补 0"></p><p>由于解码时补位的 0 并不参与运算，可以在该处隐藏信息。</p><p>与 base64 类似，base32 使用 32 个可见字符进行编码，2 的 5 次方为 32，所以每 5 bit 为 1 个分组。5 字节为 40 bit，对应于 8 个 base32 分组，即 5 个字节用 8 个 base32 中字符来表示。但如果不足 5 个字节，则会先对第一个不足 5 bit 的分组用 0 补足了 5 bit ，对后面剩余分组全部使用 “=” 填充，直到补满 5 个字节。由此可知，base32 最多只有 6 个等号出现。例如：</p><p><img src="https://s1.ax1x.com/2020/04/01/GlWXss.png" alt="base32"></p><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul><li>base64 结尾可能会有 <code>=</code> 号，但最多有 2 个</li><li>base32 结尾可能会有 <code>=</code> 号，但最多有 6 个</li><li>根据 base 的不同，字符集会有所限制</li><li><em><em> 有可能需要自己加等号 </em></em></li><li><strong>= 也就是 3D</strong></li><li>更多内容请参见 <a href="https://tools.ietf.org/html/rfc4648" target="_blank" rel="noopener">base rfc</a></li></ul><h3 id="工具-2"><a href="#工具-2" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="http://www1.tc711.com/tool/BASE64.htm" target="_blank" rel="noopener">http://www1.tc711.com/tool/BASE64.htm</a></li><li>python 库函数</li><li><a href="https://github.com/cjcslhp/wheels/tree/master/b64stego" target="_blank" rel="noopener">读取隐写信息脚本</a></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>题目描述参见 文章末尾的附注</p><p>使用脚本读取隐写信息。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">def</span> deStego <span class="token punctuation">(</span>stegoFile<span class="token punctuation">)</span><span class="token punctuation">:</span>    b64table <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>    <span class="token keyword">with</span> open <span class="token punctuation">(</span>stegoFile<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> stegoText<span class="token punctuation">:</span>        message <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> stegoText<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                text <span class="token operator">=</span> line <span class="token punctuation">[</span>line<span class="token punctuation">.</span>index <span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                message <span class="token operator">+=</span> <span class="token string">""</span><span class="token punctuation">.</span>join <span class="token punctuation">(</span><span class="token punctuation">[</span> bin <span class="token punctuation">(</span> <span class="token number">0</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'='</span> <span class="token keyword">else</span> b64table<span class="token punctuation">.</span>find <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> text<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token keyword">if</span> text<span class="token punctuation">.</span>count <span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token number">2</span> <span class="token keyword">else</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>              <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">pass</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join <span class="token punctuation">(</span><span class="token punctuation">[</span>chr <span class="token punctuation">(</span>int <span class="token punctuation">(</span>message <span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len <span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>deStego <span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出:</p><pre><code>     flag {BASE64_i5_amaz1ng}</code></pre><h2 id="霍夫曼编码"><a href="#霍夫曼编码" class="headerlink" title="霍夫曼编码"></a>霍夫曼编码</h2><blockquote><p>在计算机数据处理中，霍夫曼编码使用变长编码表对源符号（如文件中的一个字母）进行编码，其中变长编码表是通过一种评估来源符号出现几率的方法得到的，出现几率高的字母使用较短的编码，反之出现几率低的则使用较长的编码，这便使编码之后的字符串的平均长度、期望值降低，从而达到无损压缩数据的目的。<br>例如，在英文中，e 的出现几率最高，而 z 的出现概率则最低。当利用霍夫曼编码对一篇英文进行压缩时，e 极有可能用一个比特来表示，而 z 则可能花去 25 个比特（不是 26）。用普通的表示方法时，每个英文字母均占用一个字节，即 8 个比特。二者相比，e 使用了一般编码的 1/8 的长度，z 则使用了 3 倍多。倘若我们能实现对于英文中各个字母出现概率的较准确的估算，就可以大幅度提高无损压缩的比例。</p></blockquote><p>具体信息参见 [霍夫曼编码](<a href="https://zh.wikipedia.org/wiki/%" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%</a> E9%9C%8D% E5% A4% AB% E6%9B% BC% E7% BC%96% E7% A0%81)。</p><h2 id="XXencoding"><a href="#XXencoding" class="headerlink" title="XXencoding"></a>XXencoding</h2><p>XXencode 将输入文本以每三个字节为单位进行编码。如果最后剩下的资料少于三个字节，不够的部份用零补齐。这三个字节共有 24 个 Bit，以 6bit 为单位分为 4 个组，每个组以十进制来表示所出现的数值只会落在 0 到 63 之间。以所对应值的位置字符代替。</p><pre class="line-numbers language-text"><code class="language-text">           1         2         3         4         5         6 0123456789012345678901234567890123456789012345678901234567890123 |         |         |         |         |         |         | +-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>具体信息参见 <a href="https://en.wikipedia.org/wiki/Xxencoding" target="_blank" rel="noopener">维基百科</a></p><h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><ul><li>只有数字，大小写字母</li><li><ul><li>号，- 号。</li></ul></li></ul><h3 id="工具-3"><a href="#工具-3" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="http://web.chacuo.net/charsetxxencode" target="_blank" rel="noopener">http://web.chacuo.net/charsetxxencode</a></li></ul><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h2 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h2><p>参见 [ URL 编码 - 维基百科](<a href="https://zh.wikipedia.org/wiki/%" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%</a> E7%99% BE% E5%88%86% E5%8F% B7% E7% BC%96% E7% A0%81)。</p><h3 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h3><ul><li>大量的百分号</li></ul><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><h2 id="Unicode-编码"><a href="#Unicode-编码" class="headerlink" title="Unicode 编码"></a>Unicode 编码</h2><p>参见 <a href="https://zh.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener"> Unicode - 维基百科</a>。</p><p>注意，它有四种表现形式。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>源文本： <code>The</code></p><p>&amp;#x [Hex]:  <code>&amp;#x0054;&amp;#x0068;&amp;#x0065;</code></p><p>&amp;# [Decimal]:  <code>&amp;#00084;&amp;#00104;&amp;#00101;</code></p><p>\U [Hex]:  <code>\U0054\U0068\U0065</code></p><p>\U+ [Hex]:  <code>\U+0054\U+0068\U+0065</code></p><h1 id="Commonly-Used-Encodings-in-the-Real-World"><a href="#Commonly-Used-Encodings-in-the-Real-World" class="headerlink" title="Commonly Used Encodings in the Real World"></a>Commonly Used Encodings in the Real World</h1><h2 id="条形码"><a href="#条形码" class="headerlink" title="条形码"></a>条形码</h2><p>宽度不等的多个黑条和空白，按照一定的编码规则排列，用以表达一组信息的图形标识符</p><ul><li>国际标准</li><li>EAN-13 商品标准，13 位数字</li><li>Code-39：39 字符</li><li>Code-128：128 字符</li><li><a href="https://online-barcode-reader.inliteresearch.com/" target="_blank" rel="noopener">条形码在线识别</a><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2></li><li>用某种特定几何图形按一定规律在平面分步的黑白相间的图形记录数据符号信息</li><li>堆叠式 / 行排式二维码：Code 16 k、Code 49、PDF417</li><li>矩阵式二维码：QR CODE<br><img src="https://i.loli.net/2020/04/01/fNwuam7EKgq5TVX.png" alt="qr1.jpg"><br><img src="https://i.loli.net/2020/04/01/vWSJjCcVDiFNaum.png" alt="qr2.jpg"></li></ul><h1 id="更多资料推荐"><a href="#更多资料推荐" class="headerlink" title="更多资料推荐"></a>更多资料推荐</h1><ul><li>[CTF 中那些脑洞大开的编码和加密](<a href="http://blog.neargle.com/SecNewsBak/drops/CTF%" target="_blank" rel="noopener">http://blog.neargle.com/SecNewsBak/drops/CTF%</a> E4% B8% AD% E9%82% A3% E4% BA%9B% E8%84%91% E6% B4%9E% E5% A4% A7% E5% BC%80% E7%9A%84% E7% BC%96% E7% A0%81% E5%92%8C% E5%8A% A0% E5% AF%86%20.html)</li></ul><h1 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h1><ul><li>请选手观察以下密文并转换成 flag 形式  <pre><code>..-. .-.. .- --. ..... ..--- ..--- ----- .---- ---.. -.. -.... -.... ..... ...-- ---.. --... -.. .---- -.. .- ----. ...-- .---- ---.. .---- ..--- -... --... --... --... -.... ...-- ....- .---- -----  </code></pre>flag 形式为 32 位大写 md5<br>题目来源：CFF2016</li></ul><ul><li>德军的密码<br>已知将一个 flag 以一种加密形式为使用密钥进行加密，使用密钥 WELCOMETOCFF 加密后密文，请分析出 flag。Flag 为 12 位大写字母（题目来源：CFF2016）<pre><code>000000000000000000000000000000000000000000000000000101110000110001000000101000000001  </code></pre></li></ul><hr><ul><li>Throwback<br>题目描述如下<pre><code>Anyo!e!howouldsacrificepo!icyforexecu!!onspeedthink!securityisacomm!ditytop!urintoasy!tem!</code></pre></li></ul><hr><ul><li>base64?<br>题目描述如下：<pre><code>GUYDIMZVGQ2DMN3CGRQTONJXGM3TINLGG42DGMZXGM3TINLGGY4DGNBXGYZTGNLGGY3DGNBWMU3WI===</code></pre></li></ul><hr><ul><li>熟悉的声音  </li></ul><p>两种不同的元素，如果是声音的话，听起来是不是很熟悉呢</p><pre><code>XYYY YXXX XYXX XXY XYY X XYY YX YYXX  </code></pre><hr><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><ul><li>摩斯电码：<br>利用在线转换得到结果为 : <pre><code>FLAG522018D665387D1DA931812B77763410  </code></pre>恰好 FLAG 后面的字符串为某 32 位大写 MD5  </li></ul><hr><ul><li>德军的密码：  </li></ul><p>因为 WELCOMETOCFF 转化为二进制和上述密文长度相同，猜测是异或，然后将异或结果从二进制转化为 ASCII 码得到 flag：</p><pre><code>WELCOMECISRG  </code></pre><hr><ul><li>Throwback:</li></ul><p>第一直觉应该是我们去补全这些叹号对应的内容，从而得到 flag，但是补全后并不行，那么我们可以把源字符串按照 <code>!</code> 分割，然后字符串长度 1 对应字母 a，长度 2 对应字母 b，以此类推</p><pre class="line-numbers language-shell"><code class="language-shell">ori = 'Anyo!e!howouldsacrificepo!icyforexecu!!onspeedthink!securityisacomm!ditytop!urintoasy!tem!'sp = ori.split ('!')print repr (''.join (chr (97 + len (s) - 1) for s in sp))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>进而可以得到，这里同时需要假设 0 个字符为空格。因为这正好使得原文可读。</p><pre class="line-numbers language-shell"><code class="language-shell">dark logic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><ul><li>Base64?  </li></ul><p>由题目提示，且 Base64 一般都有小写的，而这个却都是大写，Base64 和 Base32 加密中，遇到位数不足都会使用等于号代替，所以可能是 Base32。<br>打开在线 Base32 解密的网站，进行解密。得到一串十六进制的数字，这时候你可以选择使用在线将 hex 转为字符串，即可得出</p><pre><code>PCTF {Just_t3st_h4v3_f4n}</code></pre><hr><ul><li>熟悉的声音  </li></ul><p>仔细观察发现就 X 和 Y 和空格三种字符。应该是摩斯密码了。把 X 替换成.   Y 替换成 -   得到 JBLUWEWNZ，然后凯撒移位。<br>JBLUWEWNZ  移位后发现熟悉的字符  PHRACKCTF</p><hr><h1 id="附注"><a href="#附注" class="headerlink" title="附注"></a>附注</h1><p>下面为题目所需数据</p><pre><code>QmFzZTY0IGlzIGEgZ3JvdXAgb2Ygc2ltaWxhciBiaW5hcnktdG8tdGV4dCBlbmNvZGluZyBzY2hlbWVzIHRoYXQgcmVwcmVzZW50IGJpbmFyeSBkYXRhIGluIGFuIEFTQ0lJIHN0cmluZyBmb3JtYXQgYnkgdHJhbnNsYXRpbmcgaXQgaW50byBhIHJhZGl4LTY0IHJlcHJlc2VudGF0aW9uLiBUaGUgdGVybSBCYXNlNjQgb3JpZ2luYXRlcyBmcm9tIGEgc3BlY2lmaWMgTUlNRSBjb250ZW50IHRyYW5zZmVyIGVuY29kaW5nLgpUaGUgcGFydGljdWxhciBzZXQgb2YgNjQgY2hhcmFjdGVycyBjaG9zZW4gdG8gcmVwcmVzZW50IHRoZSA2NCBwbGFjZS12YWx1ZXMgZm9yIHRoZSBiYXNlIHZhcmllcyBiZXR3ZWVuIGltcGxlbWVudGF0aW9ucy4gVGhlIGdlbmVyYWwgc3RyYXRlZ3kgaXMgdG8gY2hvb3NlIDY0IGNoYXJhY3RlcnMgdGhhdCBhcmUgYm90aCBtZW1iZXJzIG9mIGEgc3Vic2V0IGNvbW1vbiB0byBtb3N0IGVuY29kaW5ncw==IGFuZCBhbHNvIHByaW50YWJsZS4gVGhpcyBjb21iaW5hdGlvbiBsZWF2ZXMgdGhlIGRhdGEgdW5saWtlbHkgdG8gYmUgbW9kaWZpZWQgaW4gdHJhbnNpdCB0aHJvdWdoIGluZm9ybWF0aW9uIHN5c3RlbXM=IHN1Y2ggYXMgZW1haWw=IHRoYXQgd2VyZSB0cmFkaXRpb25hbGx5IG5vdCA4LWJpdCBjbGVhbi5bMV0gRm9yIGV4YW1wbGU=IGGoQ3o=IGFuZCAwqEM5IGZvciB0aGUgZmlyc3QgNjIgdmFsdWVzLiBPdGhlciB2YXJpYXRpb25zIHNoYXJlIHRoaXMgcHJvcGVydHkgYnV0IGRpZmZlciBpbiB0aGUgc3ltYm9scyBjaG9zZW4gZm9yIHRoZSBsYXN0IHR3byB2YWx1ZXM7IGFuIGV4YW1wbGUgaXMgVVRGLTcuCgpUaGUgZWFybGllc3QgaW5zdGFuY2VzIG9mIHRoaXMgdHlwZSBvZiBlbmNvZGluZyB3ZXJlIGNyZWF0ZWQgZm9yIGRpYWx1cCBjb21tdW5pY2F0aW9uIGJldHdlZW4gc3lzdGVtcyBydW5uaW5nIHRoZSBzYW1lIE9TIKGqIGUuZy4=IEJpbkhleCBmb3IgdGhlIFRSUy04MCAobGF0ZXIgYWRhcHRlZCBmb3IgdGhlIE1hY2ludG9zaCkgoaogYW5kIGNvdWxkIHRoZXJlZm9yZSBtYWtlIG1vcmUgYXNzdW1wdGlvbnMgYWJvdXQgd2hhdCBjaGFyYWN0ZXJzIHdlcmUgc2FmZSB0byB1c2UuIEZvciBpbnN0YW5jZQ==IHV1ZW5jb2RlIHVzZXMgdXBwZXJjYXNlIGxldHRlcnM=IGRpZ2l0cw==IGFuZCBtYW55IHB1bmN0dWF0aW9uIGNoYXJhY3RlcnM=IHByb3Bvc2VkIGJ5IFJGQyA5ODkgaW4gMTk4Ny4gUEVNIGRlZmluZXMgYSAicHJpbnRhYmxlIGVuY29kaW5nIiBzY2hlbWUgdGhhdCB1c2VzIEJhc2U2NCBlbmNvZGluZyB0byB0cmFuc2Zvcm0gYW4gYXJiaXRyYXJ5IHNlcXVlbmNlIG9mIG9jdGV0cyB0byBhIGZvcm1hdCB0aGF0IGNhbiBiZSBleHByZXNzZWQgaW4gc2hvcnQgbGluZXMgb2YgNi1iaXQgY2hhcmFjdGVycw==IGFzIHJlcXVpcmVkIGJ5IHRyYW5zZmVyIHByb3RvY29scyBzdWNoIGFzIFNNVFAuWzZdCgpUaGUgY3VycmVudCB2ZXJzaW9uIG9mIFBFTSAoc3BlY2lmaWVkIGluIFJGQyAxNDIxKSB1c2VzIGEgNjQtY2hhcmFjdGVyIGFscGhhYmV0IGNvbnNpc3Rpbmcgb2YgdXBwZXItIGFuZCBsb3dlci1jYXNlIFJvbWFuIGxldHRlcnMgKEGoQ1o=IHRoZSBudW1lcmFscyAoMKhDOSk=IGFuZCB0aGUgIisiIGFuZCAiLyIgc3ltYm9scy4gVGhlICI9IiBzeW1ib2wgaXMgYWxzbyB1c2VkIGFzIGEgc3BlY2lhbCBzdWZmaXggY29kZS5bMl0gVGhlIG9yaWdpbmFsIHNwZWNpZmljYXRpb24=IFJGQyA5ODk=IGFkZGl0aW9uYWxseSB1c2VkIHRoZSAiKiIgc3ltYm9sIHRvIGRlbGltaXQgZW5jb2RlZCBidXQgdW5lbmNyeXB0ZWQgZGF0YSB3aXRoaW4gdGhlIG91dHB1dCBzdHJlYW0uCgpUbyBjb252ZXJ0IGRhdGEgdG8gUEVNIHByaW50YWJsZSBlbmNvZGluZx==IHRoZSBmaXJzdCBieXRlIGlzIHBsYWNlZCBpbiB0aGUgbW9zdCBzaWduaWZpY2FudCBlaWdodCBiaXRzIG9mIGEgMjQtYml0IGJ1ZmZlcp==IHRoZSBuZXh0IGluIHRoZSBtaWRkbGUgZWlnaHS=IGFuZCB0aGUgdGhpcmQgaW4gdGhlIGxlYXN0IHNpZ25pZmljYW50IGVpZ2h0IGJpdHMuIElmIHRoZXJlIGFyZSBmZXdlciB0aGFuIHRocmVlIGJ5dGVzIGxlZnQgdG8gZW5jb2RlIChvciBpbiB0b3RhbCl=IHRoZSByZW1haW5pbmcgYnVmZmVyIGJpdHMgd2lsbCBiZSB6ZXJvLiBUaGUgYnVmZmVyIGlzIHRoZW4gdXNlZL==IHNpeCBiaXRzIGF0IGEgdGltZR==IG1vc3Qgc2lnbmlmaWNhbnQgZmlyc3S=IGFzIGluZGljZXMgaW50byB0aGUgc3RyaW5nOiAiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyI=IGFuZCB0aGUgaW5kaWNhdGVkIGNoYXJhY3RlciBpcyBvdXRwdXQuCgpUaGUgcHJvY2VzcyBpcyByZXBlYXRlZCBvbiB0aGUgcmVtYWluaW5nIGRhdGEgdW50aWwgZmV3ZXIgdGhhbiBmb3VyIG9jdGV0cyByZW1haW4uIElmIHRocmVlIG9jdGV0cyByZW1haW5=IHRoZSBpbnB1dCBkYXRhIGlzIHJpZ2h0LXBhZGRlZCB3aXRoIHplcm8gYml0cyB0byBmb3JtIGFuIGludGVncmFsIG11bHRpcGxlIG9mIHNpeCBiaXRzLgoKQWZ0ZXIgZW5jb2RpbmcgdGhlIG5vbi1wYWRkZWQgZGF0YW==IGlmIHR3byBvY3RldHMgb2YgdGhlIDI0LWJpdCBidWZmZXIgYXJlIHBhZGRlZC16ZXJvc3==IHR3byAiPSIgY2hhcmFjdGVycyBhcmUgYXBwZW5kZWQgdG8gdGhlIG91dHB1dDsgaWYgb25lIG9jdGV0IG9mIHRoZSAyNC1iaXQgYnVmZmVyIGlzIGZpbGxlZCB3aXRoIHBhZGRlZC16ZXJvc3==IG9uZSAiPSIgY2hhcmFjdGVyIGlzIGFwcGVuZGVkLiBUaGlzIHNpZ25hbHMgdGhlIGRlY29kZXIgdGhhdCB0aGUgemVybyBiaXRzIGFkZGVkIGR1ZSB0byBwYWRkaW5nIHNob3VsZCBiZSBleGNsdWRlZCBmcm9tIHRoZSByZWNvbnN0cnVjdGVkIGRhdGEuIFRoaXMgYWxzbyBndWFyYW50ZWVzIHRoYXQgdGhlIGVuY29kZWQgb3V0cHV0IGxlbmd0aCBpcyBhIG11bHRpcGxlIG9mIDQgYnl0ZXMuCgpQRU0gcmVxdWlyZXMgdGhhdCBhbGwgZW5jb2RlZCBsaW5lcyBjb25zaXN0IG9mIGV4YWN0bHkgNjQgcHJpbnRhYmxlIGNoYXJhY3RlcnO=IHdoaWNoIG1heSBjb250YWluIGZld2VyIHByaW50YWJsZSBjaGFyYWN0ZXJzLiBMaW5lcyBhcmUgZGVsaW1pdGVkIGJ5IHdoaXRlc3BhY2UgY2hhcmFjdGVycyBhY2NvcmRpbmcgdG8gbG9jYWwgKHBsYXRmb3JtLXNwZWNpZmljKSBjb252ZW50aW9ucy4KCk1JTUVbZWRpdF0KTWFpbiBhcnRpY2xlOiBNSU1FClRoZSBNSU1FIChNdWx0aXB1cnBvc2UgSW50ZXJuZXQgTWFpbCBFeHRlbnNpb25zKSBzcGVjaWZpY2F0aW9uIGxpc3RzIEJhc2U2NCBhcyBvbmUgb2YgdHdvIGJpbmFyeS10by10ZXh0IGVuY29kaW5nIHNjaGVtZXMgKHRoZSBvdGhlciBiZWluZyBxdW90ZWQtcHJpbnRhYmxlKS5bM10gTUlNRSdzIEJhc2U2NCBlbmNvZGluZyBpcyBiYXNlZCBvbiB0aGF0IG9mIHRoZSBSRkMgMTQyMSB2ZXJzaW9uIG9mIFBFTTogaXQgdXNlcyB0aGUgc2FtZSA2NC1jaGFyYWN0ZXIgYWxwaGFiZXQgYW5kIGVuY29kaW5nIG1lY2hhbmlzbSBhcyBQRU3=IGFuZCB1c2VzIHRoZSAiPSIgc3ltYm9sIGZvciBvdXRwdXQgcGFkZGluZyBpbiB0aGUgc2FtZSB3YXl=IGFzIGRlc2NyaWJlZCBhdCBSRkMgMjA0NS4KCk1JTUUgZG9lcyBub3Qgc3BlY2lmeSBhIGZpeGVkIGxlbmd0aCBmb3IgQmFzZTY0LWVuY29kZWQgbGluZXM=IHRoZSBhY3R1YWwgbGVuZ3RoIG9mIE1JTUUtY29tcGxpYW50IEJhc2U2NC1lbmNvZGVkIGJpbmFyeSBkYXRhIGlzIHVzdWFsbHkgYWJvdXQgMTM3JSBvZiB0aGUgb3JpZ2luYWwgZGF0YSBsZW5ndGg=IHRob3VnaCBmb3IgdmVyeSBzaG9ydCBtZXNzYWdlcyB0aGUgb3ZlcmhlYWQgY2FuIGJlIG11Y2ggaGlnaGVyIGR1ZSB0byB0aGUgb3ZlcmhlYWQgb2YgdGhlIGhlYWRlcnMuIFZlcnkgcm91Z2hseZ==IHRoZSBmaW5hbCBzaXplIG9mIEJhc2U2NC1lbmNvZGVkIGJpbmFyeSBkYXRhIGlzIGVxdWFsIHRvIDEuMzcgdGltZXMgdGhlIG9yaWdpbmFsIGRhdGEgc2l6ZSArIDgxNCBieXRlcyAoZm9yIGhlYWRlcnMpLiBUaGUgc2l6ZSBvZiB0aGUgZGVjb2RlZCBkYXRhIGNhbiBiZSBhcHByb3hpbWF0ZWQgd2l0aCB0aGlzIGZvcm11bGE6CgpieXRlcyA9IChzdHJpbmdfbGVuZ3RoKGVuY29kZWRfc3RyaW5nKSAtIDgxNCkgLyAxLjM3ClVURi03W2VkaXRdCk1haW4gYXJ0aWNsZTogVVRGLTcKVVRGLTc=IGRlc2NyaWJlZCBmaXJzdCBpbiBSRkMgMTY0Mh==IGFuZCB0aGUgIj0iIGNoYXJhY3RlciBpcyByZXNlcnZlZCBpbiB0aGF0IGNvbnRleHQgYXMgdGhlIGVzY2FwZSBjaGFyYWN0ZXIgZm9yICJxdW90ZWQtcHJpbnRhYmxlIiBlbmNvZGluZy4gTW9kaWZpZWQgQmFzZTY0IHNpbXBseSBvbWl0cyB0aGUgcGFkZGluZyBhbmQgZW5kcyBpbW1lZGlhdGVseSBhZnRlciB0aGUgbGFzdCBCYXNlNjQgZGlnaXQgY29udGFpbmluZyB1c2VmdWwgYml0cyBsZWF2aW5nIHVwIHRvIHRocmVlIHVudXNlZCBiaXRzIGluIHRoZSBsYXN0IEJhc2U2NCBkaWdpdC4KCk9wZW5QR1BbZWRpdF0KTWFpbiBhcnRpY2xlOiBPcGVuUEdQCk9wZW5QR1B=IGRlc2NyaWJlZCBpbiBSRkMgNDg4ME==IGRlc2NyaWJlcyBSYWRpeC02NCBlbmNvZGluZ9==IHVzaW5nIGFuIGFkZGl0aW9uYWwgIj0iIHN5bWJvbCBhcyBzZXBhcmF0b3I=IGFwcGVuZGVkIHRvIHRoZSBlbmNvZGVkIG91dHB1dCBkYXRhLls5XQoKUkZDIDM1NDhbZWRpdF0KUkZDIDM1NDh=IGVudGl0bGVkIFRoZSBCYXNlMTZ=IEJhc2UzMj==IGFuZCBCYXNlNjQgRGF0YSBFbmNvZGluZ3N=IGlzIGFuIGluZm9ybWF0aW9uYWwgKG5vbi1ub3JtYXRpdmUpIG1lbW8gdGhhdCBhdHRlbXB0cyB0byB1bmlmeSB0aGUgUkZDIDE0MjEgYW5kIFJGQyAyMDQ1IHNwZWNpZmljYXRpb25zIG9mIEJhc2U2NCBlbmNvZGluZ3O=IGFsdGVybmF0aXZlLWFscGhhYmV0IGVuY29kaW5ncz==IGFuZCB0aGUgc2VsZG9tLXVzZWQgQmFzZTMyIGFuZCBCYXNlMTYgZW5jb2RpbmdzLgoKVW5sZXNzIGltcGxlbWVudGF0aW9ucyBhcmUgd3JpdHRlbiB0byBhIHNwZWNpZmljYXRpb24gdGhhdCByZWZlcnMgdG8gUkZDIDM1NDggYW5kIHNwZWNpZmljYWxseSByZXF1aXJlcyBvdGhlcndpc2V=IGFuZCBpdCBhbHNvIGRlY2xhcmVzIHRoYXQgZGVjb2RlciBpbXBsZW1lbnRhdGlvbnMgbXVzdCByZWplY3QgZGF0YSB0aGF0IGNvbnRhaW4gY2hhcmFjdGVycyBvdXRzaWRlIHRoZSBlbmNvZGluZyBhbHBoYWJldC5bNF0KClJGQyA0NjQ4W2VkaXRdClRoaXMgUkZDIG9ic29sZXRlcyBSRkMgMzU0OCBhbmQgZm9jdXNlcyBvbiBCYXNlNjQvMzIvMTY6CgpUaGlzIGRvY3VtZW50IGRlc2NyaWJlcyB0aGUgY29tbW9ubHkgdXNlZCBCYXNlNjQ=IEJhc2UzMl==IGFuZCBCYXNlMTYgZW5jb2Rpbmcgc2NoZW1lcy4gSXQgYWxzbyBkaXNjdXNzZXMgdGhlIHVzZSBvZiBsaW5lLWZlZWRzIGluIGVuY29kZWQgZGF0Yf==IHVzZSBvZiBwYWRkaW5nIGluIGVuY29kZWQgZGF0YW==IHVzZSBvZiBub24tYWxwaGFiZXQgY2hhcmFjdGVycyBpbiBlbmNvZGVkIGRhdGG=IHNpbmNlIHRoZW4gdGhlIGZpbGVuYW1lcyBjb3VsZCBiZSB1c2VkIGluIFVSTHMgYWxzby4KClVSTCBhcHBsaWNhdGlvbnNbZWRpdF0KQmFzZTY0IGVuY29kaW5nIGNhbiBiZSBoZWxwZnVsIHdoZW4gZmFpcmx5IGxlbmd0aHkgaWRlbnRpZnlpbmcgaW5mb3JtYXRpb24gaXMgdXNlZCBpbiBhbiBIVFRQIGVudmlyb25tZW50LiBGb3IgZXhhbXBsZU==IGEgZGF0YWJhc2UgcGVyc2lzdGVuY2UgZnJhbWV3b3JrIGZvciBKYXZhIG9iamVjdHMgbWlnaHQgdXNlIEJhc2U2NCBlbmNvZGluZyB0byBlbmNvZGUgYSByZWxhdGl2ZWx5IGxhcmdlIHVuaXF1ZSBpZCAoZ2VuZXJhbGx5IDEyOC1iaXQgVVVJRHMpIGludG8gYSBzdHJpbmcgZm9yIHVzZSBhcyBhbiBIVFRQIHBhcmFtZXRlciBpbiBIVFRQIGZvcm1zIG9yIEhUVFAgR0VUIFVSTHMuIEFsc2/=IG1hbnkgYXBwbGljYXRpb25zIG5lZWQgdG8gZW5jb2RlIGJpbmFyeSBkYXRhIGluIGEgd2F5IHRoYXQgaXMgY29udmVuaWVudCBmb3IgaW5jbHVzaW9uIGluIFVSTHN=IGFuZCBCYXNlNjQgaXMgYSBjb252ZW5pZW50IGVuY29kaW5nIHRvIHJlbmRlciB0aGVtIGluIGEgY29tcGFjdCB3YXkuCgpVc2luZyBzdGFuZGFyZCBCYXNlNjQgaW4gVVJMIHJlcXVpcmVzIGVuY29kaW5nIG9mICcrJ1==ICcvJyBiZWNvbWVzICclMkYnIGFuZCAnPScgYmVjb21lcyAnJTNEJyl=IHdoaWNoIG1ha2VzIHRoZSBzdHJpbmcgdW5uZWNlc3NhcmlseSBsb25nZXIuCgpGb3IgdGhpcyByZWFzb27=IHNvIHRoYXQgdXNpbmcgVVJMIGVuY29kZXJzL2RlY29kZXJzIGlzIG5vIGxvbmdlciBuZWNlc3NhcnkgYW5kIGhhdmUgbm8gaW1wYWN0IG9uIHRoZSBsZW5ndGggb2YgdGhlIGVuY29kZWQgdmFsdWX=IHdlYiBmb3Jtc2==IGFuZCBvYmplY3QgaWRlbnRpZmllcnMgaW4gZ2VuZXJhbC4gU29tZSB2YXJpYW50cyBhbGxvdyBvciByZXF1aXJlIG9taXR0aW5nIHRoZSBwYWRkaW5nICc9JyBzaWducyB0byBhdm9pZCB0aGVtIGJlaW5nIGNvbmZ1c2VkIHdpdGggZmllbGQgc2VwYXJhdG9ycx==IG9yIHJlcXVpcmUgdGhhdCBhbnkgc3VjaCBwYWRkaW5nIGJlIHBlcmNlbnQtZW5jb2RlZC4gU29tZSBsaWJyYXJpZXMgKGxpa2Ugb3JnLmJvdW5jeWNhc3RsZS51dGlsLmVuY29kZXJzLlVybEJhc2U2NEVuY29kZXIpIHdpbGwgZW5jb2RlICc9JyB0byAnLicuCgpQcm9ncmFtIGlkZW50aWZpZXJzW2VkaXRdClRoZXJlIGFyZSBvdGhlciB2YXJpYW50cyB0aGF0IHVzZSAnXy0nIG9yICcuXycgd2hlbiB0aGUgQmFzZTY0IHZhcmlhbnQgc3RyaW5nIG11c3QgYmUgdXNlZCB3aXRoaW4gdmFsaWQgaWRlbnRpZmllcnMgZm9yIHByb2dyYW1zLgoKWE1MW2VkaXRdClhNTCBpZGVudGlmaWVycyBhbmQgbmFtZSB0b2tlbnMgYXJlIGVuY29kZWQgdXNpbmcgdHdvIHZhcmlhbnRzOgoKJy4tJyBmb3IgdXNlIGluIFhNTCBuYW1lIHRva2VucyAoTm10b2tlbil=IG9yIGV2ZW4KJ186JyBmb3IgdXNlIGluIG1vcmUgcmVzdHJpY3RlZCBYTUwgaWRlbnRpZmllcnMgKE5hbWUpLgpIVE1MW2VkaXRdClRoZSBhdG9iKCkgYW5kIGJ0b2EoKSBKYXZhU2NyaXB0IG1ldGhvZHO=IGRlZmluZWQgaW4gdGhlIEhUTUw1IGRyYWZ0IHNwZWNpZmljYXRpb27=IGJ1dCB0aGVzZSBhcmUgb3B0aW9uYWwgaW4gdGhlIGlucHV0IG9mIHRoZSBhdG9iKCkgbWV0aG9kLgoKT3RoZXIgYXBwbGljYXRpb25zW2VkaXRdCkJhc2U2NCBjYW4gYmUgdXNlZCBpbiBhIHZhcmlldHkgb2YgY29udGV4dHM6CgpCYXNlNjQgY2FuIGJlIHVzZWQgdG8gdHJhbnNtaXQgYW5kIHN0b3JlIHRleHQgdGhhdCBtaWdodCBvdGhlcndpc2UgY2F1c2UgZGVsaW1pdGVyIGNvbGxpc2lvbgpTcGFtbWVycyB1c2UgQmFzZTY0IHRvIGV2YWRlIGJhc2ljIGFudGktc3BhbW1pbmcgdG9vbHN=IHdoaWNoIG9mdGVuIGRvIG5vdCBkZWNvZGUgQmFzZTY0IGFuZCB0aGVyZWZvcmUgY2Fubm90IGRldGVjdCBrZXl3b3JkcyBpbiBlbmNvZGVkIG1lc3NhZ2VzLgpCYXNlNjQgaXMgdXNlZCB0byBlbmNvZGUgY2hhcmFjdGVyIHN0cmluZ3MgaW4gTERJRiBmaWxlcwpCYXNlNjQgaXMgb2Z0ZW4gdXNlZCB0byBlbWJlZCBiaW5hcnkgZGF0YSBpbiBhbiBYTUwgZmlsZW==IHNvIHRoZXkgY2FuIGJlIGRpc3Rpbmd1aXNoZWQgZnJvbSB0ZXh0IG9yIGhleGFkZWNpbWFsIHN0cmluZ3MuClJhZGl4LTY0IGFwcGxpY2F0aW9ucyBub3QgY29tcGF0aWJsZSB3aXRoIEJhc2U2NFtlZGl0XQpVbml4IHN0b3JlcyBwYXNzd29yZCBoYXNoZXMgY29tcHV0ZWQgd2l0aCBjcnlwdCBpbiB0aGUgL2V0Yy9wYXNzd2QgZmlsZSB1c2luZyByYWRpeC02NCBlbmNvZGluZyBjYWxsZWQgQjY0LiBJdCB1c2VzIGEgbW9zdGx5LWFscGhhbnVtZXJpYyBzZXQgb2YgY2hhcmFjdGVycx==IGJ1dCB0aGUgbm9uLWFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIGFyZSBhdCB0aGUgYmVnaW5uaW5nLiBJdHMgNjQtY2hhcmFjdGVyIHNldCBpcyAiLi8wMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiIuIFBhZGRpbmcgaXMgbm90IHVzZWQuClRoZSBHRURDT00gNS41IHN0YW5kYXJkIGZvciBnZW5lYWxvZ2ljYWwgZGF0YSBpbnRlcmNoYW5nZSBlbmNvZGVzIG11bHRpbWVkaWEgZmlsZXMgaW4gaXRzIHRleHQtbGluZSBoaWVyYXJjaGljYWwgZmlsZSBmb3JtYXQgdXNpbmcgcmFkaXgtNjQuIEl0cyA2NC1jaGFyYWN0ZXIgc2V0IGlzICIuLzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Ii5bMTFdClV1ZW5jb2RpbmcgdXNlcyBBU0NJSSAzMiAoIiAiIChzcGFjZSkpIHRocm91Z2ggOTUgKCJfIil=IGNvbnNlY3V0aXZlbHn=IG5vdCBkbyBhIGxvb2t1cC4gSXRzIHVzZSBvZiBtb3N0IHB1bmN0dWF0aW9uIGNoYXJhY3RlcnMgYW5kIHRoZSBzcGFjZSBjaGFyYWN0ZXIgbGltaXRzIGl0cyB1c2VmdWxuZXNzLltjaXRhdGlvbiBuZWVkZWRdClh4ZW5jb2RpbmcgdXNlcyBhIG1vc3RseS1hbHBoYW51bWVyaWMgY2hhcmFjdGVyIHNldK==IGJ1dCB0aGUgbm9uLWFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIGFyZSBhdCB0aGUgYmVnaW5uaW5nLiBJdHMgNjQtY2hhcmFjdGVyIHNldCBpcyAiKy0wMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiIuCkJpbkhleD==IHVzZXMgZGlmZmVyZW50IHNldCBvZiA2NCBjaGFyYWN0ZXJzLiBJdCB1c2VzIHVwcGVyIGFuZCBsb3dlciBjYXNlIGxldHRlcnM=IGRpZ2l0c1==IGJ1dCBkb2VzIG5vdCB1c2Ugc29tZSB2aXN1YWxseSBjb25mdXNhYmxlIGNoYXJhY3RlcnMgbGlrZSAnNye=ICdPJ+==ICdnJyBhbmQgJ28nLiBJdHMgNjQtY2hhcmFjdGVyIHNldCBpcyAiISIjJCUmJygpKit=IHVzZWQgd2l0aCBzb21lIHRlcm1pbmFsIG5vZGUgY29udHJvbGxlcnO=IHVzZXMgYSBkaWZmZXJlbnQgc2V0IG9mIDY0IGNoYXJhY3RlcnMuWzEyXQpCYXNlNjV=IGEgdmFyaWFudCBvZiBCYXNlNjT=IEEtWn==IC3=IGFuZCBfIGFzIGFkZGl0aW9uYWwgY2hhcmFjdGVycy5=</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf 入门</title>
      <link href="/2020/03/31/ctf-summary/"/>
      <url>/2020/03/31/ctf-summary/</url>
      
        <content type="html"><![CDATA[<p>以下资料来源于互联网</p><h1 id="什么是-CTF"><a href="#什么是-CTF" class="headerlink" title="什么是 CTF"></a>什么是 CTF</h1><p>CTF（ Capture The Flag） 中文一般译作夺旗赛， 在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。 CTF 起源于 1996 年 DEFCON 全球黑客大会， 以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。 发展至今， 已经成为全球范围网络安全圈流行的竞赛形式，2013 年全球举办了超过五十场国际性 CTF 赛事。 而 DEFCON 作为 CTF 赛制的发源地， DEFCON CTF 也成为了目前全球最高技术水平和影响力的 CTF 竞赛， 类似于 CTF 赛场中的 “世界杯”。<br>CTF 为团队赛， 通常以三人为限， 要想在比赛中取得胜利， 就要求团队中每个人在各种类别的题目中至少精通一类， 三人优势互补， 取得团队的胜利。 同时， 准备和参与 CTF 比赛是一种有效将计算机科学的离散面、 聚焦于计算机安全领域的方法。</p><hr><h1 id="竞赛模式"><a href="#竞赛模式" class="headerlink" title="竞赛模式"></a>竞赛模式</h1><p>CTF 是一种流行的信息安全竞赛形式，其英文名可直译为 “夺得 Flag”，也可意译为 “夺旗赛”。其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给 ft 的比赛环境中得到一串具有一定格式的字符串或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为 “Flag”。</p><p>CTF 竞赛模式具体分为以下三类：</p><ul><li>解题模式（ Jeopardy）  <ul><li>在解题模式 CTF 赛制中， 参赛队伍可以通过互联网或者现场网络参与， 这种模式的 CTF 竞赛与 ACM 编程竞赛、 信息学奥赛比较类似， 以解决网络安全技术挑战题目的分值和时间来排名， 通常用于在线选拔赛。 题目主要包含逆向、 漏洞挖掘与利用、 Web 渗透、 密码、 取证、 隐写、 安全编程等类别。</li></ul></li><li>攻防模式（ Attack-Defense）  <ul><li>在攻防模式 CTF 赛制中， 参赛队伍在网络空间互相进行攻击和防守， 挖掘网络服务漏洞并攻击对手服务来得分， 修补自身服务漏洞进行防御来避免丢分。 攻防模式 CTF 赛制可以实时通过得分反映出比赛情况， 最终也以得分直接分出胜负， 是一种竞争激烈， 具有很强观赏性和高度透明性的网络安全赛制。 在这种赛制中， 不仅仅是比参赛队员的智力和技术， 也比体力（ 因为比赛一般都会持续 48 小时及以上） ， 同时也比团队之间的分工配合与合作。</li></ul></li><li>混合模式（ Mix）  <ul><li>结合了解题模式与攻防模式的 CTF 赛制， 比如参赛队伍通过解题可以获取一些初始分数， 然后通过攻防对抗进行得分增减的零和游戏， 最终以得分高低分出胜负。 采用混合模式 CTF 赛制的典型代表如 iCTF 国际 CTF 竞赛。</li></ul></li></ul><hr><h1 id="题目类别"><a href="#题目类别" class="headerlink" title="题目类别"></a>题目类别</h1><ul><li><p>Reverse</p><ul><li>题目涉及到软件逆向、 破解技术等， 要求有较强的反汇编、 反编译功底。主要考查参赛选手的逆向分析能力。</li><li>所需知识： 汇编语言、 加密与解密、 常见反编译工具</li></ul></li><li><p>Pwn</p><ul><li>Pwn 在黑客俚语中代表着攻破， 获取权限， 在 CTF 比赛中它代表着溢出类的题目， 其中常见类型溢出漏洞有整数溢出、 栈溢出、 堆溢出等。 主要考查参赛选手对漏洞的利用能力。</li><li>所需知识： C， OD+IDA， 数据结构， 操作系统</li></ul></li><li><p>Web</p><ul><li>Web 是 CTF 的主要题型， 题目涉及到许多常见的 Web 漏洞， 如 XSS、文件包含、 代码执行、 上传漏洞、 SQL 注入等。 也有一些简单的关于网络基础知识的考察， 如返回包、 TCP/IP、 数据包内容和构造。 可以说题目环境比较接近真实环境。</li><li>所需知识： PHP、 Python、 TCP/IP、 SQL</li></ul></li><li><p>Crypto</p><ul><li>题目考察各种加解密技术， 包括古典加密技术、 现代加密技术甚至出题者自创加密技术， 以及一些常见编码解码， 主要考查参赛选手密码学相关知识点。 通常也会和其他题目相结合。</li><li>所需知识： 矩阵、 数论、 密码学</li></ul></li><li><p>Misc</p><ul><li>Misc 即安全杂项， 题目涉及隐写术、 流量分析、 电子取证、 人肉搜索、 数据分析、 大数据统计等， 覆盖面比较广， 主要考查参赛选手的各种基础综合知识。</li><li>所需知识： 常见隐写术工具、 Wireshark 等流量审查工具、 编码知识</li></ul></li><li><p>Mobile</p><ul><li>主要分为 Android 和 iOS 两个平台， 以 Android 逆向为主， 破解 APK 并提交正确答案。</li><li>所需知识： Java， Android 开发， 常见工具</li></ul></li></ul><hr><h1 id="CTF-基础知识"><a href="#CTF-基础知识" class="headerlink" title="CTF 基础知识"></a>CTF 基础知识</h1><ul><li>Linux 基础</li><li>web 安全基础<ul><li>HTML 基础</li><li>HTTP 协议基础</li><li>JavaScript 基础</li><li>常见 web 服务器基础</li><li>OWASP Top Ten Project 漏洞基础</li><li>PHP 源码审计基础</li></ul></li><li>逆向工程基础<ul><li>C 语言基础</li><li>x86/x86-64 汇编基础</li><li>Linux ELF</li><li>Windows PE</li><li>静态链接</li><li>动态链接</li><li>内存管理</li><li>glibc malloc</li><li>Linux 内核</li><li>windows 内核</li><li>jemalloc</li><li>MIPS 汇编基础</li></ul></li><li>密码学基础</li><li>Android 安全基础<ul><li>Android 环境搭建</li><li>Dalvik 指令集</li><li>ARM 汇编基础</li></ul></li></ul><hr><h1 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h1><ul><li>综合学习平台：</li></ul><p><a href="http://edu.gooann.com/" target="_blank" rel="noopener">谷安网校</a><br><a href="http://www.jikexueyuan.com/" target="_blank" rel="noopener">极客学院</a><br><a href="http://www.hetianlab.com/" target="_blank" rel="noopener">合天</a><br><a href="http://www.moonsos.com/" target="_blank" rel="noopener">米安网</a><br><a href="http://www.ichunqiu.com/" target="_blank" rel="noopener">i 春秋</a><br><a href="http://www.honyaedu.com/" target="_blank" rel="noopener">红亚</a><br><a href="http://www.baimaoxueyuan.com/" target="_blank" rel="noopener">白帽学院</a><br><a href="http://www.simplexue.com/ctf/index" target="_blank" rel="noopener">西普学院</a><br><a href="http://www.imooc.com/course/list" target="_blank" rel="noopener">慕课</a><br><a href="http://www.secbox.cn/" target="_blank" rel="noopener">安全盒子</a><br><a href="http://www.freebuf.com/" target="_blank" rel="noopener">freebuf</a><br><a href="http://bobao.360.cn/" target="_blank" rel="noopener">360 安全播报</a><br><a href="http://www.wooyun.org/" target="_blank" rel="noopener">乌云</a><br><a href="http://drops.wooyun.org/" target="_blank" rel="noopener">乌云知识库</a><br><a href="http://wiki.wooyun.org/" target="_blank" rel="noopener">WooYun WiKi</a><br><a href="https://www.91ri.org/" target="_blank" rel="noopener">91ri</a><br><a href="https://www.t00ls.NET/" target="_blank" rel="noopener">tools</a><br><a href="http://www.ijiandao.com/" target="_blank" rel="noopener">爱尖刀</a><br><a href="http://www.secwk.com/article/index.html" target="_blank" rel="noopener">威客众测</a><br><a href="http://bluereader.org/" target="_blank" rel="noopener">深蓝阅读</a><br><a href="http://www.shentou.org/" target="_blank" rel="noopener">黑客安全军火库</a><br><a href="http://netsecurity.51cto.com/" target="_blank" rel="noopener">51cto</a><br><a href="http://security.csdn.net/" target="_blank" rel="noopener">csdn</a><br><a href="http://www.80sec.com/" target="_blank" rel="noopener">80sec team</a></p><hr><ul><li>博客</li></ul><p><a href="https://security.alibaba.com/blog.htm?spm=0.0.0.0.knOqaI" target="_blank" rel="noopener">阿里巴巴安全响应中心</a><br><a href="http://security.tencent.com/index.PHP/blog" target="_blank" rel="noopener">腾讯安全应急响应中心博客</a><br><a href="http://security.360.cn/blog" target="_blank" rel="noopener">360 安全应急响应中心博客</a><br><a href="http://sec.baidu.com/index.php?research/list" target="_blank" rel="noopener">百度安全应急响应中心博客</a><br><a href="http://217.logdown.com/" target="_blank" rel="noopener">217</a><br><a href="http://www.blue-lotus.net" target="_blank" rel="noopener">blue-lotus 蓝莲花</a><br><a href="http://blog.0ops.net/" target="_blank" rel="noopener">0ops</a><br><a href="http://le4f.net/" target="_blank" rel="noopener">e4f</a><br><a href="http://www.programlife.net/" target="_blank" rel="noopener">代码疯子</a><br><a href="http://www.hackdog.me/" target="_blank" rel="noopener">redrain’blog</a><br><a href="http://www.syjzwjj.com/" target="_blank" rel="noopener">俊杰</a><br><a href="http://syclover.sinaapp.com/" target="_blank" rel="noopener">三叶草安全小组</a><br><a href="http://appleu0.sinaapp.com/" target="_blank" rel="noopener">appleU0 大大</a><br><a href="http://bl4ck.in/" target="_blank" rel="noopener">tomato 表哥</a><br><a href="http://www.sco4x0.com/" target="_blank" rel="noopener">4 叔叔</a><br><a href="http://laterain.sinaapp.com/" target="_blank" rel="noopener">白神</a><br><a href="http://0nly3nd.sinaapp.com/" target="_blank" rel="noopener">0nly3nd</a><br><a href="http://hijacks.in/" target="_blank" rel="noopener">LateRain’blog</a><br><a href="http://www.waitalone.cn/" target="_blank" rel="noopener">独自等待</a><br><a href="http://evilcos.me/" target="_blank" rel="noopener">余弦</a><br><a href="http://www.moonsec.com/" target="_blank" rel="noopener">暗月</a><br><a href="http://www.cnblogs.com/xuanhun/" target="_blank" rel="noopener">玄魂</a><br><a href="https://www.leavesongs.com/" target="_blank" rel="noopener">离别歌</a><br><a href="http://huaidan.org/" target="_blank" rel="noopener">鬼仔</a><br><a href="http://www.03sec.com/" target="_blank" rel="noopener">sky 的自留地</a><br><a href="http://joychou.org/" target="_blank" rel="noopener">jc 老师</a><br><a href="http://www.unhonker.com/" target="_blank" rel="noopener">90’s blog</a><br><a href="http://www1.taosay.net/" target="_blank" rel="noopener">道哥的黑板报</a><br><a href="http://blog.knownsec.com/" target="_blank" rel="noopener">知道创于</a><br><a href="http://www.sadk.org/" target="_blank" rel="noopener">焠安</a><br><a href="http://www.cnseay.com/" target="_blank" rel="noopener">seay’blog</a><br><a href="http://blog.aptsec.net/" target="_blank" rel="noopener">AptSec Team</a><br><a href="http://lcx.cc/" target="_blank" rel="noopener">网络安全研究中心</a><br><a href="http://www.kali.org.cn/" target="_blank" rel="noopener">kali 中文网</a><br><a href="http://xiao106347.blog.163.com/" target="_blank" rel="noopener">xiao106347kali 折腾</a></p><hr><h1 id="系统入手-CTF"><a href="#系统入手-CTF" class="headerlink" title="系统入手 CTF"></a>系统入手 CTF</h1><ul><li>入门必看推荐：<br><a href="https://ctf-wiki.github.io/ctf-wiki/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/</a><br><a href="https://sosly.me/index.php/2017/07/17/studywebsec/" target="_blank" rel="noopener">https://sosly.me/index.php/2017/07/17/studywebsec/</a></li><li>练习推荐：<br><a href="http://www.hetianlab.com/CTFrace.html" target="_blank" rel="noopener">http://www.hetianlab.com/CTFrace.html</a><br><a href="https://adworld.xctf.org.cn/task/answer?type=misc&amp;number=1&amp;grade=0&amp;id=5106" target="_blank" rel="noopener">https://adworld.xctf.org.cn/task/answer?type=misc&amp;number=1&amp;grade=0&amp;id=5106</a><br><a href="https://www.ichunqiu.com/" target="_blank" rel="noopener">https://www.ichunqiu.com/</a><br><a href="http://www.wechall.net/challs" target="_blank" rel="noopener">http://www.wechall.net/challs</a></li><li>工具推荐<br><a href="https://github.com/truongkma/ctf-tools" target="_blank" rel="noopener">https://github.com/truongkma/ctf-tools</a><br><a href="https://github.com/Plkachu/v0lt" target="_blank" rel="noopener">https://github.com/Plkachu/v0lt</a><br><a href="https://github.com/zardus/ctf-tools" target="_blank" rel="noopener">https://github.com/zardus/ctf-tools</a><br><a href="https://github.com/TUCTF/Tools" target="_blank" rel="noopener">https://github.com/TUCTF/Tools</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 资料 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github 搭建个人博客</title>
      <link href="/2020/03/30/github-personpage/"/>
      <url>/2020/03/30/github-personpage/</url>
      
        <content type="html"><![CDATA[<h2 id="参考到的博客和资料"><a href="#参考到的博客和资料" class="headerlink" title="参考到的博客和资料"></a>参考到的博客和资料</h2><p>主要参考 “超详细 Hexo+Github 博客搭建小白教程”：<a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-1" target="_blank" rel="noopener">https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-1</a></p><p>对照参考 “GitHub+Hexo 搭建个人网站详细教程”：<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26625249</a></p><p>模板修改参考（一定要看）<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p><p>使用图床加速访问：<a href="https://juejin.im/post/5a71ac325188257350518a23" target="_blank" rel="noopener">https://juejin.im/post/5a71ac325188257350518a23</a></p><p>github 和 coding 双结点绑定域名改善加载速度：<a href="https://www.sunbufu.club/2019/01/14/GithubPages-CodingPages/" target="_blank" rel="noopener">https://www.sunbufu.club/2019/01/14/GithubPages-CodingPages/</a></p><p>使用 GitHub+Coding 双部署实现国内外网站加速：<a href="http://www.thecat.top/posts/6001.html" target="_blank" rel="noopener">http://www.thecat.top/posts/6001.html</a></p><blockquote><p>附注：验证 ssh 连接 coding 的命令有所修改</p></blockquote><p>ssh -T <a href="mailto:git@git.coding.net" target="_blank" rel="noopener">git@git.coding.net</a> 已经修改为<br>ssh -T <a href="mailto:git@e.coding.net" target="_blank" rel="noopener">git@e.coding.net</a>，详见 coding 的 <a href="https://help.coding.net/docs/project/features/ssh.html" target="_blank" rel="noopener">帮助文档</a></p><h2 id="资源补充"><a href="#资源补充" class="headerlink" title="资源补充"></a>资源补充</h2><p>Node.js 请下载最新版，默认安装即可：<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/</a></p><p>Git 镜像下载：<a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/git-for-windows/</a></p><p>利用 hexo 搭建 github 个人博客遇到的坑及解决：<a href="https://www.jianshu.com/p/13e820c2686b" target="_blank" rel="noopener">https://www.jianshu.com/p/13e820c2686b</a></p><p>删除 github 文件 / 文件夹：<a href="https://www.jianshu.com/p/b4f93946a27d" target="_blank" rel="noopener">https://www.jianshu.com/p/b4f93946a27d</a></p><p>代码块显示问题：<br><a href="https://prismjs.com/#languages-list" target="_blank" rel="noopener">Prism.js 所支持的语言</a></p><h2 id="搭建疑惑"><a href="#搭建疑惑" class="headerlink" title="搭建疑惑"></a>搭建疑惑</h2><blockquote><p>小白如何直接使用模板搭建博客页面</p></blockquote><p>我主要参考的博客里就有谈到这个问题，不过把说明没有放在一起，对于小白来说，仍有很多疑惑，下面简单谈下这个问题：</p><p><a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-1" target="_blank" rel="noopener">快速搭建</a> 里开头便谈到了如何利用模板搭建，而在本地修改之后，需要在模板文件夹里右键打开 Git bash ，hexo g 生成静态网页，hexo s 可以本地预览效果，最后输入 hexo d 就可以上传到 github 上。（所以需要先在本地主机搭建好环境才行）</p><blockquote><p>一定需要购买域名吗</p></blockquote><p>这个是不需要的，我本人使用的就是 github 默认的域名（死于贫穷）</p><blockquote><p>个人主页加载太慢</p></blockquote><p>这个呢，没有特别好的解决方法，一种思路是 coding 和 github 双部署，然后绑定你购买的域名，境外访问的时候被解析到 github，境内访问解析到 coding。我没有购买过域名，所以是有 coding 和 github 两个主页的。</p><blockquote><p>Git bash 输错用户名和密码</p></blockquote><p>参见：<a href="https://www.cnblogs.com/taohuaya/p/10183514.html" target="_blank" rel="noopener">Coding 配合 git 使用时遇到的问题</a></p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>廖雪峰 Git 教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a></p><p>Markdown 菜鸟教程：<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/markdown/md-tutorial.html</a></p><p>Markdown 中文文档：<a href="https://markdown-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://markdown-zh.readthedocs.io/en/latest/</a></p><p>vscode 使用 Markdown 文档编写：<a href="https://www.cnblogs.com/shawWey/p/8931697.html" target="_blank" rel="noopener">https://www.cnblogs.com/shawWey/p/8931697.html</a></p><p>对 vscode 感兴趣，却因配置而头疼的朋友，推荐这个博文：<br><a href="https://blog.csdn.net/weixin_42429718/article/details/104091020" target="_blank" rel="noopener">2020 最新 VS Code 配置 c/c++ 环境 ACM 必备 【简单方式】</a>，不过首先要安装成功 codeblock（带 MinGW 版）</p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总（附代码）</title>
      <link href="/2020/02/16/sort-algorithms/"/>
      <url>/2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<p><img src="http://q81h8mmiq.bkt.clouddn.com/algorithm/1.png" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><em><em> 本文并不会详细讲解每种排序算法的原理 </em></em>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组" target="_blank" rel="noopener">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O (n)$</td><td>$O (n^2)$</td><td>$O (n^2)$</td><td>$O (1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O (n^2)$</td><td>$O (n^2)$</td><td>$O (n^2)$</td><td>$O (1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O (n)$</td><td>$O (n^2)$</td><td>$O (n^2)$</td><td>$O (1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O (n\log n)$</td><td>$O (n^2)$</td><td>$O (n\log n)$</td><td>$O (\log n)$~$O (n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O (n\log n)$</td><td>$O (n\log n)$</td><td>$O (n\log n)$</td><td>$O (n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O (n^{1.3})$</td><td>$O (n^2)$</td><td>$O (n\log n)$~$O (n^2)$</td><td>$O (1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O (n+k)$</td><td>$O (n+k)$</td><td>$O (n+k)$</td><td>$O (n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O (nk)$</td><td>$O (nk)$</td><td>$O (nk)$</td><td>$O (n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O (n)$</td><td>$O (n)$</td><td>$O (n)$</td><td>$O (n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O (n\log n)$</td><td>$O (n\log n)$</td><td>$O (n\log n)$</td><td>$O (1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><em><em> 冒泡排序 </em></em><br><a href="https://en.wikipedia.org/wiki/Bubble_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><em><em> 选择排序 </em></em><br><a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><em><em> 插入排序 </em></em><br><a href="https://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><em><em> 快速排序 </em></em><br><a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Quicksort</a></p><p><em><em> 归并排序 </em></em><br><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><em><em> 希尔排序 </em></em><br><a href="https://en.wikipedia.org/wiki/Shellsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Shellsort</a></p><p><em><em> 计数排序 </em></em><br><a href="https://en.wikipedia.org/wiki/Counting_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><em><em> 基数排序 </em></em><br><a href="https://en.wikipedia.org/wiki/Radix_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><em><em> 桶排序 </em></em><br><a href="https://en.wikipedia.org/wiki/Bucket_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><em><em> 堆排序 </em></em><br><a href="https://en.wikipedia.org/wiki/Heapsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort (vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bubbleSort</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums <span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums <span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">selectSort</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums <span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums <span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">insertSort</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums <span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums <span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums <span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums <span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums <span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mSort</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums <span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lnums <span class="token operator">=</span> <span class="token function">mSort</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rnums <span class="token operator">=</span> <span class="token function">mSort</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums <span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums <span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span> <span class="token punctuation">(</span>lnums <span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span> <span class="token punctuation">(</span>rnums <span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span> <span class="token punctuation">(</span>lnums <span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span> <span class="token punctuation">(</span>rnums <span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSort</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSortNR</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span> <span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums <span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums <span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res <span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shellSort</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums <span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> nums <span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums <span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countSort</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token punctuation">[</span>nums <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span> <span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">radixSort</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxv <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">assign</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count <span class="token punctuation">[</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count <span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> count <span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rank <span class="token punctuation">[</span><span class="token operator">--</span>count <span class="token punctuation">[</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums <span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bucketSort</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">bucket</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket <span class="token punctuation">[</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket <span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span> <span class="token punctuation">(</span>bucket <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums <span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums <span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>nums <span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> nums <span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums <span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">heapSort</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span> <span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
